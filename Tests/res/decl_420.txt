using_block(
  fn_defs: [
    syn_fn_def(
      name: fn_symbol(tdef_errs),
      params: [
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(syntypedef))
          ),
          var: var(tdefs)
        )
      ],
      local_fns: [],
      expr: set_comp(
        sel_exprs: [neq(left: const_or_var(es), right: set_expr({}))],
        source: [
          in_clause(src: const_or_var(tdefs), ptrn: var_ptrn(name: var(td))),
          eq_clause(
            var: var(es),
            expr: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [accessor(expr: const_or_var(td), field: object(type))],
              named_params: [
                syn_fn_def(
                  name: fn_symbol(type_vars_in_scope),
                  params: [],
                  local_fns: [],
                  expr: set_expr({})
                )
              ]
            )
          )
        ],
        expr: tag_obj_expr(
          obj: map_expr(
            {
              (value: const_or_var(es), key: object(errs)),
              (
                value: accessor(expr: const_or_var(td), field: object(name)),
                key: object(type)
              )
            }
          ),
          tag: object(tdef_err)
        )
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(par_tdef_errs),
      params: [
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(synpartypedef))
          ),
          var: var(par_tdefs)
        )
      ],
      local_fns: [],
      expr: set_comp(
        sel_exprs: [neq(left: const_or_var(es), right: set_expr({}))],
        source: [
          in_clause(
            src: const_or_var(par_tdefs),
            ptrn: var_ptrn(name: var(td))
          ),
          eq_clause(
            var: var(es),
            expr: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [accessor(expr: const_or_var(td), field: object(type))],
              named_params: [
                syn_fn_def(
                  name: fn_symbol(type_vars_in_scope),
                  params: [],
                  local_fns: [],
                  expr: fn_call(
                    name: fn_symbol(set),
                    params: [accessor(expr: const_or_var(td), field: object(params))],
                    named_params: []
                  )
                )
              ]
            )
          )
        ],
        expr: tag_obj_expr(
          obj: map_expr(
            {
              (value: const_or_var(es), key: object(errs)),
              (
                value: accessor(expr: const_or_var(td), field: object(name)),
                key: object(type)
              )
            }
          ),
          tag: object(tdef_err)
        )
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(inst_tdef_errs),
      params: [
        (
          type: map_type(
            value_type: type_ref(type_symbol(syntype)),
            key_type: type_ref(type_symbol(typesymbol))
          ),
          var: var(inst_tdefs)
        )
      ],
      local_fns: [],
      expr: set_comp(
        sel_exprs: [neq(left: const_or_var(es), right: set_expr({}))],
        source: [
          map_in_clause(
            src: const_or_var(inst_tdefs),
            value_ptrn: var_ptrn(name: var(t)),
            key_ptrn: var_ptrn(name: var(s))
          ),
          eq_clause(
            var: var(es),
            expr: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [const_or_var(t)],
              named_params: [
                syn_fn_def(
                  name: fn_symbol(type_vars_in_scope),
                  params: [],
                  local_fns: [],
                  expr: select_expr(
                    type: type_ref(type_symbol(typevar)),
                    src_expr: const_or_var(s)
                  )
                )
              ]
            )
          )
        ],
        expr: tag_obj_expr(
          obj: map_expr(
            {
              (value: const_or_var(s), key: object(type)),
              (value: const_or_var(es), key: object(errs))
            }
          ),
          tag: object(tdef_err)
        )
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(fn_def_errs),
      params: [
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(synfndef))
          ),
          var: var(fndefs)
        ),
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(untypedsgn))
          ),
          var: var(global_fns)
        ),
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(basicuntypedsgn))
          ),
          var: var(impl_pars)
        )
      ],
      local_fns: [],
      expr: set_comp(
        sel_exprs: [neq(left: const_or_var(es), right: set_expr({}))],
        source: [
          in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd))),
          eq_clause(
            var: var(es),
            expr: fn_call(
              name: fn_symbol(fndef_wf_errors),
              params: [
                const_or_var(fd),
                const_or_var(global_fns),
                const_or_var(impl_pars)
              ],
              named_params: []
            )
          )
        ],
        expr: tag_obj_expr(
          obj: map_expr(
            {
              (value: const_or_var(es), key: object(errs)),
              (
                value: accessor(expr: const_or_var(fd), field: object(name)),
                key: object(name)
              ),
              (
                value: seq_comp(
                  var: var(p),
                  expr: if_expr(
                    else: object(nil),
                    branches: [
                      (
                        expr: accessor(expr: const_or_var(p), field: object(type)),
                        cond: accessor_test(expr: const_or_var(p), field: object(type))
                      )
                    ]
                  ),
                  src_expr: accessor(expr: const_or_var(fd), field: object(params))
                ),
                key: object(params)
              )
            }
          ),
          tag: object(fndef_err)
        )
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(ublock_errors),
      params: [
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(synusingblock))
          ),
          var: var(ublocks)
        ),
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(untypedsgn))
          ),
          var: var(global_fns)
        )
      ],
      local_fns: [],
      expr: fn_call(
        name: fn_symbol(union),
        params: [
          set_comp(
            sel_exprs: [],
            source: [
              in_clause(src: const_or_var(ublocks), ptrn: var_ptrn(name: var(b)))
            ],
            expr: fn_call(
              name: fn_symbol(block_wf_errors),
              params: [const_or_var(b), const_or_var(global_fns)],
              named_params: []
            )
          )
        ],
        named_params: []
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(block_wf_errors),
      params: [
        (
          type: type_ref(type_symbol(synusingblock)),
          var: var(ublock)
        ),
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(untypedsgn))
          ),
          var: var(global_fns)
        )
      ],
      local_fns: [],
      expr: do_expr(
        [
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(seq_union),
              params: [
                seq_comp(
                  var: var(s),
                  expr: fn_call(
                    name: fn_symbol(sgn_wf_errors),
                    params: [const_or_var(s)],
                    named_params: []
                  ),
                  src_expr: accessor(expr: const_or_var(ublock), field: object(signatures))
                )
              ],
              named_params: []
            ),
            var: var(block_errs)
          ),
          assignment_stmt(
            value: if_expr(
              else: set_expr(
                {
                  tag_obj_expr(
                    obj: map_expr({(value: const_or_var(block_errs), key: object(errs))}),
                    tag: object(ublock_err)
                  )
                }
              ),
              branches: [
                (
                  expr: set_expr({}),
                  cond: eq(left: const_or_var(block_errs), right: set_expr({}))
                )
              ]
            ),
            var: var(err)
          ),
          assignment_stmt(
            value: set_comp(
              sel_exprs: [],
              source: [
                in_clause(
                  src: fn_call(
                    name: fn_symbol(set),
                    params: [
                      accessor(expr: const_or_var(ublock), field: object(signatures))
                    ],
                    named_params: []
                  ),
                  ptrn: var_ptrn(name: var(s))
                )
              ],
              expr: fn_call(
                name: fn_symbol(untyped_sgn),
                params: [const_or_var(s)],
                named_params: []
              )
            ),
            var: var(req_fns)
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(merge_and_override),
              params: [
                const_or_var(global_fns),
                set_comp(
                  sel_exprs: [],
                  source: [
                    in_clause(
                      src: fn_call(
                        name: fn_symbol(set),
                        params: [
                          accessor(expr: const_or_var(ublock), field: object(signatures))
                        ],
                        named_params: []
                      ),
                      ptrn: var_ptrn(name: var(s))
                    )
                  ],
                  expr: fn_call(
                    name: fn_symbol(untyped_sgn),
                    params: [const_or_var(s)],
                    named_params: []
                  )
                )
              ],
              named_params: []
            ),
            var: var(all_fns)
          ),
          return_stmt(
            fn_call(
              name: op_symbol(amp),
              params: [
                const_or_var(err),
                fn_call(
                  name: fn_symbol(fn_def_errs),
                  params: [
                    fn_call(
                      name: fn_symbol(set),
                      params: [
                        accessor(expr: const_or_var(ublock), field: object(fn_defs))
                      ],
                      named_params: []
                    ),
                    const_or_var(all_fns),
                    const_or_var(req_fns)
                  ],
                  named_params: []
                )
              ],
              named_params: []
            )
          )
        ]
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(sgn_wf_errors),
      params: [(type: type_ref(type_symbol(synsgn)), var: var(sgn))],
      local_fns: [],
      expr: do_expr(
        [
          assignment_stmt(
            value: select_expr(
              type: type_ref(type_symbol(typevar)),
              src_expr: const_or_var(sgn)
            ),
            var: var(type_vars)
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(seq_union),
              params: [
                seq_comp(
                  var: var(t),
                  expr: fn_call(
                    name: fn_symbol(type_wf_errors),
                    params: [const_or_var(t)],
                    named_params: [
                      syn_fn_def(
                        name: fn_symbol(type_vars_in_scope),
                        params: [],
                        local_fns: [],
                        expr: const_or_var(type_vars)
                      )
                    ]
                  ),
                  src_expr: accessor(expr: const_or_var(sgn), field: object(params))
                )
              ],
              named_params: []
            ),
            var: var(in_errs)
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [accessor(expr: const_or_var(sgn), field: object(res_type))],
              named_params: [
                syn_fn_def(
                  name: fn_symbol(type_vars_in_scope),
                  params: [],
                  local_fns: [],
                  expr: const_or_var(type_vars)
                )
              ]
            ),
            var: var(out_errs)
          ),
          return_stmt(
            fn_call(
              name: op_symbol(amp),
              params: [const_or_var(in_errs), const_or_var(out_errs)],
              named_params: []
            )
          )
        ]
      ),
      res_type: set_type(
        nonempty: false,
        elem_type: type_ref(type_symbol(tdefusererr))
      )
    )
  ],
  signatures: [
    syn_sgn(
      name: fn_symbol(typedefs),
      params: [],
      res_type: map_type(
        value_type: type_ref(type_symbol(syntype)),
        key_type: type_ref(type_symbol(typesymbol))
      )
    ),
    syn_sgn(
      name: fn_symbol(all_par_type_symbols),
      params: [],
      res_type: set_type(
        nonempty: false,
        elem_type: fixed_seq_type(
          [
            type_ref(type_symbol(basictypesymbol)),
            type_ref(type_symbol(nznat))
          ]
        )
      )
    )
  ]
)
