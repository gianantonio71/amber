syn_fn_def(
  name: fn_symbol(transitive_closure),
  params: [
    (
      type: map_type(
        value_type: set_type(nonempty: false, elem_type: type_var(t)),
        key_type: type_var(t)
      ),
      var: var(map)
    )
  ],
  local_fns: [
    syn_fn_def(
      name: fn_symbol(next_step),
      params: [(var: var(rs)), (var: var(map))],
      local_fns: [],
      expr: fn_call(
        name: op_symbol(amp),
        params: [
          const_or_var(rs),
          fn_call(
            name: fn_symbol(union),
            params: [
              set_comp(
                sel_exprs: [],
                source: [
                  in_clause(src: const_or_var(rs), ptrn: var_ptrn(name: var(r)))
                ],
                expr: fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(map), const_or_var(r)],
                  named_params: []
                )
              )
            ],
            named_params: []
          )
        ],
        named_params: []
      )
    )
  ],
  expr: do_expr(
    [
      assert_stmt(
        do_expr(
          [
            assignment_stmt(
              value: fn_call(
                name: fn_symbol(keys),
                params: [const_or_var(map)],
                named_params: []
              ),
              var: var(all_starts)
            ),
            assignment_stmt(
              value: fn_call(
                name: fn_symbol(union),
                params: [
                  fn_call(
                    name: fn_symbol(values),
                    params: [const_or_var(map)],
                    named_params: []
                  )
                ],
                named_params: []
              ),
              var: var(all_refs)
            ),
            assignment_stmt(
              value: fn_call(
                name: op_symbol(minus),
                params: [const_or_var(all_refs), const_or_var(all_starts)],
                named_params: []
              ),
              var: var(missing)
            ),
            if_stmt(
              else: [],
              branches: [
                (
                  cond: eq(left: const_or_var(missing), right: set_expr({})),
                  body: [return_stmt(object(true))]
                )
              ]
            ),
            print_stmt(const_or_var(missing)),
            return_stmt(object(false))
          ]
        )
      ),
      assignment_stmt(value: const_or_var(map), var: var(closure)),
      inf_loop_stmt(
        [
          assignment_stmt(
            value: map_comp(
              sel_exprs: [],
              source: [
                map_in_clause(
                  src: const_or_var(closure),
                  value_ptrn: var_ptrn(name: var(rs)),
                  key_ptrn: var_ptrn(name: var(n))
                )
              ],
              value_expr: fn_call(
                name: fn_symbol(next_step),
                params: [const_or_var(rs), const_or_var(closure)],
                named_params: []
              ),
              key_expr: const_or_var(n)
            ),
            var: var(new_closure)
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: eq(
                  left: const_or_var(new_closure),
                  right: const_or_var(closure)
                ),
                body: [return_stmt(const_or_var(closure))]
              )
            ]
          ),
          assignment_stmt(value: const_or_var(new_closure), var: var(closure))
        ]
      )
    ]
  ),
  res_type: map_type(
    value_type: set_type(nonempty: false, elem_type: type_var(t)),
    key_type: type_var(t)
  )
)
