using_block(
  fn_defs: [
    syn_fn_def(
      name: fn_symbol(undef_type_symbol_errs),
      params: [
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(synfndef))
          ),
          var: var(fndefs)
        ),
        (
          type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(synusingblock))
          ),
          var: var(ublocks)
        )
      ],
      local_fns: [
        syn_fn_def(
          name: fn_symbol(make_err_obj),
          params: [(type: type_ref(type_symbol(typesymbol)), var: var(ts))],
          local_fns: [],
          expr: match_expr(
            cases: [
              case(
                expr: tag_obj_expr(obj: const_or_var(ts), tag: object(undef_type_name)),
                patterns: [type_ptrn(type_ref(type_symbol(basictypesymbol)))]
              ),
              case(
                expr: tag_obj_expr(
                  obj: map_expr(
                    {
                      (
                        value: accessor(expr: const_or_var(ts), field: object(name)),
                        key: object(name)
                      ),
                      (
                        value: fn_call(
                          name: fn_symbol(length),
                          params: [accessor(expr: const_or_var(ts), field: object(params))],
                          named_params: []
                        ),
                        key: object(arity)
                      )
                    }
                  ),
                  tag: object(undef_par_type_name)
                ),
                patterns: [type_ptrn(type_ref(type_symbol(partypesymbol)))]
              )
            ],
            exprs: [fn_par(0)]
          ),
          res_type: type_ref(type_symbol(tdefusererr))
        ),
        syn_fn_def(
          name: fn_symbol(all_type_symbols),
          params: [(type: type_ref(type_symbol(any)), var: var(obj))],
          local_fns: [],
          expr: do_expr(
            [
              assignment_stmt(
                value: select_expr(
                  type: type_ref(type_symbol(typesymbol)),
                  src_expr: const_or_var(obj)
                ),
                var: var(type_symbs)
              ),
              inf_loop_stmt(
                [
                  assignment_stmt(
                    value: fn_call(
                      name: fn_symbol(union),
                      params: [
                        set_comp(
                          sel_exprs: [],
                          source: [
                            in_clause(
                              src: const_or_var(type_symbs),
                              ptrn: var_ptrn(
                                name: var(ts),
                                ptrn: type_ptrn(type_ref(type_symbol(partypesymbol)))
                              )
                            )
                          ],
                          expr: fn_call(
                            name: fn_symbol(all_type_symbols),
                            params: [accessor(expr: const_or_var(ts), field: object(params))],
                            named_params: []
                          )
                        )
                      ],
                      named_params: []
                    ),
                    var: var(new_type_symbs)
                  ),
                  assignment_stmt(
                    value: fn_call(
                      name: op_symbol(minus),
                      params: [const_or_var(new_type_symbs), const_or_var(type_symbs)],
                      named_params: []
                    ),
                    var: var(new_type_symbs)
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: eq(left: const_or_var(new_type_symbs), right: set_expr({})),
                        body: [return_stmt(const_or_var(type_symbs))]
                      )
                    ]
                  ),
                  assignment_stmt(
                    value: fn_call(
                      name: op_symbol(amp),
                      params: [const_or_var(type_symbs), const_or_var(new_type_symbs)],
                      named_params: []
                    ),
                    var: var(type_symbs)
                  )
                ]
              )
            ]
          ),
          res_type: set_type(
            nonempty: false,
            elem_type: type_ref(type_symbol(typesymbol))
          )
        )
      ],
      expr: do_expr(
        [
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(all_type_symbols),
              params: [
                seq_expr(
                  head: [
                    const_or_var(fndefs),
                    const_or_var(ublocks),
                    fn_call(
                      name: fn_symbol(values),
                      params: [const_or_var(typedefs)],
                      named_params: []
                    )
                  ]
                )
              ],
              named_params: []
            ),
            var: var(used_type_symbs)
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(keys),
              params: [const_or_var(typedefs)],
              named_params: []
            ),
            var: var(def_type_symbs)
          ),
          assignment_stmt(
            value: fn_call(
              name: op_symbol(minus),
              params: [
                const_or_var(used_type_symbs),
                const_or_var(def_type_symbs)
              ],
              named_params: []
            ),
            var: var(missing_type_symbs)
          ),
          return_stmt(
            set_comp(
              sel_exprs: [],
              source: [
                in_clause(
                  src: const_or_var(missing_type_symbs),
                  ptrn: var_ptrn(name: var(ts))
                )
              ],
              expr: tag_obj_expr(
                obj: map_expr(
                  {
                    (value: const_or_var(ts), key: object(type)),
                    (
                      value: set_expr(
                        {
                          fn_call(
                            name: fn_symbol(make_err_obj),
                            params: [const_or_var(ts)],
                            named_params: []
                          )
                        }
                      ),
                      key: object(errs)
                    )
                  }
                ),
                tag: object(tdef_err)
              )
            )
          )
        ]
      ),
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(usererr)))
    ),
    syn_fn_def(
      name: fn_symbol(syn_fns_are_compatible),
      params: [
        (type: type_ref(type_symbol(synfndef)), var: var(fd1)),
        (type: type_ref(type_symbol(synfndef)), var: var(fd2))
      ],
      local_fns: [
        syn_fn_def(
          name: fn_symbol(are_part_compatible),
          params: [
            (type: type_ref(type_symbol(syntype)), var: var(t1)),
            (type: type_ref(type_symbol(syntype)), var: var(t2))
          ],
          local_fns: [],
          expr: fn_call(
            name: fn_symbol(are_disjoint),
            params: [
              fn_call(
                name: fn_symbol(partitions),
                params: [const_or_var(t1)],
                named_params: []
              ),
              fn_call(
                name: fn_symbol(partitions),
                params: [const_or_var(t2)],
                named_params: []
              )
            ],
            named_params: []
          ),
          res_type: type_ref(type_symbol(bool))
        )
      ],
      expr: do_expr(
        [
          assert_stmt(
            eq(
              left: accessor(expr: const_or_var(fd1), field: object(name)),
              right: accessor(expr: const_or_var(fd2), field: object(name))
            )
          ),
          assert_stmt(
            eq(
              left: fn_call(
                name: fn_symbol(arity),
                params: [const_or_var(fd1)],
                named_params: []
              ),
              right: fn_call(
                name: fn_symbol(arity),
                params: [const_or_var(fd2)],
                named_params: []
              )
            )
          ),
          for_stmt(
            body: [
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(brackets),
                  params: [
                    accessor(expr: const_or_var(fd2), field: object(params)),
                    const_or_var(i)
                  ],
                  named_params: []
                ),
                var: var(p2)
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: and(
                      left: and(
                        left: accessor_test(expr: const_or_var(p1), field: object(type)),
                        right: accessor_test(expr: const_or_var(p2), field: object(type))
                      ),
                      right: fn_call(
                        name: fn_symbol(are_part_compatible),
                        params: [
                          accessor(expr: const_or_var(p1), field: object(type)),
                          accessor(expr: const_or_var(p2), field: object(type))
                        ],
                        named_params: []
                      )
                    ),
                    body: [return_stmt(object(true))]
                  )
                ]
              )
            ],
            loops: [
              seq_iter(
                var: var(p1),
                values: accessor(expr: const_or_var(fd1), field: object(params)),
                idx_var: var(i)
              )
            ]
          ),
          return_stmt(object(false))
        ]
      ),
      res_type: type_ref(type_symbol(bool))
    ),
    syn_fn_def(
      name: fn_symbol(par_parts),
      params: [(type: type_ref(type_symbol(synfndef)), var: var(fd))],
      local_fns: [],
      expr: seq_comp(
        var: var(p),
        expr: if_expr(
          else: object(all_objs),
          branches: [
            (
              expr: fn_call(
                name: fn_symbol(partitions),
                params: [accessor(expr: const_or_var(p), field: object(type))],
                named_params: []
              ),
              cond: accessor_test(expr: const_or_var(p), field: object(type))
            )
          ]
        ),
        src_expr: accessor(expr: const_or_var(fd), field: object(params))
      ),
      res_type: seq_type(
        nonempty: false,
        elem_type: type_ref(type_symbol(objpartset))
      )
    )
  ],
  signatures: [
    syn_sgn(
      name: fn_symbol(typedefs),
      params: [],
      res_type: map_type(
        value_type: type_ref(type_symbol(syntype)),
        key_type: type_ref(type_symbol(typesymbol))
      )
    )
  ]
)
