syn_fn_def(
  name: fn_symbol(syn_new_vars),
  params: [(type: type_ref(type_symbol(synstmt)), var: var(stmt))],
  local_fns: [],
  expr: match_expr(
    cases: [
      case(
        expr: set_expr({accessor(expr: const_or_var(stmt), field: object(var))}),
        patterns: [
          tag_ptrn(
            obj: type_ptrn(type_any),
            tag: obj_ptrn(object(assignment_stmt))
          )
        ]
      ),
      case(
        expr: fn_call(
          name: fn_symbol(intersection),
          params: [
            fn_call(
              name: op_symbol(amp),
              params: [
                set_comp(
                  sel_exprs: [],
                  source: [
                    in_clause(
                      src: fn_call(
                        name: fn_symbol(set),
                        params: [
                          accessor(expr: const_or_var(stmt), field: object(branches))
                        ],
                        named_params: []
                      ),
                      ptrn: var_ptrn(name: var(b))
                    )
                  ],
                  expr: fn_call(
                    name: fn_symbol(syn_new_vars),
                    params: [accessor(expr: const_or_var(b), field: object(body))],
                    named_params: []
                  )
                ),
                set_expr(
                  {
                    fn_call(
                      name: fn_symbol(syn_new_vars),
                      params: [accessor(expr: const_or_var(stmt), field: object(else))],
                      named_params: []
                    )
                  }
                )
              ],
              named_params: []
            )
          ],
          named_params: []
        ),
        patterns: [
          tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(if_stmt)))
        ]
      ),
      case(
        expr: fn_call(
          name: fn_symbol(syn_new_vars),
          params: [accessor(expr: const_or_var(stmt), field: object(body))],
          named_params: []
        ),
        patterns: [
          tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(let_stmt)))
        ]
      ),
      case(expr: set_expr({}), patterns: [type_ptrn(type_any)])
    ],
    exprs: [fn_par(0)]
  ),
  res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(var)))
)
