using_block(
  fn_defs: [
    syn_fn_def(
      name: fn_symbol(type_wf_errors),
      params: [(type: type_ref(type_symbol(syntype)), var: var(type))],
      local_fns: [],
      expr: match_expr(
        cases: [
          case(
            expr: set_expr({}),
            patterns: [type_ptrn(type_ref(type_symbol(leaftype)))]
          ),
          case(
            expr: set_expr(
              {
                cond_expr(
                  expr: tag_obj_expr(obj: const_or_var(ts), tag: object(undef_type_name)),
                  cond: not(
                    fn_call(
                      name: fn_symbol(has_key),
                      params: [const_or_var(typedefs), const_or_var(ts)],
                      named_params: []
                    )
                  )
                )
              }
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(
                  name: var(ts),
                  ptrn: type_ptrn(type_ref(type_symbol(basictypesymbol)))
                ),
                tag: obj_ptrn(object(type_ref))
              )
            ]
          ),
          case(
            expr: fn_call(
              name: op_symbol(amp),
              params: [
                fn_call(
                  name: fn_symbol(union),
                  params: [
                    set_comp(
                      sel_exprs: [],
                      source: [
                        in_clause(
                          src: fn_call(
                            name: fn_symbol(set),
                            params: [accessor(expr: const_or_var(ts), field: object(params))],
                            named_params: []
                          ),
                          ptrn: var_ptrn(name: var(t))
                        )
                      ],
                      expr: fn_call(
                        name: fn_symbol(type_wf_errors),
                        params: [const_or_var(t)],
                        named_params: []
                      )
                    )
                  ],
                  named_params: []
                ),
                set_expr(
                  {
                    cond_expr(
                      expr: tag_obj_expr(
                        obj: map_expr(
                          {
                            (
                              value: accessor(expr: const_or_var(ts), field: object(symbol)),
                              key: object(name)
                            ),
                            (
                              value: fn_call(
                                name: fn_symbol(length),
                                params: [accessor(expr: const_or_var(ts), field: object(params))],
                                named_params: []
                              ),
                              key: object(arity)
                            )
                          }
                        ),
                        tag: object(undef_par_type_name)
                      ),
                      cond: not(
                        fn_call(
                          name: fn_symbol(in),
                          params: [
                            seq_expr(
                              head: [
                                accessor(expr: const_or_var(ts), field: object(symbol)),
                                fn_call(
                                  name: fn_symbol(length),
                                  params: [accessor(expr: const_or_var(ts), field: object(params))],
                                  named_params: []
                                )
                              ]
                            ),
                            const_or_var(all_par_type_symbols)
                          ],
                          named_params: []
                        )
                      )
                    )
                  }
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(
                  name: var(ts),
                  ptrn: type_ptrn(type_ref(type_symbol(partypesymbol)))
                ),
                tag: obj_ptrn(object(type_ref))
              )
            ]
          ),
          case(
            expr: set_expr(
              {
                cond_expr(
                  expr: tag_obj_expr(obj: const_or_var(type), tag: object(undef_type_var)),
                  cond: not(
                    fn_call(
                      name: fn_symbol(in),
                      params: [const_or_var(type), const_or_var(type_vars_in_scope)],
                      named_params: []
                    )
                  )
                )
              }
            ),
            patterns: [type_ptrn(type_ref(type_symbol(typevar)))]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [
                accessor(expr: const_or_var(type), field: object(elem_type))
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(seq_type)))
            ]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(union),
              params: [
                set_comp(
                  sel_exprs: [],
                  source: [
                    in_clause(
                      src: fn_call(
                        name: fn_symbol(set),
                        params: [const_or_var(ts)],
                        named_params: []
                      ),
                      ptrn: var_ptrn(name: var(t))
                    )
                  ],
                  expr: fn_call(
                    name: fn_symbol(type_wf_errors),
                    params: [const_or_var(t)],
                    named_params: []
                  )
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(ts)),
                tag: obj_ptrn(object(fixed_seq_type))
              )
            ]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(type_wf_errors),
              params: [
                accessor(expr: const_or_var(type), field: object(elem_type))
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(set_type)))
            ]
          ),
          case(
            expr: fn_call(
              name: op_symbol(amp),
              params: [
                fn_call(
                  name: fn_symbol(type_wf_errors),
                  params: [
                    accessor(expr: const_or_var(type), field: object(key_type))
                  ],
                  named_params: []
                ),
                fn_call(
                  name: fn_symbol(type_wf_errors),
                  params: [
                    accessor(expr: const_or_var(type), field: object(value_type))
                  ],
                  named_params: []
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(map_type)))
            ]
          ),
          case(
            expr: do_expr(
              [
                assignment_stmt(
                  value: fn_call(
                    name: fn_symbol(apply),
                    params: [const_or_var(fs)],
                    named_params: [
                      syn_fn_def(
                        name: fn_symbol(f),
                        params: [(var: var(f))],
                        local_fns: [],
                        expr: accessor(expr: const_or_var(f), field: object(label))
                      )
                    ]
                  ),
                  var: var(lab_count)
                ),
                assignment_stmt(
                  value: set_comp(
                    sel_exprs: [],
                    source: [
                      map_in_clause(
                        src: const_or_var(lab_count),
                        value_ptrn: var_ptrn(name: var(n)),
                        key_ptrn: var_ptrn(name: var(l))
                      )
                    ],
                    expr: const_or_var(l)
                  ),
                  var: var(rep_labs)
                ),
                assignment_stmt(
                  value: if_expr(
                    else: tag_obj_expr(
                      obj: const_or_var(rep_labs),
                      tag: object(rep_labels_in_map)
                    ),
                    branches: [
                      (
                        expr: set_expr({}),
                        cond: eq(left: const_or_var(rep_labs), right: set_expr({}))
                      )
                    ]
                  ),
                  var: var(lab_errs)
                ),
                return_stmt(
                  fn_call(
                    name: fn_symbol(union),
                    params: [
                      set_comp(
                        sel_exprs: [],
                        source: [
                          in_clause(src: const_or_var(fs), ptrn: var_ptrn(name: var(f)))
                        ],
                        expr: fn_call(
                          name: fn_symbol(type_wf_errors),
                          params: [accessor(expr: const_or_var(f), field: object(type))],
                          named_params: []
                        )
                      )
                    ],
                    named_params: []
                  )
                )
              ]
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(fs)),
                tag: obj_ptrn(object(tuple_type))
              )
            ]
          ),
          case(
            expr: do_expr(
              [
                if_stmt(
                  else: [
                    assignment_stmt(
                      value: tag_obj_expr(
                        obj: accessor(expr: const_or_var(type), field: object(tag_type)),
                        tag: object(invalid_type_for_tag)
                      ),
                      var: var(tag_errs)
                    )
                  ],
                  branches: [
                    (
                      cond: membership(
                        type: union_type(
                          {
                            symb_type(object(atom_type)),
                            type_ref(type_symbol(symbtype)),
                            set_type(nonempty: true, elem_type: type_ref(type_symbol(symbtype)))
                          }
                        ),
                        obj: accessor(expr: const_or_var(type), field: object(tag_type))
                      ),
                      body: [assignment_stmt(value: set_expr({}), var: var(tag_errs))]
                    )
                  ]
                ),
                return_stmt(
                  fn_call(
                    name: op_symbol(amp),
                    params: [
                      const_or_var(tag_errs),
                      fn_call(
                        name: fn_symbol(type_wf_errors),
                        params: [
                          accessor(expr: const_or_var(type), field: object(obj_type))
                        ],
                        named_params: []
                      )
                    ],
                    named_params: []
                  )
                )
              ]
            ),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(tag_type)))
            ]
          ),
          case(
            expr: do_expr(
              [
                assignment_stmt(
                  value: fn_call(
                    name: fn_symbol(normalize_unions),
                    params: [const_or_var(ts)],
                    named_params: []
                  ),
                  var: var(nts)
                ),
                assignment_stmt(
                  value: fn_call(
                    name: fn_symbol(union),
                    params: [
                      set_comp(
                        sel_exprs: [],
                        source: [
                          in_clause(src: const_or_var(nts), ptrn: var_ptrn(name: var(t)))
                        ],
                        expr: fn_call(
                          name: fn_symbol(type_wf_errors),
                          params: [const_or_var(t)],
                          named_params: []
                        )
                      )
                    ],
                    named_params: []
                  ),
                  var: var(errs)
                ),
                if_stmt(
                  else: [],
                  branches: [
                    (
                      cond: neq(left: const_or_var(errs), right: set_expr({})),
                      body: [return_stmt(const_or_var(errs))]
                    )
                  ]
                ),
                assignment_stmt(
                  value: fn_call(
                    name: fn_symbol(incompatibilities),
                    params: [const_or_var(nts)],
                    named_params: []
                  ),
                  var: var(ncts)
                ),
                if_stmt(
                  else: [
                    return_stmt(
                      set_expr(
                        {
                          tag_obj_expr(
                            obj: const_or_var(ncts),
                            tag: object(incompatible_types_in_union_type)
                          )
                        }
                      )
                    )
                  ],
                  branches: [
                    (
                      cond: eq(left: const_or_var(ncts), right: set_expr({})),
                      body: [return_stmt(set_expr({}))]
                    )
                  ]
                )
              ]
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(ts)),
                tag: obj_ptrn(object(union_type))
              )
            ]
          )
        ],
        exprs: [fn_par(0)]
      ),
      res_type: set_type(
        nonempty: false,
        elem_type: type_ref(type_symbol(tdefusererr))
      )
    ),
    syn_fn_def(
      name: fn_symbol(incompatibilities),
      params: [
        (
          type: set_type(nonempty: true, elem_type: type_ref(type_symbol(syntype))),
          var: var(types)
        )
      ],
      local_fns: [
        syn_fn_def(
          name: fn_symbol(are_syn_compatible),
          params: [
            (type: type_ref(type_symbol(syntype)), var: var(t1)),
            (type: type_ref(type_symbol(syntype)), var: var(t2))
          ],
          local_fns: [],
          expr: match_expr(
            cases: [
              case(
                expr: object(false),
                patterns: [
                  type_ptrn(type_ref(type_symbol(typevar))),
                  type_ptrn(type_any)
                ]
              ),
              case(
                expr: object(false),
                patterns: [
                  type_ptrn(type_any),
                  type_ptrn(type_ref(type_symbol(typevar)))
                ]
              ),
              case(
                expr: object(true),
                patterns: [
                  type_ptrn(type_ref(type_symbol(inttype))),
                  type_ptrn(type_ref(type_symbol(inttype)))
                ]
              ),
              case(
                expr: fn_call(
                  name: fn_symbol(are_disjoint),
                  params: [
                    fn_call(
                      name: fn_symbol(partitions),
                      params: [const_or_var(t1)],
                      named_params: []
                    ),
                    fn_call(
                      name: fn_symbol(partitions),
                      params: [const_or_var(t2)],
                      named_params: []
                    )
                  ],
                  named_params: []
                ),
                patterns: [type_ptrn(type_any), type_ptrn(type_any)]
              )
            ],
            exprs: [fn_par(0), fn_par(1)]
          ),
          res_type: type_ref(type_symbol(bool))
        )
      ],
      expr: do_expr(
        [
          return_stmt(
            set_comp(
              sel_exprs: [
                and(
                  left: neq(left: const_or_var(t1), right: const_or_var(t2)),
                  right: not(
                    fn_call(
                      name: fn_symbol(are_syn_compatible),
                      params: [const_or_var(t1), const_or_var(t2)],
                      named_params: []
                    )
                  )
                )
              ],
              source: [
                in_clause(src: const_or_var(types), ptrn: var_ptrn(name: var(t1))),
                in_clause(src: const_or_var(types), ptrn: var_ptrn(name: var(t2)))
              ],
              expr: set_expr({const_or_var(t1), const_or_var(t2)})
            )
          )
        ]
      ),
      res_type: set_type(
        nonempty: false,
        elem_type: set_type(nonempty: true, elem_type: type_ref(type_symbol(syntype)))
      )
    )
  ],
  signatures: [
    syn_sgn(
      name: fn_symbol(typedefs),
      params: [],
      res_type: map_type(
        value_type: type_ref(type_symbol(syntype)),
        key_type: type_ref(type_symbol(typesymbol))
      )
    ),
    syn_sgn(
      name: fn_symbol(all_par_type_symbols),
      params: [],
      res_type: set_type(
        nonempty: false,
        elem_type: fixed_seq_type(
          [
            type_ref(type_symbol(basictypesymbol)),
            type_ref(type_symbol(nznat))
          ]
        )
      )
    ),
    syn_sgn(
      name: fn_symbol(type_vars_in_scope),
      params: [],
      res_type: set_type(nonempty: false, elem_type: type_ref(type_symbol(typevar)))
    )
  ]
)
