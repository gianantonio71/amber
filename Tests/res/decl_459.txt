using_block(
  fn_defs: [
    syn_fn_def(
      name: fn_symbol(fndefs_are_wf),
      params: [
        (
          type: set_type(nonempty: false, elem_type: type_ref(type_symbol(fndef))),
          var: var(fndefs)
        )
      ],
      local_fns: [],
      expr: do_expr(
        [
          assignment_stmt(
            value: set_comp(
              sel_exprs: [],
              source: [
                in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd)))
              ],
              expr: map_expr(
                {
                  (
                    value: accessor(expr: const_or_var(fd), field: object(name)),
                    key: object(name)
                  ),
                  (
                    value: fn_call(
                      name: fn_symbol(arity),
                      params: [const_or_var(fd)],
                      named_params: []
                    ),
                    key: object(arity)
                  )
                }
              )
            ),
            var: var(sgns)
          ),
          assignment_stmt(
            value: set_comp(
              sel_exprs: [],
              source: [
                in_clause(src: const_or_var(sgns), ptrn: var_ptrn(name: var(s)))
              ],
              expr: set_comp(
                sel_exprs: [
                  and(
                    left: eq(
                      left: accessor(expr: const_or_var(fd), field: object(name)),
                      right: accessor(expr: const_or_var(s), field: object(name))
                    ),
                    right: eq(
                      left: fn_call(
                        name: fn_symbol(arity),
                        params: [const_or_var(fd)],
                        named_params: []
                      ),
                      right: accessor(expr: const_or_var(s), field: object(arity))
                    )
                  )
                ],
                source: [
                  in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd)))
                ],
                expr: const_or_var(fd)
              )
            ),
            var: var(grouped_fns)
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: ex_qual(
                  sel_exprs: [
                    not(
                      fn_call(
                        name: fn_symbol(are_compatible),
                        params: [const_or_var(g)],
                        named_params: []
                      )
                    )
                  ],
                  source: [
                    in_clause(
                      src: const_or_var(grouped_fns),
                      ptrn: var_ptrn(name: var(g))
                    )
                  ]
                ),
                body: [return_stmt(object(false))]
              )
            ]
          ),
          return_stmt(
            not(
              ex_qual(
                sel_exprs: [
                  not(
                    fn_call(
                      name: fn_symbol(fndef_is_wf),
                      params: [const_or_var(fd), const_or_var(fndefs)],
                      named_params: []
                    )
                  )
                ],
                source: [
                  in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd)))
                ]
              )
            )
          )
        ]
      ),
      res_type: type_ref(type_symbol(tautology))
    ),
    syn_fn_def(
      name: fn_symbol(are_compatible),
      params: [
        (
          type: set_type(nonempty: false, elem_type: type_ref(type_symbol(fndef))),
          var: var(fndefs)
        )
      ],
      local_fns: [
        syn_fn_def(
          name: fn_symbol(are_comp),
          params: [
            (type: type_ref(type_symbol(fndef)), var: var(fd1)),
            (type: type_ref(type_symbol(fndef)), var: var(fd2))
          ],
          local_fns: [],
          expr: do_expr(
            [
              assert_stmt(
                eq(
                  left: fn_call(
                    name: fn_symbol(arity),
                    params: [const_or_var(fd1)],
                    named_params: []
                  ),
                  right: fn_call(
                    name: fn_symbol(arity),
                    params: [const_or_var(fd2)],
                    named_params: []
                  )
                )
              ),
              for_stmt(
                body: [
                  assignment_stmt(
                    value: fn_call(
                      name: op_symbol(brackets),
                      params: [
                        accessor(expr: const_or_var(fd2), field: object(params)),
                        const_or_var(i)
                      ],
                      named_params: []
                    ),
                    var: var(p2)
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: and(
                          left: and(
                            left: accessor_test(expr: const_or_var(p1), field: object(type)),
                            right: accessor_test(expr: const_or_var(p2), field: object(type))
                          ),
                          right: fn_call(
                            name: fn_symbol(are_compatible),
                            params: [
                              accessor(expr: const_or_var(p1), field: object(type)),
                              accessor(expr: const_or_var(p2), field: object(type))
                            ],
                            named_params: []
                          )
                        ),
                        body: [return_stmt(object(true))]
                      )
                    ]
                  )
                ],
                loops: [
                  seq_iter(
                    var: var(p1),
                    values: accessor(expr: const_or_var(fd1), field: object(params)),
                    idx_var: var(i)
                  )
                ]
              ),
              return_stmt(
                eq(
                  left: accessor(expr: const_or_var(fd1), field: object(named_params)),
                  right: accessor(expr: const_or_var(fd2), field: object(named_params))
                )
              )
            ]
          ),
          res_type: type_ref(type_symbol(tautology))
        )
      ],
      expr: do_expr(
        [
          return_stmt(
            not(
              ex_qual(
                sel_exprs: [
                  neq(left: const_or_var(fd1), right: const_or_var(fd2)),
                  not(
                    fn_call(
                      name: fn_symbol(are_comp),
                      params: [const_or_var(fd1), const_or_var(fd2)],
                      named_params: []
                    )
                  )
                ],
                source: [
                  in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd1))),
                  in_clause(src: const_or_var(fndefs), ptrn: var_ptrn(name: var(fd2)))
                ]
              )
            )
          )
        ]
      ),
      res_type: type_ref(type_symbol(tautology))
    ),
    syn_fn_def(
      name: fn_symbol(fndef_is_wf),
      params: [
        (type: type_ref(type_symbol(fndef)), var: var(fndef)),
        (
          type: set_type(nonempty: false, elem_type: type_ref(type_symbol(fndef))),
          var: var(fndefs)
        )
      ],
      local_fns: [],
      expr: do_expr(
        [
          assignment_stmt(
            value: fn_call(
              name: op_symbol(amp),
              params: [
                select_expr(
                  type: type_ref(type_symbol(typevar)),
                  src_expr: accessor(expr: const_or_var(fndef), field: object(params))
                ),
                select_expr(
                  type: type_ref(type_symbol(typevar)),
                  src_expr: accessor(expr: const_or_var(fndef), field: object(named_params))
                )
              ],
              named_params: []
            ),
            var: var(tvars)
          ),
          for_stmt(
            body: [
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: and(
                      left: accessor_test(expr: const_or_var(p), field: object(type)),
                      right: not(
                        fn_call(
                          name: fn_symbol(type_is_wf),
                          params: [
                            accessor(expr: const_or_var(p), field: object(type)),
                            const_or_var(tvars)
                          ],
                          named_params: []
                        )
                      )
                    ),
                    body: [return_stmt(object(false))]
                  )
                ]
              )
            ],
            loops: [
              seq_iter(
                var: var(p),
                values: accessor(expr: const_or_var(fndef), field: object(params))
              )
            ]
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: and(
                  left: accessor_test(expr: const_or_var(fndef), field: object(res_type)),
                  right: not(
                    fn_call(
                      name: fn_symbol(type_is_wf),
                      params: [
                        accessor(expr: const_or_var(fndef), field: object(res_type)),
                        const_or_var(tvars)
                      ],
                      named_params: []
                    )
                  )
                ),
                body: [return_stmt(object(false))]
              )
            ]
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: fn_call(
                  name: fn_symbol(has_duplicates),
                  params: [
                    fn_call(
                      name: op_symbol(amp),
                      params: [
                        seq_comp(
                          var: var(p),
                          expr: accessor(expr: const_or_var(p), field: object(var)),
                          src_expr: accessor(expr: const_or_var(fndef), field: object(params)),
                          sel_expr: accessor_test(expr: const_or_var(p), field: object(var))
                        ),
                        fn_call(
                          name: fn_symbol(rand_sort),
                          params: [
                            set_comp(
                              sel_exprs: [],
                              source: [
                                map_in_clause(
                                  src: accessor(expr: const_or_var(fndef), field: object(named_params)),
                                  value_ptrn: type_ptrn(type_any),
                                  key_ptrn: var_ptrn(name: var(v))
                                )
                              ],
                              expr: const_or_var(v)
                            )
                          ],
                          named_params: []
                        )
                      ],
                      named_params: []
                    )
                  ],
                  named_params: []
                ),
                body: [return_stmt(object(false))]
              )
            ]
          ),
          return_stmt(
            fn_call(
              name: fn_symbol(expr_is_wf),
              params: [
                accessor(expr: const_or_var(fndef), field: object(expr)),
                fn_call(
                  name: fn_symbol(scalar_vars),
                  params: [const_or_var(fndef)],
                  named_params: []
                )
              ],
              named_params: [
                syn_fn_def(
                  name: fn_symbol(type_vars),
                  params: [],
                  local_fns: [],
                  expr: const_or_var(tvars)
                ),
                syn_fn_def(
                  name: fn_symbol(fns_in_scope),
                  params: [],
                  local_fns: [],
                  expr: const_or_var(fndefs)
                ),
                syn_fn_def(
                  name: fn_symbol(cls_vars),
                  params: [],
                  local_fns: [],
                  expr: fn_call(
                    name: fn_symbol(cls_vars),
                    params: [const_or_var(fndef)],
                    named_params: []
                  )
                )
              ]
            )
          )
        ]
      ),
      res_type: type_ref(type_symbol(tautology))
    )
  ],
  signatures: [
    syn_sgn(
      name: fn_symbol(typedefs),
      params: [],
      res_type: map_type(
        value_type: type_ref(type_symbol(type)),
        key_type: type_ref(type_symbol(typesymbol))
      )
    )
  ]
)
