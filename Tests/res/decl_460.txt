syn_fn_def(
  name: fn_symbol(types_are_wf),
  params: [
    (
      type: map_type(
        value_type: type_ref(type_symbol(type)),
        key_type: type_ref(type_symbol(typesymbol))
      ),
      var: var(typedefs)
    )
  ],
  local_fns: [
    syn_fn_def(
      name: fn_symbol(top_level_refs),
      params: [(type: type_ref(type_symbol(type)), var: var(type))],
      local_fns: [],
      expr: match_expr(
        cases: [
          case(
            expr: set_expr({const_or_var(s)}),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(s)),
                tag: obj_ptrn(object(type_ref))
              )
            ]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(union),
              params: [
                set_comp(
                  sel_exprs: [],
                  source: [
                    in_clause(src: const_or_var(ts), ptrn: var_ptrn(name: var(t)))
                  ],
                  expr: fn_call(
                    name: fn_symbol(top_level_refs),
                    params: [const_or_var(t)],
                    named_params: []
                  )
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(ts)),
                tag: obj_ptrn(object(union_type))
              )
            ]
          ),
          case(expr: set_expr({}), patterns: [type_ptrn(type_any)])
        ],
        exprs: [fn_par(0)]
      ),
      res_type: set_type(
        nonempty: false,
        elem_type: type_ref(type_symbol(typesymbol))
      )
    )
  ],
  expr: do_expr(
    [
      assignment_stmt(
        value: map_comp(
          sel_exprs: [],
          source: [
            map_in_clause(
              src: const_or_var(typedefs),
              value_ptrn: var_ptrn(name: var(t)),
              key_ptrn: var_ptrn(name: var(s))
            )
          ],
          value_expr: fn_call(
            name: fn_symbol(top_level_refs),
            params: [const_or_var(t)],
            named_params: []
          ),
          key_expr: const_or_var(s)
        ),
        var: var(tl_ref_map)
      ),
      assignment_stmt(
        value: fn_call(
          name: fn_symbol(transitive_closure),
          params: [const_or_var(tl_ref_map)],
          named_params: []
        ),
        var: var(tl_ref_deep_map)
      ),
      if_stmt(
        else: [],
        branches: [
          (
            cond: ex_qual(
              sel_exprs: [
                fn_call(
                  name: fn_symbol(in),
                  params: [const_or_var(s), const_or_var(es)],
                  named_params: []
                )
              ],
              source: [
                map_in_clause(
                  src: const_or_var(tl_ref_deep_map),
                  value_ptrn: var_ptrn(name: var(es)),
                  key_ptrn: var_ptrn(name: var(s))
                )
              ]
            ),
            body: [return_stmt(object(false))]
          )
        ]
      ),
      return_stmt(
        not(
          ex_qual(
            sel_exprs: [
              not(
                fn_call(
                  name: fn_symbol(type_is_wf),
                  params: [
                    const_or_var(t),
                    select_expr(
                      type: type_ref(type_symbol(typevar)),
                      src_expr: const_or_var(s)
                    )
                  ],
                  named_params: [
                    syn_fn_def(
                      name: fn_symbol(typedefs),
                      params: [],
                      local_fns: [],
                      expr: const_or_var(typedefs)
                    )
                  ]
                )
              )
            ],
            source: [
              map_in_clause(
                src: const_or_var(typedefs),
                value_ptrn: var_ptrn(name: var(t)),
                key_ptrn: var_ptrn(name: var(s))
              )
            ]
          )
        )
      )
    ]
  ),
  res_type: type_ref(type_symbol(tautology))
)
