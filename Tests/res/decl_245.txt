using_block(
  fn_defs: [
    syn_fn_def(
      name: fn_symbol(partitions),
      params: [(type: type_ref(type_symbol(type)), var: var(type))],
      local_fns: [],
      expr: match_expr(
        cases: [
          case(
            expr: const_or_var(all_objects),
            patterns: [obj_ptrn(object(type_any))]
          ),
          case(
            expr: set_expr({object(symbols)}),
            patterns: [obj_ptrn(object(atom_type))]
          ),
          case(
            expr: set_expr(
              {
                fn_call(
                  name: fn_symbol(partition),
                  params: [const_or_var(s)],
                  named_params: []
                )
              }
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(s)),
                tag: obj_ptrn(object(symb_type))
              )
            ]
          ),
          case(
            expr: set_expr({object(integers)}),
            patterns: [type_ptrn(type_ref(type_symbol(inttype)))]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(partitions),
              params: [
                fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(typedefs), const_or_var(ts)],
                  named_params: []
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(ts)),
                tag: obj_ptrn(object(type_ref))
              )
            ]
          ),
          case(
            expr: const_or_var(all_objects),
            patterns: [type_ptrn(type_ref(type_symbol(typevar)))]
          ),
          case(
            expr: set_expr({object(sets)}),
            patterns: [type_ptrn(type_ref(type_symbol(settype)))]
          ),
          case(
            expr: set_expr({object(sequences)}),
            patterns: [type_ptrn(type_ref(type_symbol(seqtype)))]
          ),
          case(
            expr: set_expr({object(maps)}),
            patterns: [type_ptrn(type_ref(type_symbol(maptype)))]
          ),
          case(
            expr: set_expr({object(maps)}),
            patterns: [type_ptrn(type_ref(type_symbol(tupletype)))]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(merge_partitions),
              params: [
                set_comp(
                  sel_exprs: [],
                  source: [
                    in_clause(src: const_or_var(ts), ptrn: var_ptrn(name: var(t)))
                  ],
                  expr: fn_call(
                    name: fn_symbol(partitions),
                    params: [const_or_var(t)],
                    named_params: []
                  )
                )
              ],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(ts)),
                tag: obj_ptrn(object(union_type))
              )
            ]
          ),
          case(
            expr: do_expr(
              [
                assert_stmt(
                  membership(
                    type: type_ref(type_symbol(symbtype)),
                    obj: accessor(expr: const_or_var(type), field: object(tag_type))
                  )
                ),
                return_stmt(
                  set_expr(
                    {
                      tag_obj_expr(
                        obj: fn_call(
                          name: fn_symbol(untag),
                          params: [
                            fn_call(
                              name: fn_symbol(untag),
                              params: [
                                accessor(expr: const_or_var(type), field: object(tag_type))
                              ],
                              named_params: []
                            )
                          ],
                          named_params: []
                        ),
                        tag: object(tagged_obj)
                      )
                    }
                  )
                )
              ]
            ),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(tag_type)))
            ]
          )
        ],
        exprs: [fn_par(0)]
      ),
      res_type: type_ref(type_symbol(objpartset))
    ),
    syn_fn_def(
      name: fn_symbol(partitions),
      params: [(type: type_ref(type_symbol(pattern)), var: var(ptrn))],
      local_fns: [],
      expr: match_expr(
        cases: [
          case(
            expr: set_expr(
              {
                fn_call(
                  name: fn_symbol(partition),
                  params: [const_or_var(obj)],
                  named_params: []
                )
              }
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(obj)),
                tag: obj_ptrn(object(obj_ptrn))
              )
            ]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(partitions),
              params: [const_or_var(type)],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: var_ptrn(name: var(type)),
                tag: obj_ptrn(object(type_ptrn))
              )
            ]
          ),
          case(
            expr: const_or_var(all_objects),
            patterns: [
              tag_ptrn(
                obj: type_ptrn(type_any),
                tag: obj_ptrn(object(ext_var_ptrn))
              )
            ]
          ),
          case(
            expr: fn_call(
              name: fn_symbol(partitions),
              params: [accessor(expr: const_or_var(ptrn), field: object(ptrn))],
              named_params: []
            ),
            patterns: [
              tag_ptrn(
                obj: tuple_ptrn(
                  fields: {(label: object(ptrn), ptrn: var_ptrn(name: var(p)))},
                  is_open: true
                ),
                tag: obj_ptrn(object(var_ptrn))
              )
            ]
          ),
          case(
            expr: const_or_var(all_objects),
            patterns: [
              tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(var_ptrn)))
            ]
          ),
          case(
            expr: set_expr({object(maps)}),
            patterns: [
              tag_ptrn(
                obj: type_ptrn(type_any),
                tag: obj_ptrn(object(tuple_ptrn))
              )
            ]
          ),
          case(
            expr: set_expr(
              {
                tag_obj_expr(obj: const_or_var(a), tag: object(tagged_obj))
              }
            ),
            patterns: [
              tag_ptrn(
                obj: tuple_ptrn(
                  fields: {
                    (
                      label: object(tag),
                      ptrn: tag_ptrn(
                        obj: tag_ptrn(obj: var_ptrn(name: var(a)), tag: obj_ptrn(object(object))),
                        tag: obj_ptrn(object(obj_ptrn))
                      )
                    )
                  },
                  is_open: true
                ),
                tag: obj_ptrn(object(tag_ptrn))
              )
            ]
          ),
          case(
            expr: set_expr({object(tagged_objs)}),
            patterns: [
              tag_ptrn(
                obj: tuple_ptrn(
                  fields: {
                    (
                      label: object(tag),
                      ptrn: tag_ptrn(
                        obj: tuple_ptrn(
                          fields: {(label: object(name), ptrn: var_ptrn(name: var(v)))},
                          is_open: false
                        ),
                        tag: obj_ptrn(object(var_ptrn))
                      )
                    )
                  },
                  is_open: true
                ),
                tag: obj_ptrn(object(tag_ptrn))
              )
            ]
          )
        ],
        exprs: [fn_par(0)]
      ),
      res_type: type_ref(type_symbol(objpartset))
    )
  ],
  signatures: [
    syn_sgn(
      name: fn_symbol(typedefs),
      params: [],
      res_type: map_type(
        value_type: type_ref(type_symbol(type)),
        key_type: type_ref(type_symbol(typesymbol))
      )
    )
  ]
)
