syn_fn_def(
  name: fn_symbol(to_str),
  params: [(type: type_ref(type_symbol(int)), var: var(n))],
  local_fns: [],
  expr: do_expr(
    [
      assignment_stmt(value: const_or_var(n), var: var(m)),
      assignment_stmt(value: object(false), var: var(neg)),
      if_stmt(
        else: [],
        branches: [
          (
            cond: fn_call(
              name: op_symbol(lower),
              params: [const_or_var(m), object(0)],
              named_params: []
            ),
            body: [
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(minus),
                  params: [const_or_var(m)],
                  named_params: []
                ),
                var: var(m)
              ),
              assignment_stmt(value: object(true), var: var(neg))
            ]
          )
        ]
      ),
      assert_stmt(
        fn_call(
          name: op_symbol(greater_eq),
          params: [const_or_var(m), object(0)],
          named_params: []
        )
      ),
      assignment_stmt(value: object(10), var: var(div)),
      assignment_stmt(value: seq_expr(head: [object(1)]), var: var(divs)),
      loop_stmt(
        cond: fn_call(
          name: op_symbol(lower_eq),
          params: [const_or_var(div), const_or_var(m)],
          named_params: []
        ),
        body: [
          assignment_stmt(
            value: seq_expr(head: [const_or_var(div)], tail: const_or_var(divs)),
            var: var(divs)
          ),
          assignment_stmt(
            value: fn_call(
              name: op_symbol(star),
              params: [object(10), const_or_var(div)],
              named_params: []
            ),
            var: var(div)
          )
        ],
        skip_first: false
      ),
      assignment_stmt(
        value: tag_obj_expr(obj: seq_expr(head: []), tag: object(string)),
        var: var(str)
      ),
      for_stmt(
        body: [
          assignment_stmt(value: object(0), var: var(count)),
          loop_stmt(
            cond: fn_call(
              name: op_symbol(greater_eq),
              params: [const_or_var(m), const_or_var(d)],
              named_params: []
            ),
            body: [
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(minus),
                  params: [const_or_var(m), const_or_var(d)],
                  named_params: []
                ),
                var: var(m)
              ),
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(plus),
                  params: [const_or_var(count), object(1)],
                  named_params: []
                ),
                var: var(count)
              )
            ],
            skip_first: false
          ),
          assignment_stmt(
            value: fn_call(
              name: op_symbol(amp),
              params: [
                const_or_var(str),
                fn_call(
                  name: fn_symbol(string),
                  params: [
                    seq_expr(
                      head: [
                        fn_call(
                          name: op_symbol(plus),
                          params: [object(48), const_or_var(count)],
                          named_params: []
                        )
                      ]
                    )
                  ],
                  named_params: []
                )
              ],
              named_params: []
            ),
            var: var(str)
          )
        ],
        loops: [seq_iter(var: var(d), values: const_or_var(divs))]
      ),
      return_stmt(
        if_expr(
          else: const_or_var(str),
          branches: [
            (
              expr: fn_call(
                name: op_symbol(amp),
                params: [
                  tag_obj_expr(obj: seq_expr(head: [object(45)]), tag: object(string)),
                  const_or_var(str)
                ],
                named_params: []
              ),
              cond: const_or_var(neg)
            )
          ]
        )
      )
    ]
  ),
  res_type: type_ref(type_symbol(string))
)
