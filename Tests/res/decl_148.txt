syn_fn_def(
  name: fn_symbol(parse_obj),
  params: [
    (
      type: seq_type(nonempty: false, elem_type: type_ref(type_symbol(token))),
      var: var(tokens)
    )
  ],
  local_fns: [
    syn_fn_def(
      name: fn_symbol(error),
      params: [(var: var(token))],
      local_fns: [],
      expr: tag_obj_expr(
        obj: map_expr({(value: const_or_var(token), key: object(token))}),
        tag: object(parser_error)
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_obj),
      params: [(var: var(tokens)), (var: var(offset))],
      local_fns: [],
      expr: do_expr(
        [
          assert_stmt(
            fn_call(
              name: op_symbol(lower),
              params: [
                const_or_var(offset),
                fn_call(
                  name: fn_symbol(length),
                  params: [const_or_var(tokens)],
                  named_params: []
                )
              ],
              named_params: []
            )
          ),
          assignment_stmt(
            value: match_expr(
              cases: [
                case(
                  expr: fn_call(
                    name: fn_symbol(parse_tagged_obj_or_symbol),
                    params: [const_or_var(tokens), const_or_var(offset)],
                    named_params: []
                  ),
                  patterns: [
                    tag_ptrn(obj: type_ptrn(type_any), tag: obj_ptrn(object(symbol)))
                  ]
                ),
                case(
                  expr: map_expr(
                    {
                      (value: const_or_var(obj), key: object(obj)),
                      (
                        value: fn_call(
                          name: op_symbol(plus),
                          params: [const_or_var(offset), object(1)],
                          named_params: []
                        ),
                        key: object(offset)
                      )
                    }
                  ),
                  patterns: [
                    var_ptrn(
                      name: var(obj),
                      ptrn: type_ptrn(
                        union_type(
                          {
                            type_ref(type_symbol(string)),
                            type_ref(type_symbol(int)),
                            type_ref(type_symbol(char))
                          }
                        )
                      )
                    )
                  ]
                ),
                case(
                  expr: fn_call(
                    name: fn_symbol(parse_set),
                    params: [const_or_var(tokens), const_or_var(offset)],
                    named_params: []
                  ),
                  patterns: [
                    tag_ptrn(obj: obj_ptrn(object(brace)), tag: obj_ptrn(object(left)))
                  ]
                ),
                case(
                  expr: fn_call(
                    name: fn_symbol(parse_map_or_tuple),
                    params: [const_or_var(tokens), const_or_var(offset)],
                    named_params: []
                  ),
                  patterns: [
                    tag_ptrn(
                      obj: obj_ptrn(object(parenthesis)),
                      tag: obj_ptrn(object(left))
                    )
                  ]
                ),
                case(
                  expr: fn_call(
                    name: fn_symbol(parse_seq),
                    params: [const_or_var(tokens), const_or_var(offset)],
                    named_params: []
                  ),
                  patterns: [
                    tag_ptrn(
                      obj: obj_ptrn(object(bracket)),
                      tag: obj_ptrn(object(left))
                    )
                  ]
                ),
                case(
                  expr: fn_call(
                    name: fn_symbol(error),
                    params: [const_or_var(offset)],
                    named_params: []
                  ),
                  patterns: [type_ptrn(type_any)]
                )
              ],
              exprs: [
                fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(tokens), const_or_var(offset)],
                  named_params: []
                )
              ]
            ),
            var: var(res)
          ),
          return_stmt(const_or_var(res))
        ]
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_tagged_obj_or_symbol),
      params: [(var: var(tokens)), (var: var(offset))],
      local_fns: [],
      expr: do_expr(
        [
          assert_stmt(
            and(
              left: fn_call(
                name: op_symbol(lower),
                params: [
                  const_or_var(offset),
                  fn_call(
                    name: fn_symbol(length),
                    params: [const_or_var(tokens)],
                    named_params: []
                  )
                ],
                named_params: []
              ),
              right: membership(
                type: union_type(
                  {
                    tag_type(
                      obj_type: type_ref(type_symbol(atom)),
                      tag_type: symb_type(object(symbol))
                    )
                  }
                ),
                obj: fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(tokens), const_or_var(offset)],
                  named_params: []
                )
              )
            )
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: neq(
                  left: fn_call(
                    name: fn_symbol(at),
                    params: [
                      const_or_var(tokens),
                      fn_call(
                        name: op_symbol(plus),
                        params: [const_or_var(offset), object(1)],
                        named_params: []
                      ),
                      object(nil)
                    ],
                    named_params: []
                  ),
                  right: const_or_var(left_parenthesis)
                ),
                body: [
                  return_stmt(
                    map_expr(
                      {
                        (
                          value: fn_call(
                            name: op_symbol(plus),
                            params: [const_or_var(offset), object(1)],
                            named_params: []
                          ),
                          key: object(offset)
                        ),
                        (
                          value: fn_call(
                            name: fn_symbol(untag),
                            params: [
                              fn_call(
                                name: op_symbol(brackets),
                                params: [const_or_var(tokens), const_or_var(offset)],
                                named_params: []
                              )
                            ],
                            named_params: []
                          ),
                          key: object(obj)
                        )
                      }
                    )
                  )
                ]
              )
            ]
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(parse_map_or_tuple),
              params: [
                const_or_var(tokens),
                fn_call(
                  name: op_symbol(plus),
                  params: [const_or_var(offset), object(1)],
                  named_params: []
                )
              ],
              named_params: []
            ),
            var: var(res)
          ),
          assignment_stmt(
            value: not(
              membership(
                type: type_ref(type_symbol(parseerror)),
                obj: const_or_var(res)
              )
            ),
            var: var(is_tuple)
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: not(const_or_var(is_tuple)),
                body: [
                  assignment_stmt(
                    value: fn_call(
                      name: fn_symbol(parse_obj),
                      params: [
                        const_or_var(tokens),
                        fn_call(
                          name: op_symbol(plus),
                          params: [const_or_var(offset), object(2)],
                          named_params: []
                        )
                      ],
                      named_params: []
                    ),
                    var: var(res)
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: membership(
                          type: type_ref(type_symbol(parseerror)),
                          obj: const_or_var(res)
                        ),
                        body: [return_stmt(const_or_var(res))]
                      )
                    ]
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: neq(
                          left: fn_call(
                            name: fn_symbol(at),
                            params: [
                              const_or_var(tokens),
                              accessor(expr: const_or_var(res), field: object(offset)),
                              object(nil)
                            ],
                            named_params: []
                          ),
                          right: const_or_var(right_parenthesis)
                        ),
                        body: [
                          return_stmt(
                            fn_call(
                              name: fn_symbol(error),
                              params: [accessor(expr: const_or_var(res), field: object(offset))],
                              named_params: []
                            )
                          )
                        ]
                      )
                    ]
                  )
                ]
              )
            ]
          ),
          assignment_stmt(
            value: tag_obj_expr(
              obj: accessor(expr: const_or_var(res), field: object(obj)),
              tag: fn_call(
                name: fn_symbol(untag),
                params: [
                  fn_call(
                    name: op_symbol(brackets),
                    params: [const_or_var(tokens), const_or_var(offset)],
                    named_params: []
                  )
                ],
                named_params: []
              )
            ),
            var: var(obj)
          ),
          return_stmt(
            map_expr(
              {
                (value: const_or_var(obj), key: object(obj)),
                (
                  value: fn_call(
                    name: op_symbol(plus),
                    params: [
                      accessor(expr: const_or_var(res), field: object(offset)),
                      if_expr(
                        else: object(1),
                        branches: [(expr: object(0), cond: const_or_var(is_tuple))]
                      )
                    ],
                    named_params: []
                  ),
                  key: object(offset)
                )
              }
            )
          )
        ]
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_set),
      params: [(var: var(tokens)), (var: var(offset))],
      local_fns: [],
      expr: do_expr(
        [
          assert_stmt(
            and(
              left: fn_call(
                name: op_symbol(lower),
                params: [
                  const_or_var(offset),
                  fn_call(
                    name: fn_symbol(length),
                    params: [const_or_var(tokens)],
                    named_params: []
                  )
                ],
                named_params: []
              ),
              right: eq(
                left: fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(tokens), const_or_var(offset)],
                  named_params: []
                ),
                right: const_or_var(left_brace)
              )
            )
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(parse_objs),
              params: [
                const_or_var(tokens),
                fn_call(
                  name: op_symbol(plus),
                  params: [const_or_var(offset), object(1)],
                  named_params: []
                ),
                const_or_var(right_brace)
              ],
              named_params: []
            ),
            var: var(res)
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: membership(
                  type: type_ref(type_symbol(parseerror)),
                  obj: const_or_var(res)
                ),
                body: [return_stmt(const_or_var(res))]
              )
            ]
          ),
          return_stmt(
            map_expr(
              {
                (
                  value: accessor(expr: const_or_var(res), field: object(offset)),
                  key: object(offset)
                ),
                (
                  value: fn_call(
                    name: fn_symbol(set),
                    params: [accessor(expr: const_or_var(res), field: object(objs))],
                    named_params: []
                  ),
                  key: object(obj)
                )
              }
            )
          )
        ]
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_seq),
      params: [(var: var(tokens)), (var: var(offset))],
      local_fns: [],
      expr: do_expr(
        [
          assert_stmt(
            fn_call(
              name: op_symbol(lower),
              params: [
                const_or_var(offset),
                fn_call(
                  name: fn_symbol(length),
                  params: [const_or_var(tokens)],
                  named_params: []
                )
              ],
              named_params: []
            )
          ),
          assert_stmt(
            eq(
              left: fn_call(
                name: op_symbol(brackets),
                params: [const_or_var(tokens), const_or_var(offset)],
                named_params: []
              ),
              right: const_or_var(left_bracket)
            )
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(parse_objs),
              params: [
                const_or_var(tokens),
                fn_call(
                  name: op_symbol(plus),
                  params: [const_or_var(offset), object(1)],
                  named_params: []
                ),
                const_or_var(right_bracket)
              ],
              named_params: []
            ),
            var: var(res)
          ),
          if_stmt(
            else: [],
            branches: [
              (
                cond: membership(
                  type: type_ref(type_symbol(parseerror)),
                  obj: const_or_var(res)
                ),
                body: [return_stmt(const_or_var(res))]
              )
            ]
          ),
          return_stmt(
            map_expr(
              {
                (
                  value: accessor(expr: const_or_var(res), field: object(objs)),
                  key: object(obj)
                ),
                (
                  value: accessor(expr: const_or_var(res), field: object(offset)),
                  key: object(offset)
                )
              }
            )
          )
        ]
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_map_or_tuple),
      params: [(var: var(tokens)), (var: var(offset))],
      local_fns: [],
      expr: do_expr(
        [
          assert_stmt(
            and(
              left: fn_call(
                name: op_symbol(lower),
                params: [
                  const_or_var(offset),
                  fn_call(
                    name: fn_symbol(length),
                    params: [const_or_var(tokens)],
                    named_params: []
                  )
                ],
                named_params: []
              ),
              right: eq(
                left: fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(tokens), const_or_var(offset)],
                  named_params: []
                ),
                right: const_or_var(left_parenthesis)
              )
            )
          ),
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(length),
              params: [const_or_var(tokens)],
              named_params: []
            ),
            var: var(len)
          ),
          assignment_stmt(
            value: fn_call(
              name: op_symbol(plus),
              params: [const_or_var(offset), object(1)],
              named_params: []
            ),
            var: var(os)
          ),
          assignment_stmt(
            value: membership(
              type: union_type(
                {
                  tag_type(
                    obj_type: type_ref(type_symbol(atom)),
                    tag_type: symb_type(object(label))
                  )
                }
              ),
              obj: fn_call(
                name: fn_symbol(at),
                params: [const_or_var(tokens), const_or_var(os), object(nil)],
                named_params: []
              )
            ),
            var: var(is_tuple)
          ),
          assignment_stmt(value: seq_expr(head: []), var: var(keys)),
          assignment_stmt(value: seq_expr(head: []), var: var(values)),
          inf_loop_stmt(
            [
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: fn_call(
                      name: op_symbol(greater_eq),
                      params: [const_or_var(os), const_or_var(len)],
                      named_params: []
                    ),
                    body: [
                      return_stmt(
                        fn_call(
                          name: fn_symbol(error),
                          params: [const_or_var(os)],
                          named_params: []
                        )
                      )
                    ]
                  )
                ]
              ),
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(brackets),
                  params: [const_or_var(tokens), const_or_var(os)],
                  named_params: []
                ),
                var: var(head)
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: eq(
                      left: const_or_var(head),
                      right: const_or_var(right_parenthesis)
                    ),
                    body: [break_stmt]
                  )
                ]
              ),
              if_stmt(
                else: [
                  assignment_stmt(
                    value: fn_call(
                      name: fn_symbol(parse_obj),
                      params: [const_or_var(tokens), const_or_var(os)],
                      named_params: []
                    ),
                    var: var(res)
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: membership(
                          type: type_ref(type_symbol(parseerror)),
                          obj: const_or_var(res)
                        ),
                        body: [return_stmt(const_or_var(res))]
                      )
                    ]
                  ),
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: neq(
                          left: fn_call(
                            name: fn_symbol(at),
                            params: [
                              const_or_var(tokens),
                              accessor(expr: const_or_var(res), field: object(offset)),
                              object(nil)
                            ],
                            named_params: []
                          ),
                          right: object(right_arrow)
                        ),
                        body: [
                          return_stmt(
                            fn_call(
                              name: fn_symbol(error),
                              params: [accessor(expr: const_or_var(res), field: object(offset))],
                              named_params: []
                            )
                          )
                        ]
                      )
                    ]
                  ),
                  assignment_stmt(
                    value: accessor(expr: const_or_var(res), field: object(obj)),
                    var: var(key)
                  ),
                  assignment_stmt(
                    value: fn_call(
                      name: op_symbol(plus),
                      params: [
                        accessor(expr: const_or_var(res), field: object(offset)),
                        object(1)
                      ],
                      named_params: []
                    ),
                    var: var(val_os)
                  )
                ],
                branches: [
                  (
                    cond: const_or_var(is_tuple),
                    body: [
                      if_stmt(
                        else: [],
                        branches: [
                          (
                            cond: not(
                              membership(
                                type: union_type(
                                  {
                                    tag_type(
                                      obj_type: type_ref(type_symbol(atom)),
                                      tag_type: symb_type(object(label))
                                    )
                                  }
                                ),
                                obj: const_or_var(head)
                              )
                            ),
                            body: [
                              return_stmt(
                                fn_call(
                                  name: fn_symbol(error),
                                  params: [const_or_var(os)],
                                  named_params: []
                                )
                              )
                            ]
                          )
                        ]
                      ),
                      assignment_stmt(
                        value: fn_call(
                          name: fn_symbol(untag),
                          params: [const_or_var(head)],
                          named_params: []
                        ),
                        var: var(key)
                      ),
                      assignment_stmt(
                        value: fn_call(
                          name: op_symbol(plus),
                          params: [const_or_var(os), object(1)],
                          named_params: []
                        ),
                        var: var(val_os)
                      )
                    ]
                  )
                ]
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: fn_call(
                      name: fn_symbol(in),
                      params: [const_or_var(key), const_or_var(keys)],
                      named_params: []
                    ),
                    body: [
                      return_stmt(
                        fn_call(
                          name: fn_symbol(error),
                          params: [const_or_var(os)],
                          named_params: []
                        )
                      )
                    ]
                  )
                ]
              ),
              assignment_stmt(
                value: fn_call(
                  name: fn_symbol(parse_obj),
                  params: [const_or_var(tokens), const_or_var(val_os)],
                  named_params: []
                ),
                var: var(res)
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: membership(
                      type: type_ref(type_symbol(parseerror)),
                      obj: const_or_var(res)
                    ),
                    body: [return_stmt(const_or_var(res))]
                  )
                ]
              ),
              assignment_stmt(
                value: seq_expr(head: [const_or_var(key)], tail: const_or_var(keys)),
                var: var(keys)
              ),
              assignment_stmt(
                value: seq_expr(
                  head: [accessor(expr: const_or_var(res), field: object(obj))],
                  tail: const_or_var(values)
                ),
                var: var(values)
              ),
              assignment_stmt(
                value: accessor(expr: const_or_var(res), field: object(offset)),
                var: var(os)
              ),
              assignment_stmt(
                value: fn_call(
                  name: fn_symbol(at),
                  params: [const_or_var(tokens), const_or_var(os), object(nil)],
                  named_params: []
                ),
                var: var(head)
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: eq(left: const_or_var(head), right: object(comma)),
                    body: [
                      assignment_stmt(
                        value: fn_call(
                          name: op_symbol(plus),
                          params: [const_or_var(os), object(1)],
                          named_params: []
                        ),
                        var: var(os)
                      )
                    ]
                  ),
                  (
                    cond: neq(
                      left: const_or_var(head),
                      right: const_or_var(right_parenthesis)
                    ),
                    body: [
                      return_stmt(
                        fn_call(
                          name: fn_symbol(error),
                          params: [const_or_var(os)],
                          named_params: []
                        )
                      )
                    ]
                  )
                ]
              )
            ]
          ),
          assignment_stmt(
            value: map_comp(
              sel_exprs: [],
              source: [
                in_clause(
                  src: fn_call(
                    name: fn_symbol(set),
                    params: [const_or_var(keys)],
                    named_params: []
                  ),
                  ptrn: var_ptrn(name: var(k))
                )
              ],
              value_expr: fn_call(
                name: op_symbol(brackets),
                params: [
                  const_or_var(values),
                  fn_call(
                    name: fn_symbol(index_first),
                    params: [const_or_var(k), const_or_var(keys)],
                    named_params: []
                  )
                ],
                named_params: []
              ),
              key_expr: const_or_var(k)
            ),
            var: var(obj)
          ),
          return_stmt(
            map_expr(
              {
                (value: const_or_var(obj), key: object(obj)),
                (
                  value: fn_call(
                    name: op_symbol(plus),
                    params: [const_or_var(os), object(1)],
                    named_params: []
                  ),
                  key: object(offset)
                )
              }
            )
          )
        ]
      )
    ),
    syn_fn_def(
      name: fn_symbol(parse_objs),
      params: [(var: var(tokens)), (var: var(offset)), (var: var(eof))],
      local_fns: [],
      expr: do_expr(
        [
          assignment_stmt(
            value: fn_call(
              name: fn_symbol(length),
              params: [const_or_var(tokens)],
              named_params: []
            ),
            var: var(len)
          ),
          assignment_stmt(value: const_or_var(offset), var: var(os)),
          assignment_stmt(value: seq_expr(head: []), var: var(objs)),
          inf_loop_stmt(
            [
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: eq(
                      left: fn_call(
                        name: fn_symbol(at),
                        params: [const_or_var(tokens), const_or_var(os), object(nil)],
                        named_params: []
                      ),
                      right: const_or_var(eof)
                    ),
                    body: [break_stmt]
                  )
                ]
              ),
              assignment_stmt(
                value: fn_call(
                  name: fn_symbol(parse_obj),
                  params: [const_or_var(tokens), const_or_var(os)],
                  named_params: []
                ),
                var: var(res)
              ),
              if_stmt(
                else: [],
                branches: [
                  (
                    cond: membership(
                      type: type_ref(type_symbol(parseerror)),
                      obj: const_or_var(res)
                    ),
                    body: [return_stmt(const_or_var(res))]
                  )
                ]
              ),
              assignment_stmt(
                value: fn_call(
                  name: op_symbol(amp),
                  params: [
                    const_or_var(objs),
                    seq_expr(
                      head: [accessor(expr: const_or_var(res), field: object(obj))]
                    )
                  ],
                  named_params: []
                ),
                var: var(objs)
              ),
              assignment_stmt(
                value: accessor(expr: const_or_var(res), field: object(offset)),
                var: var(os)
              ),
              assignment_stmt(
                value: fn_call(
                  name: fn_symbol(at),
                  params: [const_or_var(tokens), const_or_var(os), object(nil)],
                  named_params: []
                ),
                var: var(head)
              ),
              if_stmt(
                else: [
                  if_stmt(
                    else: [],
                    branches: [
                      (
                        cond: neq(left: const_or_var(head), right: const_or_var(eof)),
                        body: [
                          return_stmt(
                            fn_call(
                              name: fn_symbol(error),
                              params: [const_or_var(os)],
                              named_params: []
                            )
                          )
                        ]
                      )
                    ]
                  )
                ],
                branches: [
                  (
                    cond: eq(left: const_or_var(head), right: object(comma)),
                    body: [
                      assignment_stmt(
                        value: fn_call(
                          name: op_symbol(plus),
                          params: [const_or_var(os), object(1)],
                          named_params: []
                        ),
                        var: var(os)
                      )
                    ]
                  )
                ]
              )
            ]
          ),
          return_stmt(
            map_expr(
              {
                (value: const_or_var(objs), key: object(objs)),
                (
                  value: fn_call(
                    name: op_symbol(plus),
                    params: [const_or_var(os), object(1)],
                    named_params: []
                  ),
                  key: object(offset)
                )
              }
            )
          )
        ]
      )
    )
  ],
  expr: do_expr(
    [
      if_stmt(
        else: [],
        branches: [
          (
            cond: eq(left: const_or_var(tokens), right: seq_expr(head: [])),
            body: [
              return_stmt(
                fn_call(
                  name: fn_symbol(error),
                  params: [object(0)],
                  named_params: []
                )
              )
            ]
          )
        ]
      ),
      assignment_stmt(
        value: fn_call(
          name: fn_symbol(parse_obj),
          params: [const_or_var(tokens), object(0)],
          named_params: []
        ),
        var: var(res)
      ),
      if_stmt(
        else: [],
        branches: [
          (
            cond: membership(
              type: type_ref(type_symbol(parseerror)),
              obj: const_or_var(res)
            ),
            body: [return_stmt(const_or_var(res))]
          )
        ]
      ),
      if_stmt(
        else: [],
        branches: [
          (
            cond: neq(
              left: accessor(expr: const_or_var(res), field: object(offset)),
              right: fn_call(
                name: fn_symbol(length),
                params: [const_or_var(tokens)],
                named_params: []
              )
            ),
            body: [
              return_stmt(
                fn_call(
                  name: fn_symbol(error),
                  params: [accessor(expr: const_or_var(res), field: object(offset))],
                  named_params: []
                )
              )
            ]
          )
        ]
      ),
      return_stmt(
        tag_obj_expr(
          obj: accessor(expr: const_or_var(res), field: object(obj)),
          tag: object(obj)
        )
      )
    ]
  ),
  res_type: type_ref(type_symbol(parseresult))
)
