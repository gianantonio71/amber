#include "lib.h"



namespace generated
{
  const Obj S_x = 17;
  const Obj S_y = 33;
  const Obj S_at = 49;
  const Obj S_eq = 65;
  const Obj S_id = 81;
  const Obj S_or = 97;
  const Obj S_add = 113;
  const Obj S_amp = 129;
  const Obj S_and = 145;
  const Obj S_cat = 161;
  const Obj S_cls = 177;
  const Obj S_col = 193;
  const Obj S_den = 209;
  const Obj S_env = 225;
  const Obj S_exp = 241;
  const Obj S_idx = 257;
  const Obj S_key = 273;
  const Obj S_len = 289;
  const Obj S_map = 305;
  const Obj S_max = 321;
  const Obj S_min = 337;
  const Obj S_neg = 353;
  const Obj S_neq = 369;
  const Obj S_nil = 385;
  const Obj S_not = 401;
  const Obj S_num = 417;
  const Obj S_obj = 433;
  const Obj S_prg = 449;
  const Obj S_rat = 465;
  const Obj S_rev = 481;
  const Obj S_seq = 497;
  const Obj S_set = 513;
  const Obj S_src = 529;
  const Obj S_str = 545;
  const Obj S_tag = 561;
  const Obj S_val = 577;
  const Obj S_var = 593;
  const Obj S_body = 609;
  const Obj S_bvar = 625;
  const Obj S_case = 641;
  const Obj S_char = 657;
  const Obj S_code = 673;
  const Obj S_cond = 689;
  const Obj S_else = 705;
  const Obj S_errs = 721;
  const Obj S_eval = 737;
  const Obj S_evar = 753;
  const Obj S_expr = 769;
  const Obj S_head = 785;
  const Obj S_idiv = 801;
  const Obj S_ivar = 817;
  const Obj S_keys = 833;
  const Obj S_leaf = 849;
  const Obj S_left = 865;
  const Obj S_line = 881;
  const Obj S_list = 897;
  const Obj S_lvar = 913;
  const Obj S_map1 = 929;
  const Obj S_map2 = 945;
  const Obj S_maps = 961;
  const Obj S_mset = 977;
  const Obj S_mult = 993;
  const Obj S_name = 1009;
  const Obj S_objs = 1025;
  const Obj S_plus = 1041;
  const Obj S_ptrn = 1057;
  const Obj S_sets = 1073;
  const Obj S_size = 1089;
  const Obj S_star = 1105;
  const Obj S_svar = 1121;
  const Obj S_symb = 1137;
  const Obj S_tail = 1153;
  const Obj S_then = 1169;
  const Obj S_true = 1185;
  const Obj S_type = 1201;
  const Obj S_val1 = 1217;
  const Obj S_val2 = 1233;
  const Obj S_vals = 1249;
  const Obj S_vvar = 1265;
  const Obj S_arity = 1281;
  const Obj S_brace = 1297;
  const Obj S_cases = 1313;
  const Obj S_comma = 1329;
  const Obj S_elems = 1345;
  const Obj S_expr1 = 1361;
  const Obj S_expr2 = 1377;
  const Obj S_exprs = 1393;
  const Obj S_false = 1409;
  const Obj S_field = 1425;
  const Obj S_inner = 1441;
  const Obj S_is_eq = 1457;
  const Obj S_is_ge = 1473;
  const Obj S_is_gt = 1489;
  const Obj S_is_le = 1505;
  const Obj S_is_lt = 1521;
  const Obj S_isort = 1537;
  const Obj S_label = 1553;
  const Obj S_loops = 1569;
  const Obj S_lower = 1585;
  const Obj S_minus = 1601;
  const Obj S_no_op = 1617;
  const Obj S_outer = 1633;
  const Obj S_point = 1649;
  const Obj S_ptrns = 1665;
  const Obj S_right = 1681;
  const Obj S_slash = 1697;
  const Obj S_slice = 1713;
  const Obj S_stmts = 1729;
  const Obj S_tdefs = 1745;
  const Obj S_token = 1761;
  const Obj S_value = 1777;
  const Obj S_action = 1793;
  const Obj S_append = 1809;
  const Obj S_asgnms = 1825;
  const Obj S_branch = 1841;
  const Obj S_clause = 1857;
  const Obj S_fields = 1873;
  const Obj S_fn_def = 1889;
  const Obj S_fn_par = 1905;
  const Obj S_fndefs = 1921;
  const Obj S_get_at = 1937;
  const Obj S_header = 1953;
  const Obj S_instrs = 1969;
  const Obj S_is_int = 1985;
  const Obj S_lookup = 2001;
  const Obj S_mk_map = 2017;
  const Obj S_mk_seq = 2033;
  const Obj S_mk_set = 2049;
  const Obj S_object = 2065;
  const Obj S_offset = 2081;
  const Obj S_params = 2097;
  const Obj S_repeat = 2113;
  const Obj S_set_at = 2129;
  const Obj S_source = 2145;
  const Obj S_stream = 2161;
  const Obj S_string = 2177;
  const Obj S_symbol = 2193;
  const Obj S_to_obj = 2209;
  const Obj S_to_str = 2225;
  const Obj S_values = 2241;
  const Obj S_add_ref = 2257;
  const Obj S_bracket = 2273;
  const Obj S_cls_def = 2289;
  const Obj S_cls_var = 2305;
  const Obj S_counter = 2321;
  const Obj S_do_expr = 2337;
  const Obj S_end_val = 2353;
  const Obj S_ex_qual = 2369;
  const Obj S_fn_call = 2385;
  const Obj S_fn_defs = 2401;
  const Obj S_get_tag = 2417;
  const Obj S_greater = 2433;
  const Obj S_idx_var = 2449;
  const Obj S_if_expr = 2465;
  const Obj S_if_stmt = 2481;
  const Obj S_integer = 2497;
  const Obj S_is_expr = 2513;
  const Obj S_is_open = 2529;
  const Obj S_is_symb = 2545;
  const Obj S_or_else = 2561;
  const Obj S_or_expr = 2577;
  const Obj S_program = 2593;
  const Obj S_release = 2609;
  const Obj S_res_var = 2625;
  const Obj S_ret_val = 2641;
  const Obj S_rev_seq = 2657;
  const Obj S_set_var = 2673;
  const Obj S_symbols = 2689;
  const Obj S_syn_sgn = 2705;
  const Obj S_to_symb = 2721;
  const Obj S_typedef = 2737;
  const Obj S_accessor = 2753;
  const Obj S_all_objs = 2769;
  const Obj S_and_expr = 2785;
  const Obj S_and_then = 2801;
  const Obj S_bin_tree = 2817;
  const Obj S_brackets = 2833;
  const Obj S_branches = 2849;
  const Obj S_call_cls = 2865;
  const Obj S_cls_call = 2881;
  const Obj S_cls_expr = 2897;
  const Obj S_cls_type = 2913;
  const Obj S_dup_tdef = 2929;
  const Obj S_for_stmt = 2945;
  const Obj S_in_arity = 2961;
  const Obj S_in_types = 2977;
  const Obj S_inner_fn = 2993;
  const Obj S_integers = 3009;
  const Obj S_key_expr = 3025;
  const Obj S_key_ptrn = 3041;
  const Obj S_key_type = 3057;
  const Obj S_let_expr = 3073;
  const Obj S_let_stmt = 3089;
  const Obj S_low_ints = 3105;
  const Obj S_lower_eq = 3121;
  const Obj S_map_comp = 3137;
  const Obj S_map_expr = 3153;
  const Obj S_map_type = 3169;
  const Obj S_mk_array = 3185;
  const Obj S_nonempty = 3201;
  const Obj S_not_expr = 3217;
  const Obj S_obj_ptrn = 3233;
  const Obj S_obj_type = 3249;
  const Obj S_optional = 3265;
  const Obj S_out_type = 3281;
  const Obj S_outer_fn = 3297;
  const Obj S_patterns = 3313;
  const Obj S_ptrn_var = 3329;
  const Obj S_res_type = 3345;
  const Obj S_sel_expr = 3361;
  const Obj S_seq_comp = 3377;
  const Obj S_seq_expr = 3393;
  const Obj S_seq_iter = 3409;
  const Obj S_seq_type = 3425;
  const Obj S_set_bvar = 3441;
  const Obj S_set_comp = 3457;
  const Obj S_set_expr = 3473;
  const Obj S_set_ivar = 3489;
  const Obj S_set_type = 3505;
  const Obj S_src_expr = 3521;
  const Obj S_tag_ptrn = 3537;
  const Obj S_tag_type = 3553;
  const Obj S_tdef_err = 3569;
  const Obj S_type_any = 3585;
  const Obj S_type_ref = 3601;
  const Obj S_type_var = 3617;
  const Obj S_undef_fn = 3633;
  const Obj S_var_ptrn = 3649;
  const Obj S_var_used = 3665;
  const Obj S_vect_var = 3681;
  const Obj S_atom_type = 3697;
  const Obj S_call_proc = 3713;
  const Obj S_cls_scope = 3729;
  const Obj S_cond_expr = 3745;
  const Obj S_condition = 3761;
  const Obj S_count_var = 3777;
  const Obj S_dupl_tdef = 3793;
  const Obj S_elem_type = 3809;
  const Obj S_empty_map = 3825;
  const Obj S_empty_seq = 3841;
  const Obj S_empty_set = 3857;
  const Obj S_eq_clause = 3873;
  const Obj S_eval_code = 3889;
  const Obj S_fail_stmt = 3905;
  const Obj S_fn_symbol = 3921;
  const Obj S_fndef_err = 3937;
  const Obj S_high_ints = 3953;
  const Obj S_idx_first = 3969;
  const Obj S_in_clause = 3985;
  const Obj S_int_range = 4001;
  const Obj S_is_eq_int = 4017;
  const Obj S_is_ne_map = 4033;
  const Obj S_is_ne_seq = 4049;
  const Obj S_is_ne_set = 4065;
  const Obj S_join_seqs = 4081;
  const Obj S_local_fns = 4097;
  const Obj S_loop_stmt = 4113;
  const Obj S_memb_test = 4129;
  const Obj S_named_par = 4145;
  const Obj S_new_value = 4161;
  const Obj S_op_symbol = 4177;
  const Obj S_or_clause = 4193;
  const Obj S_print_obj = 4209;
  const Obj S_sel_exprs = 4225;
  const Obj S_sequences = 4241;
  const Obj S_start_val = 4257;
  const Obj S_surv_vars = 4273;
  const Obj S_symb_type = 4289;
  const Obj S_terminate = 4305;
  const Obj S_type_ptrn = 4321;
  const Obj S_undef_var = 4337;
  const Obj S_var_redef = 4353;
  const Obj S_var_scope = 4369;
  const Obj S_when_true = 4385;
  const Obj S_and_clause = 4401;
  const Obj S_break_loop = 4417;
  const Obj S_break_stmt = 4433;
  const Obj S_break_vars = 4449;
  const Obj S_exit_block = 4465;
  const Obj S_ext_lookup = 4481;
  const Obj S_greater_eq = 4497;
  const Obj S_is_eq_bool = 4513;
  const Obj S_key_stream = 4529;
  const Obj S_map_it_var = 4545;
  const Obj S_match_expr = 4561;
  const Obj S_membership = 4577;
  const Obj S_merge_maps = 4593;
  const Obj S_print_stmt = 4609;
  const Obj S_range_iter = 4625;
  const Obj S_seq_it_var = 4641;
  const Obj S_seq_to_set = 4657;
  const Obj S_set_it_var = 4673;
  const Obj S_signatures = 4689;
  const Obj S_skip_first = 4705;
  const Obj S_stream_var = 4721;
  const Obj S_syn_fn_def = 4737;
  const Obj S_tagged_obj = 4753;
  const Obj S_tuple_ptrn = 4769;
  const Obj S_tuple_type = 4785;
  const Obj S_ublock_err = 4801;
  const Obj S_union_type = 4817;
  const Obj S_unique_int = 4833;
  const Obj S_unique_var = 4849;
  const Obj S_value_expr = 4865;
  const Obj S_value_ptrn = 4881;
  const Obj S_value_type = 4897;
  const Obj S_when_false = 4913;
  const Obj S_where_expr = 4929;
  const Obj S_assert_stmt = 4945;
  const Obj S_cls_ext_par = 4961;
  const Obj S_get_int_val = 4977;
  const Obj S_get_seq_len = 4993;
  const Obj S_init_stream = 5009;
  const Obj S_lexer_error = 5025;
  const Obj S_list_to_seq = 5041;
  const Obj S_next_var_id = 5057;
  const Obj S_no_ret_stmt = 5073;
  const Obj S_par_typedef = 5089;
  const Obj S_parenthesis = 5105;
  const Obj S_return_stmt = 5121;
  const Obj S_right_arrow = 5137;
  const Obj S_select_expr = 5153;
  const Obj S_seq_to_mset = 5169;
  const Obj S_success_var = 5185;
  const Obj S_tagged_objs = 5201;
  const Obj S_type_symbol = 5217;
  const Obj S_untyped_sgn = 5233;
  const Obj S_using_block = 5249;
  const Obj S_all_rel_vars = 5265;
  const Obj S_builtin_call = 5281;
  const Obj S_cleanup_code = 5297;
  const Obj S_const_or_var = 5313;
  const Obj S_dup_par_tdef = 5329;
  const Obj S_eval_bool_fn = 5345;
  const Obj S_ext_var_ptrn = 5361;
  const Obj S_foreach_stmt = 5377;
  const Obj S_get_curr_key = 5393;
  const Obj S_get_curr_obj = 5409;
  const Obj S_get_map_iter = 5425;
  const Obj S_get_map_size = 5441;
  const Obj S_get_seq_iter = 5457;
  const Obj S_get_set_iter = 5473;
  const Obj S_get_set_size = 5489;
  const Obj S_match_action = 5505;
  const Obj S_move_forward = 5521;
  const Obj S_named_params = 5537;
  const Obj S_obj_proc_def = 5553;
  const Obj S_parser_error = 5569;
  const Obj S_replace_expr = 5585;
  const Obj S_tag_obj_expr = 5601;
  const Obj S_value_stream = 5617;
  const Obj S_accessor_test = 5633;
  const Obj S_almost_def_fn = 5649;
  const Obj S_bool_proc_def = 5665;
  const Obj S_dupl_par_tdef = 5681;
  const Obj S_execute_block = 5697;
  const Obj S_get_inner_obj = 5713;
  const Obj S_get_seq_slice = 5729;
  const Obj S_incomp_fndefs = 5745;
  const Obj S_inf_loop_stmt = 5761;
  const Obj S_internal_sort = 5777;
  const Obj S_is_tagged_obj = 5793;
  const Obj S_map_in_clause = 5809;
  const Obj S_mk_tagged_obj = 5825;
  const Obj S_not_in_clause = 5841;
  const Obj S_retrieve_expr = 5857;
  const Obj S_symbol_switch = 5873;
  const Obj S_dupl_ptrn_vars = 5889;
  const Obj S_dupl_type_pars = 5905;
  const Obj S_empty_map_type = 5921;
  const Obj S_empty_seq_type = 5937;
  const Obj S_empty_set_type = 5953;
  const Obj S_fixed_seq_type = 5969;
  const Obj S_get_curr_value = 5985;
  const Obj S_key_stream_var = 6001;
  const Obj S_select_expr_fn = 6017;
  const Obj S_undef_type_var = 6033;
  const Obj S_assignment_stmt = 6049;
  const Obj S_dup_closure_def = 6065;
  const Obj S_is_out_of_range = 6081;
  const Obj S_nested_local_fn = 6097;
  const Obj S_no_way_out_loop = 6113;
  const Obj S_par_type_symbol = 6129;
  const Obj S_replace_expr_fn = 6145;
  const Obj S_undef_type_name = 6161;
  const Obj S_almost_def_const = 6177;
  const Obj S_dupl_ptrn_labels = 6193;
  const Obj S_nested_fn_symbol = 6209;
  const Obj S_unreachable_code = 6225;
  const Obj S_value_stream_var = 6241;
  const Obj S_add_ref_eval_code = 6257;
  const Obj S_cond_match_action = 6273;
  const Obj S_map_not_in_clause = 6289;
  const Obj S_rep_labels_in_map = 6305;
  const Obj S_asgnm_readonly_var = 6321;
  const Obj S_break_outside_loop = 6337;
  const Obj S_mk_seq_from_stream = 6353;
  const Obj S_mk_set_from_stream = 6369;
  const Obj S_undef_var_or_const = 6385;
  const Obj S_mk_map_from_streams = 6401;
  const Obj S_undef_par_type_name = 6417;
  const Obj S_wrong_num_of_params = 6433;
  const Obj S_already_def_ptrn_var = 6449;
  const Obj S_free_var_in_try_expr = 6465;
  const Obj S_invalid_type_for_tag = 6481;
  const Obj S_undef_bound_ptrn_var = 6497;
  const Obj S_diff_vars_in_or_clause = 6513;
  const Obj S_loc_bound_var_with_ptrn = 6529;
  const Obj S_nested_mult_ptrn_branch = 6545;
  const Obj S_set_found_var_and_leave = 6561;
  const Obj S_eval_expr_and_add_to_set = 6577;
  const Obj S_eval_exprs_and_add_to_map = 6593;
  const Obj S_unbound_vars_in_excl_clause = 6609;
  const Obj S_mult_vars_in_mult_ptrn_branch = 6625;
  const Obj S_vars_repeated_in_diff_branches = 6641;
  const Obj S_incompatible_types_in_union_type = 6657;
  
  
  
  
  const int EMB_SYMB_COUNT = 416;
  
  
  
  
  const char *map_symb_to_str[EMB_SYMB_COUNT] = {
    "x",
    "y",
    "at",
    "eq",
    "id",
    "or",
    "add",
    "amp",
    "and",
    "cat",
    "cls",
    "col",
    "den",
    "env",
    "exp",
    "idx",
    "key",
    "len",
    "map",
    "max",
    "min",
    "neg",
    "neq",
    "nil",
    "not",
    "num",
    "obj",
    "prg",
    "rat",
    "rev",
    "seq",
    "set",
    "src",
    "str",
    "tag",
    "val",
    "var",
    "body",
    "bvar",
    "case",
    "char",
    "code",
    "cond",
    "else",
    "errs",
    "eval",
    "evar",
    "expr",
    "head",
    "idiv",
    "ivar",
    "keys",
    "leaf",
    "left",
    "line",
    "list",
    "lvar",
    "map1",
    "map2",
    "maps",
    "mset",
    "mult",
    "name",
    "objs",
    "plus",
    "ptrn",
    "sets",
    "size",
    "star",
    "svar",
    "symb",
    "tail",
    "then",
    "true",
    "type",
    "val1",
    "val2",
    "vals",
    "vvar",
    "arity",
    "brace",
    "cases",
    "comma",
    "elems",
    "expr1",
    "expr2",
    "exprs",
    "false",
    "field",
    "inner",
    "is_eq",
    "is_ge",
    "is_gt",
    "is_le",
    "is_lt",
    "isort",
    "label",
    "loops",
    "lower",
    "minus",
    "no_op",
    "outer",
    "point",
    "ptrns",
    "right",
    "slash",
    "slice",
    "stmts",
    "tdefs",
    "token",
    "value",
    "action",
    "append",
    "asgnms",
    "branch",
    "clause",
    "fields",
    "fn_def",
    "fn_par",
    "fndefs",
    "get_at",
    "header",
    "instrs",
    "is_int",
    "lookup",
    "mk_map",
    "mk_seq",
    "mk_set",
    "object",
    "offset",
    "params",
    "repeat",
    "set_at",
    "source",
    "stream",
    "string",
    "symbol",
    "to_obj",
    "to_str",
    "values",
    "add_ref",
    "bracket",
    "cls_def",
    "cls_var",
    "counter",
    "do_expr",
    "end_val",
    "ex_qual",
    "fn_call",
    "fn_defs",
    "get_tag",
    "greater",
    "idx_var",
    "if_expr",
    "if_stmt",
    "integer",
    "is_expr",
    "is_open",
    "is_symb",
    "or_else",
    "or_expr",
    "program",
    "release",
    "res_var",
    "ret_val",
    "rev_seq",
    "set_var",
    "symbols",
    "syn_sgn",
    "to_symb",
    "typedef",
    "accessor",
    "all_objs",
    "and_expr",
    "and_then",
    "bin_tree",
    "brackets",
    "branches",
    "call_cls",
    "cls_call",
    "cls_expr",
    "cls_type",
    "dup_tdef",
    "for_stmt",
    "in_arity",
    "in_types",
    "inner_fn",
    "integers",
    "key_expr",
    "key_ptrn",
    "key_type",
    "let_expr",
    "let_stmt",
    "low_ints",
    "lower_eq",
    "map_comp",
    "map_expr",
    "map_type",
    "mk_array",
    "nonempty",
    "not_expr",
    "obj_ptrn",
    "obj_type",
    "optional",
    "out_type",
    "outer_fn",
    "patterns",
    "ptrn_var",
    "res_type",
    "sel_expr",
    "seq_comp",
    "seq_expr",
    "seq_iter",
    "seq_type",
    "set_bvar",
    "set_comp",
    "set_expr",
    "set_ivar",
    "set_type",
    "src_expr",
    "tag_ptrn",
    "tag_type",
    "tdef_err",
    "type_any",
    "type_ref",
    "type_var",
    "undef_fn",
    "var_ptrn",
    "var_used",
    "vect_var",
    "atom_type",
    "call_proc",
    "cls_scope",
    "cond_expr",
    "condition",
    "count_var",
    "dupl_tdef",
    "elem_type",
    "empty_map",
    "empty_seq",
    "empty_set",
    "eq_clause",
    "eval_code",
    "fail_stmt",
    "fn_symbol",
    "fndef_err",
    "high_ints",
    "idx_first",
    "in_clause",
    "int_range",
    "is_eq_int",
    "is_ne_map",
    "is_ne_seq",
    "is_ne_set",
    "join_seqs",
    "local_fns",
    "loop_stmt",
    "memb_test",
    "named_par",
    "new_value",
    "op_symbol",
    "or_clause",
    "print_obj",
    "sel_exprs",
    "sequences",
    "start_val",
    "surv_vars",
    "symb_type",
    "terminate",
    "type_ptrn",
    "undef_var",
    "var_redef",
    "var_scope",
    "when_true",
    "and_clause",
    "break_loop",
    "break_stmt",
    "break_vars",
    "exit_block",
    "ext_lookup",
    "greater_eq",
    "is_eq_bool",
    "key_stream",
    "map_it_var",
    "match_expr",
    "membership",
    "merge_maps",
    "print_stmt",
    "range_iter",
    "seq_it_var",
    "seq_to_set",
    "set_it_var",
    "signatures",
    "skip_first",
    "stream_var",
    "syn_fn_def",
    "tagged_obj",
    "tuple_ptrn",
    "tuple_type",
    "ublock_err",
    "union_type",
    "unique_int",
    "unique_var",
    "value_expr",
    "value_ptrn",
    "value_type",
    "when_false",
    "where_expr",
    "assert_stmt",
    "cls_ext_par",
    "get_int_val",
    "get_seq_len",
    "init_stream",
    "lexer_error",
    "list_to_seq",
    "next_var_id",
    "no_ret_stmt",
    "par_typedef",
    "parenthesis",
    "return_stmt",
    "right_arrow",
    "select_expr",
    "seq_to_mset",
    "success_var",
    "tagged_objs",
    "type_symbol",
    "untyped_sgn",
    "using_block",
    "all_rel_vars",
    "builtin_call",
    "cleanup_code",
    "const_or_var",
    "dup_par_tdef",
    "eval_bool_fn",
    "ext_var_ptrn",
    "foreach_stmt",
    "get_curr_key",
    "get_curr_obj",
    "get_map_iter",
    "get_map_size",
    "get_seq_iter",
    "get_set_iter",
    "get_set_size",
    "match_action",
    "move_forward",
    "named_params",
    "obj_proc_def",
    "parser_error",
    "replace_expr",
    "tag_obj_expr",
    "value_stream",
    "accessor_test",
    "almost_def_fn",
    "bool_proc_def",
    "dupl_par_tdef",
    "execute_block",
    "get_inner_obj",
    "get_seq_slice",
    "incomp_fndefs",
    "inf_loop_stmt",
    "internal_sort",
    "is_tagged_obj",
    "map_in_clause",
    "mk_tagged_obj",
    "not_in_clause",
    "retrieve_expr",
    "symbol_switch",
    "dupl_ptrn_vars",
    "dupl_type_pars",
    "empty_map_type",
    "empty_seq_type",
    "empty_set_type",
    "fixed_seq_type",
    "get_curr_value",
    "key_stream_var",
    "select_expr_fn",
    "undef_type_var",
    "assignment_stmt",
    "dup_closure_def",
    "is_out_of_range",
    "nested_local_fn",
    "no_way_out_loop",
    "par_type_symbol",
    "replace_expr_fn",
    "undef_type_name",
    "almost_def_const",
    "dupl_ptrn_labels",
    "nested_fn_symbol",
    "unreachable_code",
    "value_stream_var",
    "add_ref_eval_code",
    "cond_match_action",
    "map_not_in_clause",
    "rep_labels_in_map",
    "asgnm_readonly_var",
    "break_outside_loop",
    "mk_seq_from_stream",
    "mk_set_from_stream",
    "undef_var_or_const",
    "mk_map_from_streams",
    "undef_par_type_name",
    "wrong_num_of_params",
    "already_def_ptrn_var",
    "free_var_in_try_expr",
    "invalid_type_for_tag",
    "undef_bound_ptrn_var",
    "diff_vars_in_or_clause",
    "loc_bound_var_with_ptrn",
    "nested_mult_ptrn_branch",
    "set_found_var_and_leave",
    "eval_expr_and_add_to_set",
    "eval_exprs_and_add_to_map",
    "unbound_vars_in_excl_clause",
    "mult_vars_in_mult_ptrn_branch",
    "vars_repeated_in_diff_branches",
    "incompatible_types_in_union_type",
  };
  
  
  
  
  struct Env {
    Obj n_named_params;
  
    Obj n_local_fns;
  
    Obj (*n1_condition)(Obj p0, const Obj *C, Env &env);
    const Obj *C1_condition;
  
    Obj (*n1_eval)(Obj p0, const Obj *C, Env &env);
    const Obj *C1_eval;
  
    Obj (*n2_is_strictly_ordered)(Obj p0, Obj p1, const Obj *C, Env &env);
    const Obj *C2_is_strictly_ordered;
  
    Obj (*n1_f)(Obj p0, const Obj *C, Env &env);
    const Obj *C1_f;
  
    Obj n_typedefs;
  
    Obj n_cls_vars;
  
    Obj n_fns_in_scope;
  
    Obj n_all_par_type_symbols;
  
    Obj n_type_vars_in_scope;
  
    Obj n_type_vars;
  
    Obj n_impl_params;
  
    Obj n_curr_outer_fn;
  
    Obj n_type_map;
  
    Obj n_next_set_it_var_id;
  
    Obj n_next_seq_it_var_id;
  
    Obj n_next_map_it_var_id;
  
    Obj n_next_obj_var_id;
  
    Obj n_next_int_var_id;
  
    Obj n_next_bool_var_id;
  
    Obj n_next_vector_var_id;
  
    Obj n_next_stream_var_id;
  
    Obj (*n1_typesymb2name)(Obj p0, const Obj *C, Env &env);
    const Obj *C1_typesymb2name;
  
    Obj (*n1_cls2id)(Obj p0, const Obj *C, Env &env);
    const Obj *C1_cls2id;
  };
  
  
  
  
  bool is_any(Obj);
  bool is_int(Obj);
  bool is_atom(Obj);
  bool is_syntype(Obj);
  bool is_tautology(Obj);
  bool is_objfnname(Obj);
  bool is_nat(Obj);
  bool is_nznat(Obj);
  bool is_negint(Obj);
  bool is_bintree(Obj);
  bool is_bool(Obj);
  bool is_exttype(Obj);
  bool is_subexpr(Obj);
  bool is_extexpr(Obj);
  bool is_parseresult(Obj);
  bool is_synsubexpr(Obj);
  bool is_extsynexpr(Obj);
  bool is_typesymbol(Obj);
  bool is_objexpr(Obj);
  bool is_procdef(Obj);
  bool is_char(Obj);
  bool is_partype(Obj);
  bool is_obj(Obj);
  bool is_parsesuccess(Obj);
  bool is_symbobj(Obj);
  bool is_basictypesymbol(Obj);
  bool is_typevar(Obj);
  bool is_intvar(Obj);
  bool is_boolvar(Obj);
  bool is_streamvar(Obj);
  bool is_setitvar(Obj);
  bool is_seqitvar(Obj);
  bool is_mapitvar(Obj);
  bool is_symbtype(Obj);
  bool is_typeref(Obj);
  bool is_boolfnname(Obj);
  bool is_intexpr(Obj);
  bool is_itvar(Obj);
  bool is_anyexpr(Obj);
  bool is_neset(Obj);
  bool is_neseq(Obj);
  bool is_set(Obj);
  bool is_seq(Obj);
  bool is_prgdecl(Obj);
  bool is_leafobj(Obj);
  bool is_atomicexpr(Obj);
  bool is_map(Obj);
  bool is_tuple(Obj);
  bool is_uniontype(Obj);
  bool is_multparseresult(Obj);
  bool is_objpartset(Obj);
  bool is_string(Obj);
  bool is_anyvar(Obj);
  bool is_fncallparam(Obj);
  bool is_synprg(Obj);
  bool is_leaftype(Obj);
  bool is_ublockerr(Obj);
  bool is_punctsymb(Obj);
  bool is_parseerror(Obj);
  bool is_parseintermres(Obj);
  bool is_operator(Obj);
  bool is_token(Obj);
  bool is_objpart(Obj);
  bool is_point(Obj);
  bool is_condexpr(Obj);
  bool is_tagtype(Obj);
  bool is_lexererror(Obj);
  bool is_syntypedef(Obj);
  bool is_syncondexpr(Obj);
  bool is_vecvar(Obj);
  bool is_type(Obj);
  bool is_basicuntypedsgn(Obj);
  bool is_condmatchaction(Obj);
  bool is_builtin(Obj);
  bool is_parseintermmultres(Obj);
  bool is_maptype(Obj);
  bool is_var(Obj);
  bool is_settype(Obj);
  bool is_rat(Obj);
  bool is_clstype(Obj);
  bool is_partypesymbol(Obj);
  bool is_syncase(Obj);
  bool is_clsdef(Obj);
  bool is_matchaction(Obj);
  bool is_ccodeoutput(Obj);
  bool is_synclsexpr(Obj);
  bool is_bintree__0(Obj);
  bool is_synusingblock(Obj);
  bool is_untypedsgn(Obj);
  bool is_tupletype(Obj);
  bool is_synpartypedef(Obj);
  bool is_boolprocdef(Obj);
  bool is_clsexpr(Obj);
  bool is_synsgn(Obj);
  bool is_seqtype(Obj);
  bool is_fnsymbol(Obj);
  bool is_program(Obj);
  bool is_objvar(Obj);
  bool is_tdefusererr(Obj);
  bool is_objprocdef(Obj);
  bool is_natobjop(Obj);
  bool is_syniter(Obj);
  bool is_inttype(Obj);
  bool is_synfndef(Obj);
  bool is_finalmatchaction(Obj);
  bool is_fndef(Obj);
  bool is_boolexpr(Obj);
  bool is_natintop(Obj);
  bool is_pattern(Obj);
  bool is_clause(Obj);
  bool is_synclause(Obj);
  bool is_synobjerr(Obj);
  bool is_usererr(Obj);
  bool is_natboolop(Obj);
  bool is_synstmt(Obj);
  bool is_statement(Obj);
  bool is_expr(Obj);
  bool is_synexpr(Obj);
  bool is_instr(Obj);
  
  
  
  
  Obj cls_0(Obj, const Obj *, Env &);
  Obj cls_1(Obj, const Obj *, Env &);
  Obj cls_2(Obj, Obj, const Obj *, Env &);
  Obj cls_3(Obj, const Obj *, Env &);
  Obj cls_4(Obj, const Obj *, Env &);
  Obj cls_5(Obj, const Obj *, Env &);
  Obj cls_6(Obj, const Obj *, Env &);
  Obj cls_7(Obj, const Obj *, Env &);
  Obj cls_8(Obj, const Obj *, Env &);
  Obj cls_9(Obj, const Obj *, Env &);
  Obj cls_10(Obj, const Obj *, Env &);
  Obj cls_11(Obj, const Obj *, Env &);
  Obj cls_12(Obj, const Obj *, Env &);
  Obj cls_13(Obj, const Obj *, Env &);
  Obj cls_14(Obj, const Obj *, Env &);
  Obj cls_15(Obj, const Obj *, Env &);
  Obj cls_16(Obj, const Obj *, Env &);
  Obj cls_17(Obj, const Obj *, Env &);
  Obj cls_18(Obj, const Obj *, Env &);
  Obj cls_19(Obj, const Obj *, Env &);
  Obj cls_20(Obj, const Obj *, Env &);
  Obj cls_21(Obj, const Obj *, Env &);
  Obj cls_22(Obj, const Obj *, Env &);
  Obj cls_23(Obj, const Obj *, Env &);
  Obj cls_24(Obj, const Obj *, Env &);
  Obj cls_25(Obj, const Obj *, Env &);
  Obj cls_26(Obj, const Obj *, Env &);
  Obj cls_27(Obj, Obj, const Obj *, Env &);
  Obj cls_28(Obj, const Obj *, Env &);
  Obj cls_29(Obj, const Obj *, Env &);
  Obj cls_30(Obj, const Obj *, Env &);
  Obj cls_31(Obj, const Obj *, Env &);
  Obj cls_32(Obj, const Obj *, Env &);
  Obj cls_33(Obj, const Obj *, Env &);
  Obj cls_34(Obj, const Obj *, Env &);
  Obj cls_35(Obj, const Obj *, Env &);
  Obj cls_36(Obj, const Obj *, Env &);
  Obj cls_37(Obj, const Obj *, Env &);
  Obj cls_38(Obj, const Obj *, Env &);
  Obj cls_39(Obj, const Obj *, Env &);
  
  
  
  
  Obj Empty_Set(Env &);
  Obj Empty_Seq(Env &);
  Obj Empty_Map(Env &);
  Obj Unique_Int(Env &);
  Obj Ascii_Minus(Env &);
  Obj Ascii_Space(Env &);
  Obj Ascii_Newline(Env &);
  Obj Ascii_Comma(Env &);
  Obj Ascii_Left_Parenthesis(Env &);
  Obj Ascii_Right_Parenthesis(Env &);
  Obj Terminate(Env &);
  Obj Ascii_Double_Quotes(Env &);
  Obj No_Op(Env &);
  Obj Break_Loop(Env &);
  Obj Ascii_Column(Env &);
  Obj Exit_Block(Env &);
  Obj Ascii_Left_Bracket(Env &);
  Obj Ascii_Right_Bracket(Env &);
  Obj Ascii_Underscore(Env &);
  Obj Ascii_Backslash(Env &);
  Obj Ascii_Left_Brace(Env &);
  Obj Left_Parenthesis(Env &);
  Obj Right_Parenthesis(Env &);
  Obj Left_Bracket(Env &);
  Obj Right_Bracket(Env &);
  Obj Ascii_Right_Brace(Env &);
  Obj Left_Brace(Env &);
  Obj Right_Brace(Env &);
  Obj Obj_True(Env &);
  Obj Obj_False(Env &);
  Obj Obj_Nil(Env &);
  Obj Ret_True(Env &);
  Obj Ret_False(Env &);
  Obj Rand_Sort(Obj, Env &);
  Obj Set(Obj, Env &);
  Obj Left(Obj, Env &);
  Obj Right(Obj, Env &);
  Obj Head(Obj, Env &);
  Obj minus(Obj, Env &);
  Obj Symbol(Obj, Env &);
  Obj Label(Obj, Env &);
  Obj At_Least_One(Obj, Env &);
  Obj Not_All(Obj, Env &);
  Obj Minus(Obj, Env &);
  Obj Neg(Obj, Env &);
  Obj Fn_Par(Obj, Env &);
  Obj And(Obj, Env &);
  Obj Or(Obj, Env &);
  Obj String(Obj, Env &);
  Obj Cls_Ext_Par(Obj, Env &);
  Obj Lvar(Obj, Env &);
  Obj Bvar(Obj, Env &);
  Obj Ivar(Obj, Env &);
  Obj Svar(Obj, Env &);
  Obj Set_It_Var(Obj, Env &);
  Obj Seq_It_Var(Obj, Env &);
  Obj Map_It_Var(Obj, Env &);
  Obj Is_Symb(Obj, Env &);
  Obj Is_Int(Obj, Env &);
  Obj Is_Ne_Set(Obj, Env &);
  Obj Is_Ne_Seq(Obj, Env &);
  Obj Is_Ne_Map(Obj, Env &);
  Obj Is_Tagged_Obj(Obj, Env &);
  Obj Get_Int_Val(Obj, Env &);
  Obj Get_Set_Size(Obj, Env &);
  Obj Get_Seq_Len(Obj, Env &);
  Obj Get_Map_Size(Obj, Env &);
  Obj Get_Tag(Obj, Env &);
  Obj Get_Inner_Obj(Obj, Env &);
  Obj To_Obj(Obj, Env &);
  Obj To_Symb(Obj, Env &);
  Obj Flow_Control_Can_Jump_Out(Obj, Env &);
  Obj Repeat(Obj, Env &);
  Obj Execute_Block(Obj, Env &);
  Obj Ret_Val(Obj, Env &);
  Obj Is_Out_Of_Range(Obj, Env &);
  Obj Init_Stream(Obj, Env &);
  Obj Move_Forward(Obj, Env &);
  Obj Add_Ref(Obj, Env &);
  Obj Release(Obj, Env &);
  Obj And_Then(Obj, Env &);
  Obj Or_Else(Obj, Env &);
  Obj Sort(Obj, Env &);
  Obj Memb_Test(Obj, Env &);
  Obj greater(Obj, Obj, Env &);
  Obj Get_Curr_Obj(Obj, Env &);
  Obj Get_Curr_Key(Obj, Env &);
  Obj Get_Curr_Value(Obj, Env &);
  Obj To_Text(Obj, Env &);
  Obj Seq_Union(Obj, Env &);
  Obj Break_If_Not(Obj, Env &);
  Obj Break_If(Obj, Env &);
  Obj Exit_Block_If_Not(Obj, Env &);
  Obj Exit_Block_If(Obj, Env &);
  Obj Size(Obj, Env &);
  Obj Is_Empty_Set(Obj, Env &);
  Obj Is_Empty_Seq(Obj, Env &);
  Obj Is_Empty_Map(Obj, Env &);
  Obj plus(Obj, Obj, Env &);
  Obj Is_Singleton(Obj, Env &);
  Obj Indexes(Obj, Env &);
  Obj Dec_Seq(Obj, Env &);
  Obj Ret_True_If(Obj, Env &);
  Obj Ret_True_If_Not(Obj, Env &);
  Obj Ret_False_If(Obj, Env &);
  Obj Ret_False_If_Not(Obj, Env &);
  Obj At(Obj, Obj, Env &);
  Obj Is_True(Obj, Env &);
  Obj Is_False(Obj, Env &);
  Obj Check(Obj, Env &);
  Obj Increment(Obj, Env &);
  Obj Sort_Set(Obj, Env &);
  Obj Simplify(Obj, Env &);
  Obj Check_Is_Bool(Obj, Env &);
  Obj Rep_Str(Obj, Obj, Env &);
  Obj Subseq(Obj, Obj, Obj, Env &);
  Obj Rand_Elem(Obj, Env &);
  Obj Get_Curr_Obj(Obj, Obj, Env &);
  Obj Get_Curr_Key(Obj, Obj, Env &);
  Obj Get_Curr_Value(Obj, Obj, Env &);
  Obj Last(Obj, Env &);
  Obj Tail(Obj, Env &);
  Obj Block_Failure_If_Not(Obj, Obj, Env &);
  Obj Is_Bool(Obj, Env &);
  Obj To_Text(Obj, Obj, Env &);
  Obj Subset(Obj, Obj, Env &);
  Obj Disjoint(Obj, Obj, Env &);
  Obj Stmts_Are_Wf(Obj, Obj, Env &);
  Obj Rev_At(Obj, Obj, Env &);
  Obj None(Obj, Env &);
  Obj Substr(Obj, Obj, Obj, Env &);
  Obj Print_Obj(Obj, Env &);
  Obj Is_Between(Obj, Obj, Obj, Env &);
  Obj Maybe_Op(Obj, Obj, Env &);
  Obj Are_Compatible(Obj, Obj, Env &);
  Obj Some(Obj, Env &);
  Obj Ret_False_If_Not_In(Obj, Obj, Env &);
  Obj Set_Found_Var_And_Leave(Obj, Env &);
  Obj Fndef_Wf_Errors(Obj, Obj, Obj, Env &);
  Obj Parse_Obj__Error(Obj, Env &);
  Obj Parse_Prg_Decl(Obj, Env &);
  Obj Syn_Fns_Are_Compatible__Are_Part_Compatible(Obj, Obj, Env &);
  Obj Indent_Line(Obj, Env &);
  Obj Max(Obj, Obj, Env &);
  Obj Min(Obj, Obj, Env &);
  Obj Clause_Wf_Errors(Obj, Obj, Env &);
  Obj Untag(Obj, Env &);
  Obj Has_Duplicates(Obj, Env &);
  Obj Is_Digit(Obj, Env &);
  Obj Is_Lower(Obj, Env &);
  Obj Repeat_While(Obj, Obj, Env &);
  Obj Has_Key(Obj, Obj, Env &);
  Obj Set_To_Mset(Obj, Env &);
  Obj And(Obj, Obj, Env &);
  Obj Or(Obj, Obj, Env &);
  Obj Mk_Call(Obj, Obj, Env &);
  Obj Clauses_Wf_Errors(Obj, Obj, Env &);
  Obj Values(Obj, Env &);
  Obj Only_Element(Obj, Env &);
  Obj Join(Obj, Env &);
  Obj At(Obj, Obj, Obj, Env &);
  Obj Keys(Obj, Env &);
  Obj And_Then(Obj, Obj, Env &);
  Obj Or_Else(Obj, Obj, Env &);
  Obj Indent(Obj, Env &);
  Obj Block_Success_If(Obj, Obj, Env &);
  Obj Block_Failure_If(Obj, Obj, Env &);
  Obj lower_eq(Obj, Obj, Env &);
  Obj greater_eq(Obj, Obj, Env &);
  Obj Multiset_Union(Obj, Env &);
  Obj Can_Fall_Through(Obj, Env &);
  Obj Mk_Call(Obj, Obj, Obj, Env &);
  Obj Normalize_Unions(Obj, Env &);
  Obj Length(Obj, Env &);
  Obj Apply(Obj, Env &);
  Obj Append(Obj, Env &);
  Obj Only_Element(Obj, Obj, Env &);
  Obj Tokenize__Error(Obj, Obj, Env &);
  Obj Fast_Tokenize__Error(Obj, Obj, Env &);
  Obj Vvar(Obj, Obj, Env &);
  Obj Set_Var(Obj, Obj, Env &);
  Obj Set_Bvar(Obj, Obj, Env &);
  Obj Set_Ivar(Obj, Obj, Env &);
  Obj Evar(Obj, Obj, Env &);
  Obj List_To_Seq(Obj, Obj, Env &);
  Obj Internal_Sort(Obj, Obj, Env &);
  Obj Reverse(Obj, Env &);
  Obj Append(Obj, Obj, Env &);
  Obj Mk_Set_From_Stream(Obj, Obj, Env &);
  Obj Mk_Seq_From_Stream(Obj, Obj, Env &);
  Obj Add(Obj, Obj, Env &);
  Obj Rev_Seq(Obj, Obj, Env &);
  Obj Seq_To_Set(Obj, Obj, Env &);
  Obj Seq_To_Mset(Obj, Obj, Env &);
  Obj Eval_Bool_Fn(Obj, Obj, Env &);
  Obj Is_Gt(Obj, Obj, Env &);
  Obj Is_Ge(Obj, Obj, Env &);
  Obj Is_Lt(Obj, Obj, Env &);
  Obj Is_Le(Obj, Obj, Env &);
  Obj Mult(Obj, Obj, Env &);
  Obj Idiv(Obj, Obj, Env &);
  Obj Is_Space(Obj, Env &);
  Obj Union(Obj, Env &);
  Obj Eval_Expr_And_Add_To_Set(Obj, Obj, Env &);
  Obj Gen_Code(Obj, Obj, Env &);
  Obj Untyped_Sgns(Obj, Env &);
  Obj Transitive_Closure__Next_Step(Obj, Obj, Env &);
  Obj To_Text__Is_Left_Par(Obj, Env &);
  Obj To_Text__Is_Right_Par(Obj, Env &);
  Obj Compile_To_C__Arity(Obj, Env &);
  Obj Gen_C_Decl__Arity(Obj, Env &);
  Obj Index_First(Obj, Obj, Env &);
  Obj And(Obj, Obj, Obj, Env &);
  Obj Or(Obj, Obj, Obj, Env &);
  Obj Ublock_Errors(Obj, Obj, Env &);
  Obj And_Then(Obj, Obj, Obj, Env &);
  Obj Or_Else(Obj, Obj, Obj, Env &);
  Obj All_Objects(Env &);
  Obj Intersection(Obj, Obj, Env &);
  Obj Gen_Eval_Code(Obj, Obj, Obj, Env &);
  Obj Difference(Obj, Obj, Env &);
  Obj Exprs_Wf_Errors(Obj, Obj, Env &);
  Obj Var_Scope(Obj, Obj, Obj, Env &);
  Obj Prg_Is_Wf(Obj, Env &);
  Obj Bool_Proc_Def(Obj, Obj, Obj, Env &);
  Obj Union(Obj, Obj, Env &);
  Obj To_C_Fn_Name(Obj, Obj, Env &);
  Obj Set_At(Obj, Obj, Obj, Env &);
  Obj Normalize_Union(Obj, Env &);
  Obj Join_Seqs(Obj, Obj, Obj, Env &);
  Obj Cls_Scope(Obj, Obj, Obj, Obj, Obj, Env &);
  Obj To_C_Fn_Name(Obj, Obj, Obj, Env &);
  Obj Mk_Array(Obj, Obj, Obj, Env &);
  Obj Cases_Wf_Errors(Obj, Obj, Env &);
  Obj Lookup(Obj, Obj, Obj, Env &);
  Obj Ext_Lookup(Obj, Obj, Obj, Env &);
  Obj Get_At(Obj, Obj, Obj, Env &);
  Obj Mk_Set(Obj, Obj, Obj, Env &);
  Obj Mk_Seq(Obj, Obj, Obj, Env &);
  Obj Mk_Tagged_Obj(Obj, Obj, Obj, Env &);
  Obj Call_Proc(Obj, Obj, Obj, Env &);
  Obj Is_Def(Obj, Obj, Obj, Obj, Env &);
  Obj Subexprs(Obj, Env &);
  Obj Call_Cls(Obj, Obj, Obj, Env &);
  Obj Mk_Map_From_Streams(Obj, Obj, Obj, Env &);
  Obj Is_Symbol(Obj, Env &);
  Obj Merge_Maps(Obj, Obj, Obj, Env &);
  Obj Only_Element_Or_Def_If_Empty(Obj, Obj, Env &);
  Obj First_Unused_Int_Var(Obj, Env &);
  Obj star(Obj, Obj, Env &);
  Obj Fn_Call_Is_Wf(Obj, Obj, Obj, Env &);
  Obj Rand_Sort_Pairs(Obj, Env &);
  Obj Syn_Fn_Defs_To_Named_Params(Obj, Obj, Env &);
  Obj Norm_Type(Obj, Env &);
  Obj Par_Parts(Obj, Env &);
  Obj Obj_Proc_Def(Obj, Obj, Obj, Obj, Env &);
  Obj Mk_Fn_Call(Obj, Obj, Obj, Env &);
  Obj Mk_Gen_Call(Obj, Obj, Obj, Obj, Env &);
  Obj Cart_Prod(Obj, Obj, Env &);
  Obj Get_Seq_Slice(Obj, Obj, Obj, Obj, Env &);
  Obj Lookup(Obj, Obj, Obj, Obj, Env &);
  Obj Ext_Lookup(Obj, Obj, Obj, Obj, Env &);
  Obj Cls_Scope(Obj, Obj, Obj, Obj, Env &);
  Obj Mk_Map(Obj, Obj, Obj, Obj, Env &);
  Obj Symbol_To_Token(Obj, Env &);
  Obj Create_Type_Map(Obj, Env &);
  Obj Undef_Type_Symbol_Errs__Make_Err_Obj(Obj, Env &);
  Obj Gen_Fn_Body(Obj, Env &);
  Obj Do_If_In(Obj, Obj, Obj, Env &);
  Obj Is_Almost_Def(Obj, Obj, Obj, Env &);
  Obj Gen_C_Decl__Extra_Params(Obj, Env &);
  Obj Rep_Seq(Obj, Obj, Env &);
  Obj Inc_Seq(Obj, Env &);
  Obj Norm_Type__Norm_Union_Type(Obj, Env &);
  Obj Intersection(Obj, Env &);
  Obj Desugar_Stmts(Obj, Obj, Env &);
  Obj Eval_Exprs_And_Add_To_Map(Obj, Obj, Obj, Obj, Env &);
  Obj Stmts_Wf_Errors(Obj, Obj, Env &);
  Obj Incompatibilities__Are_Syn_Compatible(Obj, Obj, Env &);
  Obj Mk_Assignment(Obj, Obj, Env &);
  Obj Sort_Exprs_First(Obj, Env &);
  Obj Mk_And_Expr(Obj, Env &);
  Obj Do_If_Not_In(Obj, Obj, Obj, Env &);
  Obj Mk_Named_Type_Memb_Test_Fn(Obj, Obj, Env &);
  Obj Norm_Type__Rem_Nesting(Obj, Env &);
  Obj Compile_To_C__Extra_Params(Obj, Env &);
  Obj Compile_To_C__Ret_Type_Str(Obj, Env &);
  Obj Gen_C_Decl__Ret_Type_Str(Obj, Env &);
  Obj Merge_Fns__Mk_Ptrn(Obj, Env &);
  Obj In(Obj, Obj, Env &);
  Obj Do_If_Not(Obj, Obj, Env &);
  Obj Do_If(Obj, Obj, Env &);
  Obj Intermix(Obj, Obj, Env &);
  Obj Merge_Values(Obj, Env &);
  Obj minus(Obj, Obj, Env &);
  Obj Syn_Fndef_To_Fndefs__Syn_Sgns_To_Named_Params(Obj, Env &);
  Obj Has_Return(Obj, Env &);
  Obj Types_Are_Wf__Top_Level_Refs(Obj, Env &);
  Obj Gen_Prg_Code(Obj, Env &);
  Obj Parse_Obj__Parse_Seq(Obj, Obj, Env &);
  Obj Includes(Obj, Obj, Env &);
  Obj Compile_To_C__Typesymb2str(Obj, Obj, Env &);
  Obj Action(Obj, Obj, Env &);
  Obj Arity(Obj, Env &);
  Obj Parse_Obj(Obj, Env &);
  Obj All(Obj, Env &);
  Obj Mk_Gen_Call(Obj, Obj, Obj, Env &);
  Obj Gen_Vector_Eval_Info(Obj, Env &);
  Obj Replace_Bound_Vars(Obj, Obj, Env &);
  Obj Simplify__Make(Obj, Env &);
  Obj Parse_Obj__Parse_Set(Obj, Obj, Env &);
  Obj Are_Compatible(Obj, Env &);
  Obj Is_Def__Could_Match(Obj, Obj, Obj, Obj, Env &);
  Obj To_Nary_Op(Obj, Obj, Obj, Env &);
  Obj Dupl_Elems(Obj, Env &);
  Obj Has_Top_Level_Break(Obj, Env &);
  Obj Sgn_Wf_Errors(Obj, Env &);
  Obj Get_Type_Symbols_To_Instantiate(Obj, Env &);
  Obj Tdef_Errs(Obj, Env &);
  Obj Undef_Type_Symbol_Errs(Obj, Obj, Env &);
  Obj brackets(Obj, Obj, Env &);
  Obj Syn_Fn_Def_To_Expr(Obj, Obj, Env &);
  Obj Transitive_Closure(Obj, Env &);
  Obj Incompatibilities(Obj, Env &);
  Obj Merge_And_Override(Obj, Obj, Env &);
  Obj Par_Tdef_Errs(Obj, Env &);
  Obj Capitalize(Obj, Env &);
  Obj Arity_Is_Correct(Obj, Obj, Env &);
  Obj Branch(Obj, Obj, Obj, Env &);
  Obj Untyped_Sgn(Obj, Env &);
  Obj Syn_Can_Break_Loop(Obj, Env &);
  Obj Undef_Type_Symbol_Errs__All_Type_Symbols(Obj, Env &);
  Obj Lower_Than(Obj, Obj, Env &);
  Obj Mk_And_Clause(Obj, Obj, Env &);
  Obj Partition(Obj, Env &);
  Obj To_Int(Obj, Env &);
  Obj Fndefs_Wf_Errors(Obj, Obj, Env &);
  Obj Are_Compatible__Are_Comp(Obj, Obj, Env &);
  Obj Get_Iter(Obj, Obj, Env &);
  Obj Is_Eq(Obj, Obj, Env &);
  Obj Gen_Eval_Code__Gen_Eval_Expr(Obj, Obj, Env &);
  Obj To_Text__Match_Idxs(Obj, Env &);
  Obj Gen_C_Decl(Obj, Env &);
  Obj Syn_Fns_Are_Compatible(Obj, Obj, Env &);
  Obj Replace_Expr_Fn(Obj, Env &);
  Obj Expr_Is_Wf(Obj, Obj, Env &);
  Obj To_Text__Quote(Obj, Env &);
  Obj Syn_Fndef_To_Fndefs(Obj, Obj, Env &);
  Obj Stmts_Wf_Errors(Obj, Obj, Obj, Obj, Env &);
  Obj Fndef_Wf_Errors(Obj, Obj, Env &);
  Obj Max(Obj, Env &);
  Obj Mk_Cls_Call(Obj, Obj, Obj, Env &);
  Obj Can_Break_Loop(Obj, Env &);
  Obj Cls_Vars(Obj, Env &);
  Obj Inst_Par_Type(Obj, Obj, Env &);
  Obj Inst_Tdef_Errs(Obj, Env &);
  Obj Fn_Def_Errs(Obj, Obj, Obj, Env &);
  Obj To_Text__To_Txt(Obj, Obj, Env &);
  Obj Select_Expr_Fn(Obj, Env &);
  Obj Gen_Code(Obj, Obj, Obj, Obj, Obj, Env &);
  Obj Gen_Eval_Code__Gen_Eval_Instr(Obj, Obj, Obj, Env &);
  Obj Is_Last_For_Sure(Obj, Env &);
  Obj Merge_Partitions(Obj, Env &);
  Obj Block_Wf_Errors(Obj, Obj, Env &);
  Obj Syn_Fndef_To_Fndefs__Mk_Fndef(Obj, Obj, Obj, Obj, Obj, Env &);
  Obj Parse_Obj__Parse_Objs(Obj, Obj, Obj, Env &);
  Obj Gen_Vars(Obj, Env &);
  Obj Parse_Obj__Parse_Obj(Obj, Obj, Env &);
  Obj To_C_Fn_Name(Obj, Env &);
  Obj Gen_Fn_Code(Obj, Env &);
  Obj Subseq(Obj, Obj, Obj, Obj, Env &);
  Obj Syn_Is_Last_For_Sure(Obj, Env &);
  Obj Gen_Eval_Info(Obj, Obj, Env &);
  Obj Stmts_Are_Wf(Obj, Obj, Obj, Obj, Env &);
  Obj Case_Wf_Errors(Obj, Obj, Env &);
  Obj Iter_Wf_Errors(Obj, Obj, Env &);
  Obj Never_Falls_Through(Obj, Env &);
  Obj Mergesort__Merge(Obj, Obj, Env &);
  Obj Types_Are_Wf(Obj, Env &);
  Obj Merge_Fns_Same_Name_And_Arity(Obj, Env &);
  Obj Mergesort(Obj, Env &);
  Obj Scalar_Vars(Obj, Env &);
  Obj To_Str(Obj, Env &);
  Obj Merge_Fns(Obj, Env &);
  Obj lower(Obj, Obj, Env &);
  Obj Gen_Vector_Eval_Info__Gen_Vector_Eval_Code(Obj, Obj, Obj, Env &);
  Obj Case_Is_Wf(Obj, Obj, Obj, Env &);
  Obj Gen_Type_Checking_Expr(Obj, Obj, Env &);
  Obj Fndefs_Are_Wf(Obj, Env &);
  Obj Vars_To_Declare(Obj, Env &);
  Obj Gen_C_Decl(Obj, Obj, Env &);
  Obj Are_Disjoint(Obj, Obj, Env &);
  Obj Inst_Req_Par_Types(Obj, Env &);
  Obj Gen_Eval_Info(Obj, Env &);
  Obj Special_Subexprs(Obj, Env &);
  Obj Parse_Obj__Parse_Tagged_Obj_Or_Symbol(Obj, Obj, Env &);
  Obj amp(Obj, Obj, Env &);
  Obj Rem_Syntax(Obj, Env &);
  Obj Extern_Vars__Special_Cases(Obj, Env &);
  Obj Simplify__Make(Obj, Obj, Obj, Obj, Obj, Env &);
  Obj Flow_Control_Can_Jump_Out(Obj, Obj, Env &);
  Obj Untyped_Sgn(Obj, Obj, Env &);
  Obj Fndef_Is_Wf(Obj, Obj, Env &);
  Obj To_Text__To_Txt(Obj, Env &);
  Obj Clause_Is_Wf(Obj, Obj, Env &);
  Obj Fndef_Wf_Errors(Obj, Obj, Obj, Obj, Env &);
  Obj To_Text__Wrap(Obj, Obj, Env &);
  Obj Fn_Call_Is_Wf__Could_Match(Obj, Obj, Obj, Env &);
  Obj Gen_Code(Obj, Env &);
  Obj Desugar_Clause(Obj, Obj, Env &);
  Obj Expr_Is_Wf__Rest_Is_Wf(Obj, Obj, Env &);
  Obj Compile(Obj, Env &);
  Obj Make_Scopes(Obj, Obj, Env &);
  Obj Parse_Obj__Parse_Map_Or_Tuple(Obj, Obj, Env &);
  Obj Syn_New_Vars(Obj, Env &);
  Obj Var_Decl(Obj, Env &);
  Obj Clause_Wf_Errors(Obj, Obj, Obj, Env &);
  Obj New_Vars(Obj, Env &);
  Obj Ptrn_Is_Wf(Obj, Obj, Env &);
  Obj Partitions(Obj, Env &);
  Obj To_C_Var_Name(Obj, Env &);
  Obj Stmt_Wf_Errors(Obj, Obj, Obj, Obj, Env &);
  Obj Ptrn_Wf_Errors(Obj, Obj, Env &);
  Obj Stmt_Is_Wf(Obj, Obj, Obj, Env &);
  Obj Gen_Ptrn_Matching_Code(Obj, Obj, Obj, Env &);
  Obj Type_Wf_Errors(Obj, Env &);
  Obj Type_Is_Wf(Obj, Obj, Env &);
  Obj Ordinary_Subexprs(Obj, Env &);
  Obj Extern_Vars(Obj, Env &);
  Obj Tokenize(Obj, Env &);
  Obj Fast_Tokenize(Obj, Env &);
  Obj Wf_Errors(Obj, Env &);
  Obj Desugar_Stmt(Obj, Obj, Env &);
  Obj Gen_Iter_Code(Obj, Obj, Env &);
  Obj To_C_Expr(Obj, Env &);
  Obj Compile_To_C(Obj, Obj, Obj, Env &);
  Obj Gen_Code(Obj, Obj, Obj, Obj, Env &);
  Obj Gen_Type_Checking_Code(Obj, Obj, Obj, Env &);
  Obj Expr_Wf_Errors(Obj, Obj, Env &);
  Obj To_C_Expr(Obj, Obj, Env &);
  Obj Desugar_Expr(Obj, Obj, Env &);
  Obj Gen_Eval_Code(Obj, Obj, Env &);
  Obj Compile_To_C(Obj, Env &);
  Obj Compile_To_C(Obj, Obj, Env &);
  
  
  
  
  bool is_any(Obj p0)
  {
    bool b0;
  
    b0 = true;
    return b0;
  }
  
  
  bool is_int(Obj p0)
  {
    bool b0;
  
    b0 = is_int(p0);
    return b0;
  }
  
  
  bool is_atom(Obj p0)
  {
    bool b0;
  
    b0 = is_symb(p0);
    return b0;
  }
  
  
  bool is_syntype(Obj p0)
  {
    bool b0;
  
    b0 = is_type(p0);
    return b0;
  }
  
  
  bool is_tautology(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_true, p0);
    return b0;
  }
  
  
  bool is_objfnname(Obj p0)
  {
    bool b0;
  
    b0 = is_fnsymbol(p0);
    return b0;
  }
  
  
  bool is_nat(Obj p0)
  {
    bool b0;
  
    b0 = is_int(p0) && (get_int_val(p0) >= 0);
    return b0;
  }
  
  
  bool is_nznat(Obj p0)
  {
    bool b0;
  
    b0 = is_int(p0) && (get_int_val(p0) >= 1);
    return b0;
  }
  
  
  bool is_negint(Obj p0)
  {
    bool b0;
  
    b0 = is_int(p0) && (get_int_val(p0) <= -1);
    return b0;
  }
  
  
  bool is_bintree(Obj p0)
  {
    bool b0;
  
    b0 = is_bintree__0(p0);
    return b0;
  }
  
  
  bool is_bool(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_true, p0);
    if (b0)
    {
      goto block_0_end;
    }
    b0 = are_eq(S_false, p0);
    if (b0)
    {
      goto block_0_end;
    }
    block_0_end:;
    return b0;
  }
  
  
  bool is_exttype(Obj p0)
  {
    bool b0;
  
    b0 = is_type(p0);
    if (b0)
    {
      goto block_1_end;
    }
    b0 = is_clstype(p0);
    if (b0)
    {
      goto block_1_end;
    }
    block_1_end:;
    return b0;
  }
  
  
  bool is_subexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_expr(p0);
    if (b0)
    {
      goto block_2_end;
    }
    b0 = is_condexpr(p0);
    if (b0)
    {
      goto block_2_end;
    }
    block_2_end:;
    return b0;
  }
  
  
  bool is_extexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_expr(p0);
    if (b0)
    {
      goto block_3_end;
    }
    b0 = is_clsexpr(p0);
    if (b0)
    {
      goto block_3_end;
    }
    block_3_end:;
    return b0;
  }
  
  
  bool is_parseresult(Obj p0)
  {
    bool b0;
  
    b0 = is_parseerror(p0);
    if (b0)
    {
      goto block_4_end;
    }
    b0 = is_parsesuccess(p0);
    if (b0)
    {
      goto block_4_end;
    }
    block_4_end:;
    return b0;
  }
  
  
  bool is_synsubexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_synexpr(p0);
    if (b0)
    {
      goto block_5_end;
    }
    b0 = is_syncondexpr(p0);
    if (b0)
    {
      goto block_5_end;
    }
    block_5_end:;
    return b0;
  }
  
  
  bool is_extsynexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_synexpr(p0);
    if (b0)
    {
      goto block_6_end;
    }
    b0 = is_synclsexpr(p0);
    if (b0)
    {
      goto block_6_end;
    }
    block_6_end:;
    return b0;
  }
  
  
  bool is_typesymbol(Obj p0)
  {
    bool b0;
  
    b0 = is_basictypesymbol(p0);
    if (b0)
    {
      goto block_7_end;
    }
    b0 = is_partypesymbol(p0);
    if (b0)
    {
      goto block_7_end;
    }
    block_7_end:;
    return b0;
  }
  
  
  bool is_objexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_atomicexpr(p0);
    if (b0)
    {
      goto block_8_end;
    }
    b0 = is_natobjop(p0);
    if (b0)
    {
      goto block_8_end;
    }
    block_8_end:;
    return b0;
  }
  
  
  bool is_procdef(Obj p0)
  {
    bool b0;
  
    b0 = is_objprocdef(p0);
    if (b0)
    {
      goto block_9_end;
    }
    b0 = is_boolprocdef(p0);
    if (b0)
    {
      goto block_9_end;
    }
    block_9_end:;
    return b0;
  }
  
  
  bool is_char(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_10_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_char, l0);
    if (!b0)
    {
      goto block_10_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_10_end:;
    return b0;
  }
  
  
  bool is_partype(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_parenthesis, p0);
    if (b0)
    {
      goto block_11_end;
    }
    b0 = are_eq(S_bracket, p0);
    if (b0)
    {
      goto block_11_end;
    }
    b0 = are_eq(S_brace, p0);
    if (b0)
    {
      goto block_11_end;
    }
    block_11_end:;
    return b0;
  }
  
  
  bool is_obj(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_12_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_object, l0);
    if (!b0)
    {
      goto block_12_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_any(l0);
    block_12_end:;
    return b0;
  }
  
  
  bool is_parsesuccess(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_13_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_obj, l0);
    if (!b0)
    {
      goto block_13_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_any(l0);
    block_13_end:;
    return b0;
  }
  
  
  bool is_symbobj(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_14_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_object, l0);
    if (!b0)
    {
      goto block_14_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_14_end:;
    return b0;
  }
  
  
  bool is_basictypesymbol(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_15_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_type_symbol, l0);
    if (!b0)
    {
      goto block_15_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_15_end:;
    return b0;
  }
  
  
  bool is_typevar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_16_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_type_var, l0);
    if (!b0)
    {
      goto block_16_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_16_end:;
    return b0;
  }
  
  
  bool is_intvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_17_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ivar, l0);
    if (!b0)
    {
      goto block_17_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_17_end:;
    return b0;
  }
  
  
  bool is_boolvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_18_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_bvar, l0);
    if (!b0)
    {
      goto block_18_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_18_end:;
    return b0;
  }
  
  
  bool is_streamvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_19_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_svar, l0);
    if (!b0)
    {
      goto block_19_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_19_end:;
    return b0;
  }
  
  
  bool is_setitvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_20_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_it_var, l0);
    if (!b0)
    {
      goto block_20_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_20_end:;
    return b0;
  }
  
  
  bool is_seqitvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_21_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_it_var, l0);
    if (!b0)
    {
      goto block_21_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_21_end:;
    return b0;
  }
  
  
  bool is_mapitvar(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_22_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_it_var, l0);
    if (!b0)
    {
      goto block_22_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_22_end:;
    return b0;
  }
  
  
  bool is_symbtype(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_23_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_symb_type, l0);
    if (!b0)
    {
      goto block_23_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_symbobj(l0);
    block_23_end:;
    return b0;
  }
  
  
  bool is_typeref(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_24_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_type_ref, l0);
    if (!b0)
    {
      goto block_24_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_typesymbol(l0);
    block_24_end:;
    return b0;
  }
  
  
  bool is_boolfnname(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_25_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_memb_test, l0);
    if (!b0)
    {
      goto block_25_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_typesymbol(l0);
    block_25_end:;
    return b0;
  }
  
  
  bool is_intexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_int(p0);
    if (b0)
    {
      goto block_26_end;
    }
    b0 = is_intvar(p0);
    if (b0)
    {
      goto block_26_end;
    }
    b0 = is_natintop(p0);
    if (b0)
    {
      goto block_26_end;
    }
    block_26_end:;
    return b0;
  }
  
  
  bool is_itvar(Obj p0)
  {
    bool b0;
  
    b0 = is_setitvar(p0);
    if (b0)
    {
      goto block_27_end;
    }
    b0 = is_seqitvar(p0);
    if (b0)
    {
      goto block_27_end;
    }
    b0 = is_mapitvar(p0);
    if (b0)
    {
      goto block_27_end;
    }
    block_27_end:;
    return b0;
  }
  
  
  bool is_anyexpr(Obj p0)
  {
    bool b0;
  
    b0 = is_objexpr(p0);
    if (b0)
    {
      goto block_28_end;
    }
    b0 = is_boolexpr(p0);
    if (b0)
    {
      goto block_28_end;
    }
    b0 = is_intexpr(p0);
    if (b0)
    {
      goto block_28_end;
    }
    block_28_end:;
    return b0;
  }
  
  
  bool is_neset(Obj p0)
  {
    Obj l0;
    bool b0;
    SetIter s0;
  
    if (!is_ne_set(p0))
    {
      b0 = false;
      goto block_29_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l0 = get_curr_obj(s0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_29_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_29_end:;
    return b0;
  }
  
  
  bool is_neseq(Obj p0)
  {
    Obj l0;
    bool b0;
    SeqIter q0;
  
    if (!is_ne_seq(p0))
    {
      b0 = false;
      goto block_30_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l0 = get_curr_obj(q0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_30_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_30_end:;
    return b0;
  }
  
  
  bool is_set(Obj p0)
  {
    Obj l0;
    bool b0;
    SetIter s0;
  
    if (are_eq(p0, empty_set))
    {
      b0 = true;
      goto block_31_end;
    }
    if (!is_ne_set(p0))
    {
      b0 = false;
      goto block_31_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l0 = get_curr_obj(s0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_31_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_31_end:;
    return b0;
  }
  
  
  bool is_seq(Obj p0)
  {
    Obj l0;
    bool b0;
    SeqIter q0;
  
    if (are_eq(p0, empty_seq))
    {
      b0 = true;
      goto block_32_end;
    }
    if (!is_ne_seq(p0))
    {
      b0 = false;
      goto block_32_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l0 = get_curr_obj(q0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_32_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_32_end:;
    return b0;
  }
  
  
  bool is_prgdecl(Obj p0)
  {
    bool b0;
  
    b0 = is_syntypedef(p0);
    if (b0)
    {
      goto block_33_end;
    }
    b0 = is_synpartypedef(p0);
    if (b0)
    {
      goto block_33_end;
    }
    b0 = is_synfndef(p0);
    if (b0)
    {
      goto block_33_end;
    }
    b0 = is_synusingblock(p0);
    if (b0)
    {
      goto block_33_end;
    }
    block_33_end:;
    return b0;
  }
  
  
  bool is_leafobj(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_34_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_object, l0);
    if (!b0)
    {
      goto block_34_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_int(l0);
    if (b0)
    {
      goto block_35_end;
    }
    b0 = is_atom(l0);
    if (b0)
    {
      goto block_35_end;
    }
    block_35_end:;
    block_34_end:;
    return b0;
  }
  
  
  bool is_atomicexpr(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_empty_set, p0);
    if (b0)
    {
      goto block_36_end;
    }
    b0 = are_eq(S_empty_seq, p0);
    if (b0)
    {
      goto block_36_end;
    }
    b0 = are_eq(S_empty_map, p0);
    if (b0)
    {
      goto block_36_end;
    }
    b0 = is_leafobj(p0);
    if (b0)
    {
      goto block_36_end;
    }
    b0 = is_objvar(p0);
    if (b0)
    {
      goto block_36_end;
    }
    block_36_end:;
    return b0;
  }
  
  
  bool is_map(Obj p0)
  {
    Obj l0;
    bool b0;
    MapIter m0;
  
    if (are_eq(p0, empty_map))
    {
      b0 = true;
      goto block_37_end;
    }
    if (!is_ne_map(p0))
    {
      b0 = false;
      goto block_37_end;
    }
    get_map_iter(m0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l0 = get_curr_key(m0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_37_end;
      }
      l0 = get_curr_value(m0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_37_end;
      }
      move_forward(m0);
    }
    b0 = true;
    block_37_end:;
    return b0;
  }
  
  
  bool is_tuple(Obj p0)
  {
    Obj l0;
    bool b0;
    MapIter m0;
  
    if (are_eq(p0, empty_map))
    {
      b0 = true;
      goto block_38_end;
    }
    if (!is_ne_map(p0))
    {
      b0 = false;
      goto block_38_end;
    }
    get_map_iter(m0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l0 = get_curr_key(m0);
      b0 = is_atom(l0);
      if (!b0)
      {
        goto block_38_end;
      }
      l0 = get_curr_value(m0);
      b0 = is_any(l0);
      if (!b0)
      {
        goto block_38_end;
      }
      move_forward(m0);
    }
    b0 = true;
    block_38_end:;
    return b0;
  }
  
  
  bool is_uniontype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    SetIter s0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_39_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_union_type, l0);
    if (!b0)
    {
      goto block_39_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_40_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_type(l1);
      if (!b0)
      {
        goto block_40_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_40_end:;
    block_39_end:;
    return b0;
  }
  
  
  bool is_multparseresult(Obj p0)
  {
    Obj l0;
    bool b0;
    SeqIter q0;
  
    b0 = is_parseerror(p0);
    if (b0)
    {
      goto block_41_end;
    }
    if (are_eq(p0, empty_seq))
    {
      b0 = true;
      goto block_42_end;
    }
    if (!is_ne_seq(p0))
    {
      b0 = false;
      goto block_42_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l0 = get_curr_obj(q0);
      b0 = is_parsesuccess(l0);
      if (!b0)
      {
        goto block_42_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_42_end:;
    if (b0)
    {
      goto block_41_end;
    }
    block_41_end:;
    return b0;
  }
  
  
  bool is_objpartset(Obj p0)
  {
    Obj l0;
    bool b0;
    SetIter s0;
  
    if (!is_ne_set(p0))
    {
      b0 = false;
      goto block_43_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l0 = get_curr_obj(s0);
      b0 = are_eq(S_symbols, l0);
      if (b0)
      {
        goto block_44_end;
      }
      b0 = are_eq(S_tagged_objs, l0);
      if (b0)
      {
        goto block_44_end;
      }
      b0 = is_objpart(l0);
      if (b0)
      {
        goto block_44_end;
      }
      block_44_end:;
      if (!b0)
      {
        goto block_43_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_43_end:;
    return b0;
  }
  
  
  bool is_string(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    SeqIter q0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_45_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_string, l0);
    if (!b0)
    {
      goto block_45_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_seq))
    {
      b0 = true;
      goto block_46_end;
    }
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_46_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_nat(l1);
      if (!b0)
      {
        goto block_46_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_46_end:;
    block_45_end:;
    return b0;
  }
  
  
  bool is_anyvar(Obj p0)
  {
    bool b0;
  
    b0 = is_intvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    b0 = is_objvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    b0 = is_vecvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    b0 = is_boolvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    b0 = is_streamvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    b0 = is_itvar(p0);
    if (b0)
    {
      goto block_47_end;
    }
    block_47_end:;
    return b0;
  }
  
  
  bool is_fncallparam(Obj p0)
  {
    bool b0;
  
    b0 = is_vecvar(p0);
    if (b0)
    {
      goto block_48_end;
    }
    b0 = is_streamvar(p0);
    if (b0)
    {
      goto block_48_end;
    }
    b0 = is_itvar(p0);
    if (b0)
    {
      goto block_48_end;
    }
    b0 = is_objexpr(p0);
    if (b0)
    {
      goto block_48_end;
    }
    b0 = is_boolexpr(p0);
    if (b0)
    {
      goto block_48_end;
    }
    b0 = is_intexpr(p0);
    if (b0)
    {
      goto block_48_end;
    }
    block_48_end:;
    return b0;
  }
  
  
  bool is_synprg(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    SeqIter q0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_49_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_prg, l0);
    if (!b0)
    {
      goto block_49_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_seq))
    {
      b0 = true;
      goto block_50_end;
    }
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_50_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_prgdecl(l1);
      if (!b0)
      {
        goto block_50_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_50_end:;
    block_49_end:;
    return b0;
  }
  
  
  bool is_leaftype(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_type_any, p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = are_eq(S_atom_type, p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = are_eq(S_empty_seq_type, p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = are_eq(S_empty_set_type, p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = are_eq(S_empty_map_type, p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = is_symbtype(p0);
    if (b0)
    {
      goto block_51_end;
    }
    b0 = is_inttype(p0);
    if (b0)
    {
      goto block_51_end;
    }
    block_51_end:;
    return b0;
  }
  
  
  bool is_ublockerr(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    SetIter s0;
  
    b0 = is_tdefusererr(p0);
    if (b0)
    {
      goto block_52_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_53_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_dupl_type_pars, l0);
    if (!b0)
    {
      goto block_53_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_54_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_var(l1);
      if (!b0)
      {
        goto block_54_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_54_end:;
    block_53_end:;
    if (b0)
    {
      goto block_52_end;
    }
    block_52_end:;
    return b0;
  }
  
  
  bool is_punctsymb(Obj p0)
  {
    Obj l0;
    bool b0;
  
    b0 = are_eq(S_comma, p0);
    if (b0)
    {
      goto block_55_end;
    }
    b0 = are_eq(S_right_arrow, p0);
    if (b0)
    {
      goto block_55_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_56_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_left, l0);
    if (!b0)
    {
      goto block_56_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_partype(l0);
    block_56_end:;
    if (b0)
    {
      goto block_55_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_57_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_right, l0);
    if (!b0)
    {
      goto block_57_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_partype(l0);
    block_57_end:;
    if (b0)
    {
      goto block_55_end;
    }
    block_55_end:;
    return b0;
  }
  
  
  bool is_parseerror(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_58_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_parser_error, l0);
    if (!b0)
    {
      goto block_58_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_59_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_59_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_59_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_token))
    {
      b0 = false;
      goto block_59_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_59_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_59_end:;
    block_58_end:;
    return b0;
  }
  
  
  bool is_parseintermres(Obj p0)
  {
    Obj l0;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_ne_map(p0))
    {
      b0 = false;
      goto block_60_end;
    }
    i0 = get_map_size(p0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_60_end;
    }
    get_map_iter(m0, p0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_60_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_obj))
    {
      b0 = false;
      goto block_60_end;
    }
    l0 = get_curr_value(m0);
    b0 = is_any(l0);
    if (!b0)
    {
      goto block_60_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_60_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_offset))
    {
      b0 = false;
      goto block_60_end;
    }
    l0 = get_curr_value(m0);
    b0 = is_nat(l0);
    if (!b0)
    {
      goto block_60_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_60_end:;
    return b0;
  }
  
  
  bool is_operator(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_plus, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_minus, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_star, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_slash, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_exp, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_amp, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_lower, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_greater, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_lower_eq, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_greater_eq, p0);
    if (b0)
    {
      goto block_61_end;
    }
    b0 = are_eq(S_brackets, p0);
    if (b0)
    {
      goto block_61_end;
    }
    block_61_end:;
    return b0;
  }
  
  
  bool is_token(Obj p0)
  {
    Obj l0;
    bool b0;
  
    b0 = is_char(p0);
    if (b0)
    {
      goto block_62_end;
    }
    b0 = is_string(p0);
    if (b0)
    {
      goto block_62_end;
    }
    b0 = is_int(p0);
    if (b0)
    {
      goto block_62_end;
    }
    b0 = is_punctsymb(p0);
    if (b0)
    {
      goto block_62_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_63_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_symbol, l0);
    if (!b0)
    {
      goto block_63_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_63_end:;
    if (b0)
    {
      goto block_62_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_64_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_label, l0);
    if (!b0)
    {
      goto block_64_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_64_end:;
    if (b0)
    {
      goto block_62_end;
    }
    block_62_end:;
    return b0;
  }
  
  
  bool is_objpart(Obj p0)
  {
    Obj l0;
    bool b0;
  
    b0 = are_eq(S_integers, p0);
    if (b0)
    {
      goto block_65_end;
    }
    b0 = are_eq(S_sets, p0);
    if (b0)
    {
      goto block_65_end;
    }
    b0 = are_eq(S_sequences, p0);
    if (b0)
    {
      goto block_65_end;
    }
    b0 = are_eq(S_maps, p0);
    if (b0)
    {
      goto block_65_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_66_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_symbol, l0);
    if (!b0)
    {
      goto block_66_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_66_end:;
    if (b0)
    {
      goto block_65_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_67_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tagged_obj, l0);
    if (!b0)
    {
      goto block_67_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_67_end:;
    if (b0)
    {
      goto block_65_end;
    }
    block_65_end:;
    return b0;
  }
  
  
  bool is_point(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_68_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_point, l0);
    if (!b0)
    {
      goto block_68_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_69_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_69_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_69_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_x))
    {
      b0 = false;
      goto block_69_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_rat(l1);
    if (!b0)
    {
      goto block_69_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_69_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_y))
    {
      b0 = false;
      goto block_69_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_rat(l1);
    if (!b0)
    {
      goto block_69_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_69_end:;
    block_68_end:;
    return b0;
  }
  
  
  bool is_condexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_70_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cond_expr, l0);
    if (!b0)
    {
      goto block_70_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_71_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_71_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_71_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_71_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_71_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_71_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_71_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_71_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_71_end:;
    block_70_end:;
    return b0;
  }
  
  
  bool is_tagtype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_72_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tag_type, l0);
    if (!b0)
    {
      goto block_72_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_73_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_73_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_73_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj_type))
    {
      b0 = false;
      goto block_73_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_73_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_73_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tag_type))
    {
      b0 = false;
      goto block_73_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_73_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_73_end:;
    block_72_end:;
    return b0;
  }
  
  
  bool is_lexererror(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_74_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_lexer_error, l0);
    if (!b0)
    {
      goto block_74_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_75_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_75_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_75_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_col))
    {
      b0 = false;
      goto block_75_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_75_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_75_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_line))
    {
      b0 = false;
      goto block_75_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_75_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_75_end:;
    block_74_end:;
    return b0;
  }
  
  
  bool is_syntypedef(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_76_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_typedef, l0);
    if (!b0)
    {
      goto block_76_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_77_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_77_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_77_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_77_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basictypesymbol(l1);
    if (!b0)
    {
      goto block_77_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_77_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_77_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_syntype(l1);
    if (!b0)
    {
      goto block_77_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_77_end:;
    block_76_end:;
    return b0;
  }
  
  
  bool is_syncondexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_78_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cond_expr, l0);
    if (!b0)
    {
      goto block_78_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_79_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_79_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_79_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_79_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_79_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_79_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_79_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_79_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_79_end:;
    block_78_end:;
    return b0;
  }
  
  
  bool is_vecvar(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_80_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_vvar, l0);
    if (!b0)
    {
      goto block_80_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_81_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_81_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_81_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_id))
    {
      b0 = false;
      goto block_81_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_81_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_81_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_81_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_81_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_81_end:;
    block_80_end:;
    return b0;
  }
  
  
  bool is_type(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_type_any, p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = are_eq(S_atom_type, p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_typevar(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_symbtype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_inttype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_typeref(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_settype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_seqtype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_maptype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_tupletype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_tagtype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    b0 = is_uniontype(p0);
    if (b0)
    {
      goto block_82_end;
    }
    block_82_end:;
    return b0;
  }
  
  
  bool is_basicuntypedsgn(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_83_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_untyped_sgn, l0);
    if (!b0)
    {
      goto block_83_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_84_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_84_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_84_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_84_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_84_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_84_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_84_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_84_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_84_end:;
    block_83_end:;
    return b0;
  }
  
  
  bool is_condmatchaction(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_85_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cond_match_action, l0);
    if (!b0)
    {
      goto block_85_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_86_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_86_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_86_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_86_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_86_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_86_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_action))
    {
      b0 = false;
      goto block_86_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_finalmatchaction(l1);
    if (!b0)
    {
      goto block_86_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_86_end:;
    block_85_end:;
    return b0;
  }
  
  
  bool is_builtin(Obj p0)
  {
    bool b0;
  
    b0 = are_eq(S_neg, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_add, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_counter, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_str, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_symb, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_at, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_len, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_slice, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_cat, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_rev, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_set, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_mset, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_isort, p0);
    if (b0)
    {
      goto block_87_end;
    }
    b0 = are_eq(S_list_to_seq, p0);
    if (b0)
    {
      goto block_87_end;
    }
    block_87_end:;
    return b0;
  }
  
  
  bool is_parseintermmultres(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_ne_map(p0))
    {
      b0 = false;
      goto block_88_end;
    }
    i0 = get_map_size(p0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_88_end;
    }
    get_map_iter(m0, p0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_88_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_objs))
    {
      b0 = false;
      goto block_88_end;
    }
    l0 = get_curr_value(m0);
    if (are_eq(l0, empty_seq))
    {
      b0 = true;
      goto block_89_end;
    }
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_89_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_any(l1);
      if (!b0)
      {
        goto block_89_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_89_end:;
    if (!b0)
    {
      goto block_88_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_88_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_offset))
    {
      b0 = false;
      goto block_88_end;
    }
    l0 = get_curr_value(m0);
    b0 = is_nat(l0);
    if (!b0)
    {
      goto block_88_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_88_end:;
    return b0;
  }
  
  
  bool is_maptype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = are_eq(S_empty_map_type, p0);
    if (b0)
    {
      goto block_90_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_91_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_type, l0);
    if (!b0)
    {
      goto block_91_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_92_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_92_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_92_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_type))
    {
      b0 = false;
      goto block_92_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_92_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_92_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_type))
    {
      b0 = false;
      goto block_92_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_92_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_92_end:;
    block_91_end:;
    if (b0)
    {
      goto block_90_end;
    }
    block_90_end:;
    return b0;
  }
  
  
  bool is_var(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_94_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_var, l0);
    if (!b0)
    {
      goto block_94_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_94_end:;
    if (b0)
    {
      goto block_93_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_95_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fn_par, l0);
    if (!b0)
    {
      goto block_95_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_95_end:;
    if (b0)
    {
      goto block_93_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_96_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_unique_var, l0);
    if (!b0)
    {
      goto block_96_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_96_end:;
    if (b0)
    {
      goto block_93_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_97_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_named_par, l0);
    if (!b0)
    {
      goto block_97_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_97_end:;
    if (b0)
    {
      goto block_93_end;
    }
    block_93_end:;
    return b0;
  }
  
  
  bool is_settype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = are_eq(S_empty_set_type, p0);
    if (b0)
    {
      goto block_98_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_99_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_type, l0);
    if (!b0)
    {
      goto block_99_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_100_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_100_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_100_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_nonempty))
    {
      b0 = false;
      goto block_100_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bool(l1);
    if (!b0)
    {
      goto block_100_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_100_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_elem_type))
    {
      b0 = false;
      goto block_100_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_100_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_100_end:;
    block_99_end:;
    if (b0)
    {
      goto block_98_end;
    }
    block_98_end:;
    return b0;
  }
  
  
  bool is_rat(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = is_int(p0);
    if (b0)
    {
      goto block_101_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_102_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_rat, l0);
    if (!b0)
    {
      goto block_102_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_103_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_103_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_103_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_den))
    {
      b0 = false;
      goto block_103_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_int(l1) && (get_int_val(l1) >= 2);
    if (!b0)
    {
      goto block_103_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_103_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_num))
    {
      b0 = false;
      goto block_103_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_int(l1);
    if (!b0)
    {
      goto block_103_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_103_end:;
    block_102_end:;
    if (b0)
    {
      goto block_101_end;
    }
    block_101_end:;
    return b0;
  }
  
  
  bool is_clstype(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_104_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_type, l0);
    if (!b0)
    {
      goto block_104_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_105_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_105_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_105_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_in_types))
    {
      b0 = false;
      goto block_105_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_106_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_type(l2);
      if (!b0)
      {
        goto block_106_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_106_end:;
    if (!b0)
    {
      goto block_105_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_105_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_out_type))
    {
      b0 = false;
      goto block_105_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_105_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_105_end:;
    block_104_end:;
    return b0;
  }
  
  
  bool is_partypesymbol(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_107_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_par_type_symbol, l0);
    if (!b0)
    {
      goto block_107_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_108_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_108_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_108_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_108_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_109_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_type(l2);
      if (!b0)
      {
        goto block_109_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_109_end:;
    if (!b0)
    {
      goto block_108_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_108_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_symbol))
    {
      b0 = false;
      goto block_108_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basictypesymbol(l1);
    if (!b0)
    {
      goto block_108_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_108_end:;
    block_107_end:;
    return b0;
  }
  
  
  bool is_syncase(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_110_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_case, l0);
    if (!b0)
    {
      goto block_110_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_111_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_111_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_111_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_111_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_111_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_111_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_patterns))
    {
      b0 = false;
      goto block_111_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_112_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_pattern(l2);
      if (!b0)
      {
        goto block_112_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_112_end:;
    if (!b0)
    {
      goto block_111_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_111_end:;
    block_110_end:;
    return b0;
  }
  
  
  bool is_clsdef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_113_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_def, l0);
    if (!b0)
    {
      goto block_113_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_114_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_114_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_114_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_114_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_115_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_115_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_115_end:;
    if (!b0)
    {
      goto block_114_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_114_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_114_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_114_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_114_end:;
    block_113_end:;
    return b0;
  }
  
  
  bool is_matchaction(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = is_finalmatchaction(p0);
    if (b0)
    {
      goto block_116_end;
    }
    b0 = is_condmatchaction(p0);
    if (b0)
    {
      goto block_116_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_117_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_match_action, l0);
    if (!b0)
    {
      goto block_117_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_118_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_118_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_118_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_action))
    {
      b0 = false;
      goto block_118_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_matchaction(l1);
    if (!b0)
    {
      goto block_118_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_118_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_clause))
    {
      b0 = false;
      goto block_118_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_118_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_118_end:;
    block_117_end:;
    if (b0)
    {
      goto block_116_end;
    }
    block_116_end:;
    return b0;
  }
  
  
  bool is_ccodeoutput(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_ne_map(p0))
    {
      b0 = false;
      goto block_119_end;
    }
    i0 = get_map_size(p0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_119_end;
    }
    get_map_iter(m0, p0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_119_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_body))
    {
      b0 = false;
      goto block_119_end;
    }
    l0 = get_curr_value(m0);
    if (are_eq(l0, empty_seq))
    {
      b0 = true;
      goto block_120_end;
    }
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_120_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_string(l1);
      if (!b0)
      {
        goto block_120_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_120_end:;
    if (!b0)
    {
      goto block_119_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_119_end;
    }
    l0 = get_curr_key(m0);
    if (!are_eq(l0, S_header))
    {
      b0 = false;
      goto block_119_end;
    }
    l0 = get_curr_value(m0);
    if (are_eq(l0, empty_seq))
    {
      b0 = true;
      goto block_121_end;
    }
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_121_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_string(l1);
      if (!b0)
      {
        goto block_121_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_121_end:;
    if (!b0)
    {
      goto block_119_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_119_end:;
    return b0;
  }
  
  
  bool is_synclsexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_122_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_expr, l0);
    if (!b0)
    {
      goto block_122_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_123_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_123_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_123_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_123_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_123_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_123_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_123_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_124_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_125_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_var, l3);
      if (!b0)
      {
        goto block_125_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_125_end:;
      if (!b0)
      {
        goto block_124_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_124_end:;
    if (!b0)
    {
      goto block_123_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_123_end:;
    block_122_end:;
    return b0;
  }
  
  
  bool is_bintree__0(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = are_eq(S_leaf, p0);
    if (b0)
    {
      goto block_126_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_127_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_bin_tree, l0);
    if (!b0)
    {
      goto block_127_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_128_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_128_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bintree__0(l1);
    if (!b0)
    {
      goto block_128_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bintree__0(l1);
    if (!b0)
    {
      goto block_128_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_128_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_any(l1);
    if (!b0)
    {
      goto block_128_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_128_end:;
    block_127_end:;
    if (b0)
    {
      goto block_126_end;
    }
    block_126_end:;
    return b0;
  }
  
  
  bool is_synusingblock(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_129_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_using_block, l0);
    if (!b0)
    {
      goto block_129_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_130_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_130_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_130_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_fn_defs))
    {
      b0 = false;
      goto block_130_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_131_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synfndef(l2);
      if (!b0)
      {
        goto block_131_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_131_end:;
    if (!b0)
    {
      goto block_130_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_130_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_signatures))
    {
      b0 = false;
      goto block_130_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_132_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synsgn(l2);
      if (!b0)
      {
        goto block_132_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_132_end:;
    if (!b0)
    {
      goto block_130_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_130_end:;
    block_129_end:;
    return b0;
  }
  
  
  bool is_untypedsgn(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SetIter s0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_133_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_untyped_sgn, l0);
    if (!b0)
    {
      goto block_133_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_134_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 3)))
    {
      b0 = false;
      goto block_134_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_134_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_134_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_134_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_134_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_134_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_134_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_named_params))
      {
        l1 = get_curr_value(m0);
        if (!is_ne_set(l1))
        {
          b0 = false;
          goto block_135_end;
        }
        get_set_iter(s0, l1);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          b0 = is_basicuntypedsgn(l2);
          if (!b0)
          {
            goto block_135_end;
          }
          move_forward(s0);
        }
        b0 = true;
        block_135_end:;
        if (!b0)
        {
          goto block_134_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_134_end:;
    block_133_end:;
    return b0;
  }
  
  
  bool is_tupletype(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SetIter s0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_136_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tuple_type, l0);
    if (!b0)
    {
      goto block_136_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_137_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      if (!is_ne_map(l1))
      {
        b0 = false;
        goto block_138_end;
      }
      i0 = get_map_size(l1);
      if (!((i0 >= 3) & (i0 <= 3)))
      {
        b0 = false;
        goto block_138_end;
      }
      get_map_iter(m0, l1);
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_type))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_type(l2);
      if (!b0)
      {
        goto block_138_end;
      }
      move_forward(m0);
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_label))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_symbobj(l2);
      if (!b0)
      {
        goto block_138_end;
      }
      move_forward(m0);
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_optional))
      {
        b0 = false;
        goto block_138_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_bool(l2);
      if (!b0)
      {
        goto block_138_end;
      }
      move_forward(m0);
      b0 = is_out_of_range(m0);
      block_138_end:;
      if (!b0)
      {
        goto block_137_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_137_end:;
    block_136_end:;
    return b0;
  }
  
  
  bool is_synpartypedef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_139_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_par_typedef, l0);
    if (!b0)
    {
      goto block_139_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_140_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_140_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basictypesymbol(l1);
    if (!b0)
    {
      goto block_140_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_syntype(l1);
    if (!b0)
    {
      goto block_140_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_140_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_141_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_typevar(l2);
      if (!b0)
      {
        goto block_141_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_141_end:;
    if (!b0)
    {
      goto block_140_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_140_end:;
    block_139_end:;
    return b0;
  }
  
  
  bool is_boolprocdef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_142_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_bool_proc_def, l0);
    if (!b0)
    {
      goto block_142_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_143_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_143_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_144_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_144_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_144_end:;
    if (!b0)
    {
      goto block_143_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolfnname(l1);
    if (!b0)
    {
      goto block_143_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_143_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_143_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_143_end:;
    block_142_end:;
    return b0;
  }
  
  
  bool is_clsexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_145_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_expr, l0);
    if (!b0)
    {
      goto block_145_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_146_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_146_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_146_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_146_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_146_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_146_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_146_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_147_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = are_eq(S_nil, l2);
      if (b0)
      {
        goto block_148_end;
      }
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_149_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_var, l3);
      if (!b0)
      {
        goto block_149_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_149_end:;
      if (b0)
      {
        goto block_148_end;
      }
      block_148_end:;
      if (!b0)
      {
        goto block_147_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_147_end:;
    if (!b0)
    {
      goto block_146_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_146_end:;
    block_145_end:;
    return b0;
  }
  
  
  bool is_synsgn(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_150_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_syn_sgn, l0);
    if (!b0)
    {
      goto block_150_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_151_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_151_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_151_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_152_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_152_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_type(l2);
      if (!b0)
      {
        goto block_152_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_152_end:;
    if (!b0)
    {
      goto block_151_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_res_type))
    {
      b0 = false;
      goto block_151_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_151_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_151_end:;
    block_150_end:;
    return b0;
  }
  
  
  bool is_seqtype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    b0 = are_eq(S_empty_seq_type, p0);
    if (b0)
    {
      goto block_153_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_154_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fixed_seq_type, l0);
    if (!b0)
    {
      goto block_154_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_155_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_type(l1);
      if (!b0)
      {
        goto block_155_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_155_end:;
    block_154_end:;
    if (b0)
    {
      goto block_153_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_156_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_type, l0);
    if (!b0)
    {
      goto block_156_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_157_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_157_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_157_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_nonempty))
    {
      b0 = false;
      goto block_157_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bool(l1);
    if (!b0)
    {
      goto block_157_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_157_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_elem_type))
    {
      b0 = false;
      goto block_157_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_157_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_157_end:;
    block_156_end:;
    if (b0)
    {
      goto block_153_end;
    }
    block_153_end:;
    return b0;
  }
  
  
  bool is_fnsymbol(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_159_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fn_symbol, l0);
    if (!b0)
    {
      goto block_159_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_159_end:;
    if (b0)
    {
      goto block_158_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_160_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_op_symbol, l0);
    if (!b0)
    {
      goto block_160_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_operator(l0);
    block_160_end:;
    if (b0)
    {
      goto block_158_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_161_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_nested_fn_symbol, l0);
    if (!b0)
    {
      goto block_161_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_162_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_162_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_162_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_inner))
    {
      b0 = false;
      goto block_162_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_162_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_162_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_outer))
    {
      b0 = false;
      goto block_162_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_162_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_162_end:;
    block_161_end:;
    if (b0)
    {
      goto block_158_end;
    }
    block_158_end:;
    return b0;
  }
  
  
  bool is_program(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SetIter s0;
    MapIter m0;
    MapIter m1;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_163_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_program, l0);
    if (!b0)
    {
      goto block_163_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_164_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_164_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_164_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tdefs))
    {
      b0 = false;
      goto block_164_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_map))
    {
      b0 = true;
      goto block_165_end;
    }
    if (!is_ne_map(l1))
    {
      b0 = false;
      goto block_165_end;
    }
    get_map_iter(m1, l1);
    for ( ; ; )
    {
      if (is_out_of_range(m1))
      {
        break;
      }
      l2 = get_curr_key(m1);
      b0 = is_typesymbol(l2);
      if (!b0)
      {
        goto block_165_end;
      }
      l2 = get_curr_value(m1);
      b0 = is_type(l2);
      if (!b0)
      {
        goto block_165_end;
      }
      move_forward(m1);
    }
    b0 = true;
    block_165_end:;
    if (!b0)
    {
      goto block_164_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_164_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_fndefs))
    {
      b0 = false;
      goto block_164_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_set))
    {
      b0 = true;
      goto block_166_end;
    }
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_166_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b0 = is_fndef(l2);
      if (!b0)
      {
        goto block_166_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_166_end:;
    if (!b0)
    {
      goto block_164_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_164_end:;
    block_163_end:;
    return b0;
  }
  
  
  bool is_objvar(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = is_var(p0);
    if (b0)
    {
      goto block_167_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_168_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_ext_par, l0);
    if (!b0)
    {
      goto block_168_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_168_end:;
    if (b0)
    {
      goto block_167_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_169_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_lvar, l0);
    if (!b0)
    {
      goto block_169_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_nat(l0);
    block_169_end:;
    if (b0)
    {
      goto block_167_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_170_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_evar, l0);
    if (!b0)
    {
      goto block_170_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_171_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_171_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_171_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_id))
    {
      b0 = false;
      goto block_171_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_171_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_171_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_idx))
    {
      b0 = false;
      goto block_171_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (b0)
    {
      goto block_172_end;
    }
    b0 = is_intvar(l1);
    if (b0)
    {
      goto block_172_end;
    }
    block_172_end:;
    if (!b0)
    {
      goto block_171_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_171_end:;
    block_170_end:;
    if (b0)
    {
      goto block_167_end;
    }
    block_167_end:;
    return b0;
  }
  
  
  bool is_tdefusererr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SetIter s0;
    SetIter s1;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_174_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_type_name, l0);
    if (!b0)
    {
      goto block_174_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_basictypesymbol(l0);
    block_174_end:;
    if (b0)
    {
      goto block_173_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_175_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_type_var, l0);
    if (!b0)
    {
      goto block_175_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_typevar(l0);
    block_175_end:;
    if (b0)
    {
      goto block_173_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_176_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_incompatible_types_in_union_type, l0);
    if (!b0)
    {
      goto block_176_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_177_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      if (!is_ne_set(l1))
      {
        b0 = false;
        goto block_178_end;
      }
      get_set_iter(s1, l1);
      for ( ; ; )
      {
        if (is_out_of_range(s1))
        {
          break;
        }
        l2 = get_curr_obj(s1);
        b0 = is_syntype(l2);
        if (!b0)
        {
          goto block_178_end;
        }
        move_forward(s1);
      }
      b0 = true;
      block_178_end:;
      if (!b0)
      {
        goto block_177_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_177_end:;
    block_176_end:;
    if (b0)
    {
      goto block_173_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_179_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_par_type_name, l0);
    if (!b0)
    {
      goto block_179_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_180_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_180_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_180_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_180_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basictypesymbol(l1);
    if (!b0)
    {
      goto block_180_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_180_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_180_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_180_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_180_end:;
    block_179_end:;
    if (b0)
    {
      goto block_173_end;
    }
    block_173_end:;
    return b0;
  }
  
  
  bool is_objprocdef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_181_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_obj_proc_def, l0);
    if (!b0)
    {
      goto block_181_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_182_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_182_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_183_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_183_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_183_end:;
    if (!b0)
    {
      goto block_182_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objfnname(l1);
    if (!b0)
    {
      goto block_182_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_in_arity))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_182_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_named_params))
    {
      b0 = false;
      goto block_182_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_map))
    {
      b0 = true;
      goto block_184_end;
    }
    if (!is_ne_map(l1))
    {
      b0 = false;
      goto block_184_end;
    }
    get_map_iter(m1, l1);
    for ( ; ; )
    {
      if (is_out_of_range(m1))
      {
        break;
      }
      l2 = get_curr_key(m1);
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_185_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_named_par, l3);
      if (!b0)
      {
        goto block_185_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_185_end:;
      if (!b0)
      {
        goto block_184_end;
      }
      l2 = get_curr_value(m1);
      b0 = is_nat(l2);
      if (!b0)
      {
        goto block_184_end;
      }
      move_forward(m1);
    }
    b0 = true;
    block_184_end:;
    if (!b0)
    {
      goto block_182_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_182_end:;
    block_181_end:;
    return b0;
  }
  
  
  bool is_natobjop(Obj p0)
  {
    Obj l0;
    bool b0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_187_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_tag, l0);
    if (!b0)
    {
      goto block_187_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_187_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_188_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_curr_key, l0);
    if (!b0)
    {
      goto block_188_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_mapitvar(l0);
    block_188_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_189_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_inner_obj, l0);
    if (!b0)
    {
      goto block_189_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_189_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_190_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_curr_value, l0);
    if (!b0)
    {
      goto block_190_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_mapitvar(l0);
    block_190_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_191_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_to_str, l0);
    if (!b0)
    {
      goto block_191_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_191_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_192_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_to_symb, l0);
    if (!b0)
    {
      goto block_192_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_192_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_193_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_curr_obj, l0);
    if (!b0)
    {
      goto block_193_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_setitvar(l0);
    if (b0)
    {
      goto block_194_end;
    }
    b0 = is_seqitvar(l0);
    if (b0)
    {
      goto block_194_end;
    }
    block_194_end:;
    block_193_end:;
    if (b0)
    {
      goto block_186_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_195_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_to_obj, l0);
    if (!b0)
    {
      goto block_195_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_boolexpr(l0);
    if (b0)
    {
      goto block_196_end;
    }
    b0 = is_intexpr(l0);
    if (b0)
    {
      goto block_196_end;
    }
    block_196_end:;
    block_195_end:;
    if (b0)
    {
      goto block_186_end;
    }
    block_186_end:;
    return b0;
  }
  
  
  bool is_syniter(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_198_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_iter, l0);
    if (!b0)
    {
      goto block_198_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_199_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 3)))
    {
      b0 = false;
      goto block_199_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_199_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_199_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_199_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_199_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_values))
    {
      b0 = false;
      goto block_199_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_199_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_idx_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_var(l1);
        if (!b0)
        {
          goto block_199_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_199_end:;
    block_198_end:;
    if (b0)
    {
      goto block_197_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_200_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_range_iter, l0);
    if (!b0)
    {
      goto block_200_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_201_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_201_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_201_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_end_val))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_201_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_start_val))
    {
      b0 = false;
      goto block_201_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_201_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_201_end:;
    block_200_end:;
    if (b0)
    {
      goto block_197_end;
    }
    block_197_end:;
    return b0;
  }
  
  
  bool is_inttype(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = are_eq(S_integer, p0);
    if (b0)
    {
      goto block_202_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_203_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_low_ints, l0);
    if (!b0)
    {
      goto block_203_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_204_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_204_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_204_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_max))
    {
      b0 = false;
      goto block_204_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_int(l1);
    if (!b0)
    {
      goto block_204_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_204_end:;
    block_203_end:;
    if (b0)
    {
      goto block_202_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_205_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_high_ints, l0);
    if (!b0)
    {
      goto block_205_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_206_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_206_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_206_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_min))
    {
      b0 = false;
      goto block_206_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_int(l1);
    if (!b0)
    {
      goto block_206_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_206_end:;
    block_205_end:;
    if (b0)
    {
      goto block_202_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_207_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_int_range, l0);
    if (!b0)
    {
      goto block_207_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_208_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_208_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_208_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_min))
    {
      b0 = false;
      goto block_208_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_int(l1);
    if (!b0)
    {
      goto block_208_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_208_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_208_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_208_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_208_end:;
    block_207_end:;
    if (b0)
    {
      goto block_202_end;
    }
    block_202_end:;
    return b0;
  }
  
  
  bool is_synfndef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b0;
    int i0;
    int i1;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_209_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_syn_fn_def, l0);
    if (!b0)
    {
      goto block_209_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_210_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 5)))
    {
      b0 = false;
      goto block_210_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_210_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_210_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_211_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_211_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (are_eq(l2, empty_map))
      {
        b0 = true;
        goto block_212_end;
      }
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_212_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 0) & (i1 <= 2)))
      {
        b0 = false;
        goto block_212_end;
      }
      get_map_iter(m1, l2);
      if (!is_out_of_range(m1))
      {
        l3 = get_curr_key(m1);
        if (are_eq(l3, S_var))
        {
          l3 = get_curr_value(m1);
          if (!is_tag_obj(l3))
          {
            b0 = false;
            goto block_213_end;
          }
          l4 = get_tag(l3);
          b0 = are_eq(S_var, l4);
          if (!b0)
          {
            goto block_213_end;
          }
          l4 = get_inner_obj(l3);
          b0 = is_atom(l4);
          block_213_end:;
          if (!b0)
          {
            goto block_212_end;
          }
          move_forward(m1);
        }
      }
      if (!is_out_of_range(m1))
      {
        l3 = get_curr_key(m1);
        if (are_eq(l3, S_type))
        {
          l3 = get_curr_value(m1);
          b0 = is_syntype(l3);
          if (!b0)
          {
            goto block_212_end;
          }
          move_forward(m1);
        }
      }
      b0 = is_out_of_range(m1);
      block_212_end:;
      if (!b0)
      {
        goto block_211_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_211_end:;
    if (!b0)
    {
      goto block_210_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_res_type))
      {
        l1 = get_curr_value(m0);
        b0 = is_syntype(l1);
        if (!b0)
        {
          goto block_210_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_local_fns))
    {
      b0 = false;
      goto block_210_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_214_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_214_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synfndef(l2);
      if (!b0)
      {
        goto block_214_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_214_end:;
    if (!b0)
    {
      goto block_210_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_210_end:;
    block_209_end:;
    return b0;
  }
  
  
  bool is_finalmatchaction(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_216_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_found_var_and_leave, l0);
    if (!b0)
    {
      goto block_216_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_217_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_217_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_217_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_217_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_217_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_217_end:;
    block_216_end:;
    if (b0)
    {
      goto block_215_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_218_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eval_expr_and_add_to_set, l0);
    if (!b0)
    {
      goto block_218_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_219_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_219_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_219_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_219_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_219_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_219_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_stream_var))
    {
      b0 = false;
      goto block_219_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_219_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_219_end:;
    block_218_end:;
    if (b0)
    {
      goto block_215_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_220_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eval_exprs_and_add_to_map, l0);
    if (!b0)
    {
      goto block_220_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_221_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_221_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_expr))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_221_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_expr))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_221_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_stream_var))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_221_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_stream_var))
    {
      b0 = false;
      goto block_221_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_221_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_221_end:;
    block_220_end:;
    if (b0)
    {
      goto block_215_end;
    }
    block_215_end:;
    return b0;
  }
  
  
  bool is_fndef(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b0;
    int i0;
    int i1;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_222_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fn_def, l0);
    if (!b0)
    {
      goto block_222_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_223_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 5)))
    {
      b0 = false;
      goto block_223_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_223_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_223_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_224_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_224_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (are_eq(l2, empty_map))
      {
        b0 = true;
        goto block_225_end;
      }
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_225_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 0) & (i1 <= 2)))
      {
        b0 = false;
        goto block_225_end;
      }
      get_map_iter(m1, l2);
      if (!is_out_of_range(m1))
      {
        l3 = get_curr_key(m1);
        if (are_eq(l3, S_var))
        {
          l3 = get_curr_value(m1);
          if (!is_tag_obj(l3))
          {
            b0 = false;
            goto block_226_end;
          }
          l4 = get_tag(l3);
          b0 = are_eq(S_var, l4);
          if (!b0)
          {
            goto block_226_end;
          }
          l4 = get_inner_obj(l3);
          b0 = is_atom(l4);
          block_226_end:;
          if (!b0)
          {
            goto block_225_end;
          }
          move_forward(m1);
        }
      }
      if (!is_out_of_range(m1))
      {
        l3 = get_curr_key(m1);
        if (are_eq(l3, S_type))
        {
          l3 = get_curr_value(m1);
          b0 = is_exttype(l3);
          if (!b0)
          {
            goto block_225_end;
          }
          move_forward(m1);
        }
      }
      b0 = is_out_of_range(m1);
      block_225_end:;
      if (!b0)
      {
        goto block_224_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_224_end:;
    if (!b0)
    {
      goto block_223_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_res_type))
      {
        l1 = get_curr_value(m0);
        b0 = is_type(l1);
        if (!b0)
        {
          goto block_223_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_named_params))
    {
      b0 = false;
      goto block_223_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_map))
    {
      b0 = true;
      goto block_227_end;
    }
    if (!is_ne_map(l1))
    {
      b0 = false;
      goto block_227_end;
    }
    get_map_iter(m1, l1);
    for ( ; ; )
    {
      if (is_out_of_range(m1))
      {
        break;
      }
      l2 = get_curr_key(m1);
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_228_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_named_par, l3);
      if (!b0)
      {
        goto block_228_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_228_end:;
      if (!b0)
      {
        goto block_227_end;
      }
      l2 = get_curr_value(m1);
      b0 = is_exttype(l2);
      if (!b0)
      {
        goto block_227_end;
      }
      move_forward(m1);
    }
    b0 = true;
    block_227_end:;
    if (!b0)
    {
      goto block_223_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_223_end:;
    block_222_end:;
    return b0;
  }
  
  
  bool is_boolexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    b0 = are_eq(S_true, p0);
    if (b0)
    {
      goto block_229_end;
    }
    b0 = are_eq(S_false, p0);
    if (b0)
    {
      goto block_229_end;
    }
    b0 = is_boolvar(p0);
    if (b0)
    {
      goto block_229_end;
    }
    b0 = is_natboolop(p0);
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_230_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_neg, l0);
    if (!b0)
    {
      goto block_230_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_boolexpr(l0);
    block_230_end:;
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_231_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and, l0);
    if (!b0)
    {
      goto block_231_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_232_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_boolexpr(l1);
      if (!b0)
      {
        goto block_232_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_232_end:;
    block_231_end:;
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_233_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or, l0);
    if (!b0)
    {
      goto block_233_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_234_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_boolexpr(l1);
      if (!b0)
      {
        goto block_234_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_234_end:;
    block_233_end:;
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_235_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and_then, l0);
    if (!b0)
    {
      goto block_235_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_236_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_boolexpr(l1);
      if (!b0)
      {
        goto block_236_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_236_end:;
    block_235_end:;
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_237_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or_else, l0);
    if (!b0)
    {
      goto block_237_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_238_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_boolexpr(l1);
      if (!b0)
      {
        goto block_238_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_238_end:;
    block_237_end:;
    if (b0)
    {
      goto block_229_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_239_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eval_bool_fn, l0);
    if (!b0)
    {
      goto block_239_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_240_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_240_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_240_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_240_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolfnname(l1);
    if (!b0)
    {
      goto block_240_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_240_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_240_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_241_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_anyexpr(l2);
      if (!b0)
      {
        goto block_241_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_241_end:;
    if (!b0)
    {
      goto block_240_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_240_end:;
    block_239_end:;
    if (b0)
    {
      goto block_229_end;
    }
    block_229_end:;
    return b0;
  }
  
  
  bool is_natintop(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    b0 = are_eq(S_unique_int, p0);
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_243_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_minus, l0);
    if (!b0)
    {
      goto block_243_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_intexpr(l0);
    block_243_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_244_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_int_val, l0);
    if (!b0)
    {
      goto block_244_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_244_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_245_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_set_size, l0);
    if (!b0)
    {
      goto block_245_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_245_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_246_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_seq_len, l0);
    if (!b0)
    {
      goto block_246_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_246_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_247_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_map_size, l0);
    if (!b0)
    {
      goto block_247_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_247_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_248_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_add, l0);
    if (!b0)
    {
      goto block_248_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_249_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_249_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_249_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val1))
    {
      b0 = false;
      goto block_249_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_249_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_249_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val2))
    {
      b0 = false;
      goto block_249_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_249_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_249_end:;
    block_248_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_250_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mult, l0);
    if (!b0)
    {
      goto block_250_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_251_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_251_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_251_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val1))
    {
      b0 = false;
      goto block_251_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_251_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_251_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val2))
    {
      b0 = false;
      goto block_251_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_251_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_251_end:;
    block_250_end:;
    if (b0)
    {
      goto block_242_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_252_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_idiv, l0);
    if (!b0)
    {
      goto block_252_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_253_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_253_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_253_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val1))
    {
      b0 = false;
      goto block_253_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_253_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_253_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val2))
    {
      b0 = false;
      goto block_253_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_253_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_253_end:;
    block_252_end:;
    if (b0)
    {
      goto block_242_end;
    }
    block_242_end:;
    return b0;
  }
  
  
  bool is_pattern(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    int i1;
    SetIter s0;
    MapIter m0;
    MapIter m1;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_255_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_type_ptrn, l0);
    if (!b0)
    {
      goto block_255_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_type(l0);
    block_255_end:;
    if (b0)
    {
      goto block_254_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_256_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ext_var_ptrn, l0);
    if (!b0)
    {
      goto block_256_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_256_end:;
    if (b0)
    {
      goto block_254_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_257_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_obj_ptrn, l0);
    if (!b0)
    {
      goto block_257_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_leafobj(l0);
    block_257_end:;
    if (b0)
    {
      goto block_254_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_258_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_var_ptrn, l0);
    if (!b0)
    {
      goto block_258_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_259_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 2)))
    {
      b0 = false;
      goto block_259_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_259_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_259_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_259_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_ptrn))
      {
        l1 = get_curr_value(m0);
        b0 = is_pattern(l1);
        if (!b0)
        {
          goto block_259_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_259_end:;
    block_258_end:;
    if (b0)
    {
      goto block_254_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_260_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tuple_ptrn, l0);
    if (!b0)
    {
      goto block_260_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_261_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_261_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_261_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_fields))
    {
      b0 = false;
      goto block_261_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_262_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_263_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 2) & (i1 <= 2)))
      {
        b0 = false;
        goto block_263_end;
      }
      get_map_iter(m1, l2);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_263_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_ptrn))
      {
        b0 = false;
        goto block_263_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_pattern(l3);
      if (!b0)
      {
        goto block_263_end;
      }
      move_forward(m1);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_263_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_label))
      {
        b0 = false;
        goto block_263_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_symbobj(l3);
      if (!b0)
      {
        goto block_263_end;
      }
      move_forward(m1);
      b0 = is_out_of_range(m1);
      block_263_end:;
      if (!b0)
      {
        goto block_262_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_262_end:;
    if (!b0)
    {
      goto block_261_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_261_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_is_open))
    {
      b0 = false;
      goto block_261_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bool(l1);
    if (!b0)
    {
      goto block_261_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_261_end:;
    block_260_end:;
    if (b0)
    {
      goto block_254_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_264_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tag_ptrn, l0);
    if (!b0)
    {
      goto block_264_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_265_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_265_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_265_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_265_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_265_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_265_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tag))
    {
      b0 = false;
      goto block_265_end;
    }
    l1 = get_curr_value(m0);
    if (!is_tag_obj(l1))
    {
      b0 = false;
      goto block_267_end;
    }
    l2 = get_tag(l1);
    b0 = are_eq(S_var_ptrn, l2);
    if (!b0)
    {
      goto block_267_end;
    }
    l2 = get_inner_obj(l1);
    if (!is_ne_map(l2))
    {
      b0 = false;
      goto block_268_end;
    }
    i1 = get_map_size(l2);
    if (!((i1 >= 1) & (i1 <= 1)))
    {
      b0 = false;
      goto block_268_end;
    }
    get_map_iter(m1, l2);
    if (is_out_of_range(m1))
    {
      b0 = false;
      goto block_268_end;
    }
    l3 = get_curr_key(m1);
    if (!are_eq(l3, S_name))
    {
      b0 = false;
      goto block_268_end;
    }
    l3 = get_curr_value(m1);
    b0 = is_var(l3);
    if (!b0)
    {
      goto block_268_end;
    }
    move_forward(m1);
    b0 = is_out_of_range(m1);
    block_268_end:;
    block_267_end:;
    if (b0)
    {
      goto block_266_end;
    }
    if (!is_tag_obj(l1))
    {
      b0 = false;
      goto block_269_end;
    }
    l2 = get_tag(l1);
    b0 = are_eq(S_obj_ptrn, l2);
    if (!b0)
    {
      goto block_269_end;
    }
    l2 = get_inner_obj(l1);
    b0 = is_symbobj(l2);
    block_269_end:;
    if (b0)
    {
      goto block_266_end;
    }
    block_266_end:;
    if (!b0)
    {
      goto block_265_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_265_end:;
    block_264_end:;
    if (b0)
    {
      goto block_254_end;
    }
    block_254_end:;
    return b0;
  }
  
  
  bool is_clause(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_271_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_in_clause, l0);
    if (!b0)
    {
      goto block_271_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_272_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_272_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_272_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_272_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_272_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_272_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_272_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_272_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_272_end:;
    block_271_end:;
    if (b0)
    {
      goto block_270_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_273_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_not_in_clause, l0);
    if (!b0)
    {
      goto block_273_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_274_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_274_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_274_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_274_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_274_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_274_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_274_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_274_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_274_end:;
    block_273_end:;
    if (b0)
    {
      goto block_270_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_275_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and_clause, l0);
    if (!b0)
    {
      goto block_275_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_276_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_276_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_276_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_276_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_276_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_276_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_276_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_276_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_276_end:;
    block_275_end:;
    if (b0)
    {
      goto block_270_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_277_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or_clause, l0);
    if (!b0)
    {
      goto block_277_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_278_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_278_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_278_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_278_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_278_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_278_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_278_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_278_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_278_end:;
    block_277_end:;
    if (b0)
    {
      goto block_270_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_279_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_in_clause, l0);
    if (!b0)
    {
      goto block_279_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_280_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_280_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_280_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_ptrn))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_280_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_ptrn))
    {
      b0 = false;
      goto block_280_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_280_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_280_end:;
    block_279_end:;
    if (b0)
    {
      goto block_270_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_281_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_not_in_clause, l0);
    if (!b0)
    {
      goto block_281_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_282_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_282_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_282_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_ptrn))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_282_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_ptrn))
    {
      b0 = false;
      goto block_282_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_282_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_282_end:;
    block_281_end:;
    if (b0)
    {
      goto block_270_end;
    }
    block_270_end:;
    return b0;
  }
  
  
  bool is_synclause(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_284_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and_clause, l0);
    if (!b0)
    {
      goto block_284_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_285_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_synclause(l1);
      if (!b0)
      {
        goto block_285_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_285_end:;
    block_284_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_286_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eq_clause, l0);
    if (!b0)
    {
      goto block_286_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_287_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_287_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_287_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_287_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_287_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_287_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_287_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_287_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_287_end:;
    block_286_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_288_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or_clause, l0);
    if (!b0)
    {
      goto block_288_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_289_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_289_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_289_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_289_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synclause(l1);
    if (!b0)
    {
      goto block_289_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_289_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_289_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synclause(l1);
    if (!b0)
    {
      goto block_289_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_289_end:;
    block_288_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_290_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_in_clause, l0);
    if (!b0)
    {
      goto block_290_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_291_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_291_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_291_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_291_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_291_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_291_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_291_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_291_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_291_end:;
    block_290_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_292_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_not_in_clause, l0);
    if (!b0)
    {
      goto block_292_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_293_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_293_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_293_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_293_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_293_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_293_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_293_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_293_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_293_end:;
    block_292_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_294_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_in_clause, l0);
    if (!b0)
    {
      goto block_294_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_295_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_295_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_295_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_ptrn))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_295_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_ptrn))
    {
      b0 = false;
      goto block_295_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_295_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_295_end:;
    block_294_end:;
    if (b0)
    {
      goto block_283_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_296_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_not_in_clause, l0);
    if (!b0)
    {
      goto block_296_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_297_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_297_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_297_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_ptrn))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_297_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_ptrn))
    {
      b0 = false;
      goto block_297_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_297_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_297_end:;
    block_296_end:;
    if (b0)
    {
      goto block_283_end;
    }
    block_283_end:;
    return b0;
  }
  
  
  bool is_synobjerr(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    SetIter s0;
    MapIter m0;
  
    b0 = are_eq(S_no_ret_stmt, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = are_eq(S_no_way_out_loop, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = are_eq(S_break_outside_loop, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = are_eq(S_mult_vars_in_mult_ptrn_branch, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = are_eq(S_nested_mult_ptrn_branch, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = are_eq(S_unreachable_code, p0);
    if (b0)
    {
      goto block_298_end;
    }
    b0 = is_tdefusererr(p0);
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_299_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_var, l0);
    if (!b0)
    {
      goto block_299_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_299_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_300_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_var_redef, l0);
    if (!b0)
    {
      goto block_300_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_300_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_301_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_asgnm_readonly_var, l0);
    if (!b0)
    {
      goto block_301_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_301_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_302_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_free_var_in_try_expr, l0);
    if (!b0)
    {
      goto block_302_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_302_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_303_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_bound_ptrn_var, l0);
    if (!b0)
    {
      goto block_303_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_303_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_304_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_already_def_ptrn_var, l0);
    if (!b0)
    {
      goto block_304_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_304_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_305_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_loc_bound_var_with_ptrn, l0);
    if (!b0)
    {
      goto block_305_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_var(l0);
    block_305_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_306_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_var_or_const, l0);
    if (!b0)
    {
      goto block_306_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_306_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_307_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_almost_def_const, l0);
    if (!b0)
    {
      goto block_307_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_307_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_308_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_vars_repeated_in_diff_branches, l0);
    if (!b0)
    {
      goto block_308_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_set))
    {
      b0 = true;
      goto block_309_end;
    }
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_309_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_var(l1);
      if (!b0)
      {
        goto block_309_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_309_end:;
    block_308_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_310_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_diff_vars_in_or_clause, l0);
    if (!b0)
    {
      goto block_310_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_311_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_var(l1);
      if (!b0)
      {
        goto block_311_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_311_end:;
    block_310_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_312_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_dup_closure_def, l0);
    if (!b0)
    {
      goto block_312_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_basicuntypedsgn(l0);
    block_312_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_313_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_undef_fn, l0);
    if (!b0)
    {
      goto block_313_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_314_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_314_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_314_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_314_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_314_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_314_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_314_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_314_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_314_end:;
    block_313_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_315_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_almost_def_fn, l0);
    if (!b0)
    {
      goto block_315_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_316_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_316_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_316_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_316_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_316_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_316_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_316_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_316_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_316_end:;
    block_315_end:;
    if (b0)
    {
      goto block_298_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_317_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_nested_local_fn, l0);
    if (!b0)
    {
      goto block_317_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_318_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_318_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_318_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_inner_fn))
    {
      b0 = false;
      goto block_318_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basicuntypedsgn(l1);
    if (!b0)
    {
      goto block_318_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_318_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_outer_fn))
    {
      b0 = false;
      goto block_318_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basicuntypedsgn(l1);
    if (!b0)
    {
      goto block_318_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_318_end:;
    block_317_end:;
    if (b0)
    {
      goto block_298_end;
    }
    block_298_end:;
    return b0;
  }
  
  
  bool is_usererr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_320_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_dup_tdef, l0);
    if (!b0)
    {
      goto block_320_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_basictypesymbol(l0);
    block_320_end:;
    if (b0)
    {
      goto block_319_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_321_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ublock_err, l0);
    if (!b0)
    {
      goto block_321_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_322_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_322_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_322_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_errs))
    {
      b0 = false;
      goto block_322_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_set))
    {
      b0 = true;
      goto block_323_end;
    }
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_323_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b0 = is_ublockerr(l2);
      if (!b0)
      {
        goto block_323_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_323_end:;
    if (!b0)
    {
      goto block_322_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_322_end:;
    block_321_end:;
    if (b0)
    {
      goto block_319_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_324_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_dup_par_tdef, l0);
    if (!b0)
    {
      goto block_324_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_325_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_325_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_325_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_325_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_basictypesymbol(l1);
    if (!b0)
    {
      goto block_325_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_325_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_325_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nznat(l1);
    if (!b0)
    {
      goto block_325_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_325_end:;
    block_324_end:;
    if (b0)
    {
      goto block_319_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_326_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tdef_err, l0);
    if (!b0)
    {
      goto block_326_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_327_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_327_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_327_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_errs))
    {
      b0 = false;
      goto block_327_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_set))
    {
      b0 = true;
      goto block_328_end;
    }
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_328_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b0 = is_tdefusererr(l2);
      if (!b0)
      {
        goto block_328_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_328_end:;
    if (!b0)
    {
      goto block_327_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_327_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_327_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_typesymbol(l1);
    if (!b0)
    {
      goto block_327_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_327_end:;
    block_326_end:;
    if (b0)
    {
      goto block_319_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_329_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_incomp_fndefs, l0);
    if (!b0)
    {
      goto block_329_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_330_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_330_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_330_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_arity))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_nat(l1);
    if (!b0)
    {
      goto block_330_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_330_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_331_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      if (are_eq(l2, empty_seq))
      {
        b0 = true;
        goto block_332_end;
      }
      if (!is_ne_seq(l2))
      {
        b0 = false;
        goto block_332_end;
      }
      get_seq_iter(q0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        l3 = get_curr_obj(q0);
        b0 = is_objpartset(l3);
        if (!b0)
        {
          goto block_332_end;
        }
        move_forward(q0);
      }
      b0 = true;
      block_332_end:;
      if (!b0)
      {
        goto block_331_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_331_end:;
    if (!b0)
    {
      goto block_330_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_330_end:;
    block_329_end:;
    if (b0)
    {
      goto block_319_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_333_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fndef_err, l0);
    if (!b0)
    {
      goto block_333_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_334_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_334_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_errs))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_set))
    {
      b0 = true;
      goto block_335_end;
    }
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_335_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b0 = is_synobjerr(l2);
      if (!b0)
      {
        goto block_335_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_335_end:;
    if (!b0)
    {
      goto block_334_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_334_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_334_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_336_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_336_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = are_eq(S_nil, l2);
      if (b0)
      {
        goto block_337_end;
      }
      b0 = is_syntype(l2);
      if (b0)
      {
        goto block_337_end;
      }
      block_337_end:;
      if (!b0)
      {
        goto block_336_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_336_end:;
    if (!b0)
    {
      goto block_334_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_334_end:;
    block_333_end:;
    if (b0)
    {
      goto block_319_end;
    }
    block_319_end:;
    return b0;
  }
  
  
  bool is_natboolop(Obj p0)
  {
    Obj l0;
    Obj l1;
    bool b0;
    int i0;
    MapIter m0;
  
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_339_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_symb, l0);
    if (!b0)
    {
      goto block_339_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_339_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_340_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_int, l0);
    if (!b0)
    {
      goto block_340_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_340_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_341_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_ne_set, l0);
    if (!b0)
    {
      goto block_341_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_341_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_342_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_ne_seq, l0);
    if (!b0)
    {
      goto block_342_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_342_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_343_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_ne_map, l0);
    if (!b0)
    {
      goto block_343_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_343_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_344_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_tagged_obj, l0);
    if (!b0)
    {
      goto block_344_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    block_344_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_345_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_out_of_range, l0);
    if (!b0)
    {
      goto block_345_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_itvar(l0);
    block_345_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_346_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_eq_bool, l0);
    if (!b0)
    {
      goto block_346_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_347_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_347_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_347_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_347_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolexpr(l1);
    if (!b0)
    {
      goto block_347_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_347_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_347_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolexpr(l1);
    if (!b0)
    {
      goto block_347_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_347_end:;
    block_346_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_348_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_eq, l0);
    if (!b0)
    {
      goto block_348_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_349_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_349_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_349_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_349_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_349_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_349_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_349_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_349_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_349_end:;
    block_348_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_350_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_eq_int, l0);
    if (!b0)
    {
      goto block_350_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_351_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_351_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_351_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_351_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_351_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_351_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_351_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_351_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_351_end:;
    block_350_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_352_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_gt, l0);
    if (!b0)
    {
      goto block_352_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_353_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_353_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_353_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_353_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_353_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_353_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_353_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_353_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_353_end:;
    block_352_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_354_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_ge, l0);
    if (!b0)
    {
      goto block_354_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_355_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_355_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_355_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_355_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_355_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_355_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_355_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_355_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_355_end:;
    block_354_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_356_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_lt, l0);
    if (!b0)
    {
      goto block_356_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_357_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_357_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_357_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_357_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_357_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_357_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_357_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_357_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_357_end:;
    block_356_end:;
    if (b0)
    {
      goto block_338_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_358_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_is_le, l0);
    if (!b0)
    {
      goto block_358_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_359_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_359_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_359_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr1))
    {
      b0 = false;
      goto block_359_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_359_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_359_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr2))
    {
      b0 = false;
      goto block_359_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_359_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_359_end:;
    block_358_end:;
    if (b0)
    {
      goto block_338_end;
    }
    block_338_end:;
    return b0;
  }
  
  
  bool is_synstmt(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b0;
    int i0;
    int i1;
    SeqIter q0;
    SeqIter q1;
    MapIter m0;
    MapIter m1;
  
    b0 = are_eq(S_break_stmt, p0);
    if (b0)
    {
      goto block_360_end;
    }
    b0 = are_eq(S_fail_stmt, p0);
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_361_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_return_stmt, l0);
    if (!b0)
    {
      goto block_361_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_synexpr(l0);
    block_361_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_362_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_assert_stmt, l0);
    if (!b0)
    {
      goto block_362_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_synexpr(l0);
    block_362_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_363_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_print_stmt, l0);
    if (!b0)
    {
      goto block_363_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_synexpr(l0);
    block_363_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_364_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_inf_loop_stmt, l0);
    if (!b0)
    {
      goto block_364_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_365_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_synstmt(l1);
      if (!b0)
      {
        goto block_365_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_365_end:;
    block_364_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_366_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_assignment_stmt, l0);
    if (!b0)
    {
      goto block_366_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_367_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_367_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_367_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_367_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_367_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_367_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_367_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_367_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_367_end:;
    block_366_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_368_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_for_stmt, l0);
    if (!b0)
    {
      goto block_368_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_369_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_369_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_369_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_369_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_370_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synstmt(l2);
      if (!b0)
      {
        goto block_370_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_370_end:;
    if (!b0)
    {
      goto block_369_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_369_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_loops))
    {
      b0 = false;
      goto block_369_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_371_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_syniter(l2);
      if (!b0)
      {
        goto block_371_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_371_end:;
    if (!b0)
    {
      goto block_369_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_369_end:;
    block_368_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_372_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_let_stmt, l0);
    if (!b0)
    {
      goto block_372_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_373_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_373_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_373_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_373_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_374_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synstmt(l2);
      if (!b0)
      {
        goto block_374_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_374_end:;
    if (!b0)
    {
      goto block_373_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_373_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_asgnms))
    {
      b0 = false;
      goto block_373_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_375_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synfndef(l2);
      if (!b0)
      {
        goto block_375_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_375_end:;
    if (!b0)
    {
      goto block_373_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_373_end:;
    block_372_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_376_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_loop_stmt, l0);
    if (!b0)
    {
      goto block_376_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_377_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_377_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_378_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synstmt(l2);
      if (!b0)
      {
        goto block_378_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_378_end:;
    if (!b0)
    {
      goto block_377_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_377_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_skip_first))
    {
      b0 = false;
      goto block_377_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_bool(l1);
    if (!b0)
    {
      goto block_377_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_377_end:;
    block_376_end:;
    if (b0)
    {
      goto block_360_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_379_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_if_stmt, l0);
    if (!b0)
    {
      goto block_379_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_380_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_380_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_380_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_else))
    {
      b0 = false;
      goto block_380_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_381_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_381_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synstmt(l2);
      if (!b0)
      {
        goto block_381_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_381_end:;
    if (!b0)
    {
      goto block_380_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_380_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_branches))
    {
      b0 = false;
      goto block_380_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_382_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_383_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 2) & (i1 <= 2)))
      {
        b0 = false;
        goto block_383_end;
      }
      get_map_iter(m1, l2);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_383_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_body))
      {
        b0 = false;
        goto block_383_end;
      }
      l3 = get_curr_value(m1);
      if (!is_ne_seq(l3))
      {
        b0 = false;
        goto block_384_end;
      }
      get_seq_iter(q1, l3);
      for ( ; ; )
      {
        if (is_out_of_range(q1))
        {
          break;
        }
        l4 = get_curr_obj(q1);
        b0 = is_synstmt(l4);
        if (!b0)
        {
          goto block_384_end;
        }
        move_forward(q1);
      }
      b0 = true;
      block_384_end:;
      if (!b0)
      {
        goto block_383_end;
      }
      move_forward(m1);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_383_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_cond))
      {
        b0 = false;
        goto block_383_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_synexpr(l3);
      if (!b0)
      {
        goto block_383_end;
      }
      move_forward(m1);
      b0 = is_out_of_range(m1);
      block_383_end:;
      if (!b0)
      {
        goto block_382_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_382_end:;
    if (!b0)
    {
      goto block_380_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_380_end:;
    block_379_end:;
    if (b0)
    {
      goto block_360_end;
    }
    block_360_end:;
    return b0;
  }
  
  
  bool is_statement(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    b0 = are_eq(S_break_stmt, p0);
    if (b0)
    {
      goto block_385_end;
    }
    b0 = are_eq(S_fail_stmt, p0);
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_386_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_return_stmt, l0);
    if (!b0)
    {
      goto block_386_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_expr(l0);
    block_386_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_387_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_assert_stmt, l0);
    if (!b0)
    {
      goto block_387_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_expr(l0);
    block_387_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_388_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_print_stmt, l0);
    if (!b0)
    {
      goto block_388_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_expr(l0);
    block_388_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_389_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_loop_stmt, l0);
    if (!b0)
    {
      goto block_389_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_390_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_statement(l1);
      if (!b0)
      {
        goto block_390_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_390_end:;
    block_389_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_391_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_assignment_stmt, l0);
    if (!b0)
    {
      goto block_391_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_392_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_392_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_392_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_392_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_392_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_392_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_392_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_392_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_392_end:;
    block_391_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_393_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_for_stmt, l0);
    if (!b0)
    {
      goto block_393_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_394_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_394_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_394_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_395_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_statement(l2);
      if (!b0)
      {
        goto block_395_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_395_end:;
    if (!b0)
    {
      goto block_394_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_end_val))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_394_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_start_val))
    {
      b0 = false;
      goto block_394_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_394_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_394_end:;
    block_393_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_396_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_foreach_stmt, l0);
    if (!b0)
    {
      goto block_396_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_397_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_397_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_397_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_398_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_statement(l2);
      if (!b0)
      {
        goto block_398_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_398_end:;
    if (!b0)
    {
      goto block_397_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_values))
    {
      b0 = false;
      goto block_397_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_397_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_idx_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_var(l1);
        if (!b0)
        {
          goto block_397_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_397_end:;
    block_396_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_399_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_if_stmt, l0);
    if (!b0)
    {
      goto block_399_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_400_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_400_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_401_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_statement(l2);
      if (!b0)
      {
        goto block_401_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_401_end:;
    if (!b0)
    {
      goto block_400_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_400_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_else))
    {
      b0 = false;
      goto block_400_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_402_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_402_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_statement(l2);
      if (!b0)
      {
        goto block_402_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_402_end:;
    if (!b0)
    {
      goto block_400_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_400_end:;
    block_399_end:;
    if (b0)
    {
      goto block_385_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_403_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_let_stmt, l0);
    if (!b0)
    {
      goto block_403_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_404_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_404_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_404_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_404_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_405_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_statement(l2);
      if (!b0)
      {
        goto block_405_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_405_end:;
    if (!b0)
    {
      goto block_404_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_404_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_asgnms))
    {
      b0 = false;
      goto block_404_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_map))
    {
      b0 = true;
      goto block_406_end;
    }
    if (!is_ne_map(l1))
    {
      b0 = false;
      goto block_406_end;
    }
    get_map_iter(m1, l1);
    for ( ; ; )
    {
      if (is_out_of_range(m1))
      {
        break;
      }
      l2 = get_curr_key(m1);
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_407_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_named_par, l3);
      if (!b0)
      {
        goto block_407_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_407_end:;
      if (!b0)
      {
        goto block_406_end;
      }
      l2 = get_curr_value(m1);
      b0 = is_extexpr(l2);
      if (!b0)
      {
        goto block_406_end;
      }
      move_forward(m1);
    }
    b0 = true;
    block_406_end:;
    if (!b0)
    {
      goto block_404_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_404_end:;
    block_403_end:;
    if (b0)
    {
      goto block_385_end;
    }
    block_385_end:;
    return b0;
  }
  
  
  bool is_expr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b0;
    int i0;
    int i1;
    SetIter s0;
    SeqIter q0;
    SeqIter q1;
    MapIter m0;
    MapIter m1;
  
    b0 = is_var(p0);
    if (b0)
    {
      goto block_408_end;
    }
    b0 = is_leafobj(p0);
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_409_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_not_expr, l0);
    if (!b0)
    {
      goto block_409_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_expr(l0);
    block_409_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_410_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eq, l0);
    if (!b0)
    {
      goto block_410_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_411_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_411_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_411_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_411_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_411_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_411_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_411_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_411_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_411_end:;
    block_410_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_412_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_expr, l0);
    if (!b0)
    {
      goto block_412_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_set))
    {
      b0 = true;
      goto block_413_end;
    }
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_413_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_subexpr(l1);
      if (!b0)
      {
        goto block_413_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_413_end:;
    block_412_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_414_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_membership, l0);
    if (!b0)
    {
      goto block_414_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_415_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_415_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_415_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_415_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_415_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_415_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_415_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_type(l1);
    if (!b0)
    {
      goto block_415_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_415_end:;
    block_414_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_416_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tag_obj_expr, l0);
    if (!b0)
    {
      goto block_416_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_417_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_417_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_417_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_417_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_417_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_417_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tag))
    {
      b0 = false;
      goto block_417_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_417_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_417_end:;
    block_416_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_418_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_do_expr, l0);
    if (!b0)
    {
      goto block_418_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_419_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_statement(l1);
      if (!b0)
      {
        goto block_419_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_419_end:;
    block_418_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_420_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and_expr, l0);
    if (!b0)
    {
      goto block_420_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_421_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_421_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_421_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_421_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_421_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_421_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_421_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_421_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_421_end:;
    block_420_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_422_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or_expr, l0);
    if (!b0)
    {
      goto block_422_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_423_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_423_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_423_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_423_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_423_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_423_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_423_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_423_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_423_end:;
    block_422_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_424_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ex_qual, l0);
    if (!b0)
    {
      goto block_424_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_425_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 2)))
    {
      b0 = false;
      goto block_425_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_425_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_425_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_425_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_sel_expr))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_425_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_425_end:;
    block_424_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_426_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_call, l0);
    if (!b0)
    {
      goto block_426_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_427_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_427_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_427_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_427_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_427_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_427_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_427_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_428_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_428_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_expr(l2);
      if (!b0)
      {
        goto block_428_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_428_end:;
    if (!b0)
    {
      goto block_427_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_427_end:;
    block_426_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_429_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_accessor, l0);
    if (!b0)
    {
      goto block_429_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_430_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_430_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_430_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_430_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_430_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_430_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_field))
    {
      b0 = false;
      goto block_430_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_symbobj(l1);
    if (!b0)
    {
      goto block_430_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_430_end:;
    block_429_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_431_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_accessor_test, l0);
    if (!b0)
    {
      goto block_431_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_432_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_432_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_432_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_432_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_432_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_432_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_field))
    {
      b0 = false;
      goto block_432_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_symbobj(l1);
    if (!b0)
    {
      goto block_432_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_432_end:;
    block_431_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_433_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_if_expr, l0);
    if (!b0)
    {
      goto block_433_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_434_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_434_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_434_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_else))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_434_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_then))
    {
      b0 = false;
      goto block_434_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_434_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_434_end:;
    block_433_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_435_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_builtin_call, l0);
    if (!b0)
    {
      goto block_435_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_436_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_436_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_436_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_436_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_builtin(l1);
    if (!b0)
    {
      goto block_436_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_436_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_436_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_437_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_437_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_expr(l2);
      if (!b0)
      {
        goto block_437_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_437_end:;
    if (!b0)
    {
      goto block_436_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_436_end:;
    block_435_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_438_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_expr, l0);
    if (!b0)
    {
      goto block_438_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_set))
    {
      b0 = true;
      goto block_439_end;
    }
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_439_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      if (!is_ne_map(l1))
      {
        b0 = false;
        goto block_440_end;
      }
      i0 = get_map_size(l1);
      if (!((i0 >= 2) & (i0 <= 3)))
      {
        b0 = false;
        goto block_440_end;
      }
      get_map_iter(m0, l1);
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_440_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_key))
      {
        b0 = false;
        goto block_440_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_expr(l2);
      if (!b0)
      {
        goto block_440_end;
      }
      move_forward(m0);
      if (!is_out_of_range(m0))
      {
        l2 = get_curr_key(m0);
        if (are_eq(l2, S_cond))
        {
          l2 = get_curr_value(m0);
          b0 = is_expr(l2);
          if (!b0)
          {
            goto block_440_end;
          }
          move_forward(m0);
        }
      }
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_440_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_value))
      {
        b0 = false;
        goto block_440_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_expr(l2);
      if (!b0)
      {
        goto block_440_end;
      }
      move_forward(m0);
      b0 = is_out_of_range(m0);
      block_440_end:;
      if (!b0)
      {
        goto block_439_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_439_end:;
    block_438_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_441_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_expr, l0);
    if (!b0)
    {
      goto block_441_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_442_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 2)))
    {
      b0 = false;
      goto block_442_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_442_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_head))
    {
      b0 = false;
      goto block_442_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_443_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_443_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_subexpr(l2);
      if (!b0)
      {
        goto block_443_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_443_end:;
    if (!b0)
    {
      goto block_442_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_tail))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_442_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_442_end:;
    block_441_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_444_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_comp, l0);
    if (!b0)
    {
      goto block_444_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_445_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 3)))
    {
      b0 = false;
      goto block_445_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_445_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_445_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_445_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_445_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_445_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_445_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_sel_expr))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_445_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_445_end:;
    block_444_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_446_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_replace_expr, l0);
    if (!b0)
    {
      goto block_446_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_447_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_447_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_447_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_447_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_447_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_447_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_447_end:;
    block_446_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_448_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_comp, l0);
    if (!b0)
    {
      goto block_448_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_449_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_449_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clause(l1);
    if (!b0)
    {
      goto block_449_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_expr))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_449_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_sel_expr))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_449_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_expr))
    {
      b0 = false;
      goto block_449_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_449_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_449_end:;
    block_448_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_450_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_select_expr, l0);
    if (!b0)
    {
      goto block_450_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_451_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_451_end;
    }
    get_map_iter(m0, l0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_cond))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_451_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_451_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_451_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_451_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_451_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_451_end:;
    block_450_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_452_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_comp, l0);
    if (!b0)
    {
      goto block_452_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_453_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 5)))
    {
      b0 = false;
      goto block_453_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_453_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_453_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_idx_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_var(l1);
        if (!b0)
        {
          goto block_453_end;
        }
        move_forward(m0);
      }
    }
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_sel_expr))
      {
        l1 = get_curr_value(m0);
        b0 = is_expr(l1);
        if (!b0)
        {
          goto block_453_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_453_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_expr(l1);
    if (!b0)
    {
      goto block_453_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_453_end:;
    block_452_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_454_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_match_expr, l0);
    if (!b0)
    {
      goto block_454_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_455_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_455_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_455_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cases))
    {
      b0 = false;
      goto block_455_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_456_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_457_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 2) & (i1 <= 2)))
      {
        b0 = false;
        goto block_457_end;
      }
      get_map_iter(m1, l2);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_457_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_expr))
      {
        b0 = false;
        goto block_457_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_expr(l3);
      if (!b0)
      {
        goto block_457_end;
      }
      move_forward(m1);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_457_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_ptrns))
      {
        b0 = false;
        goto block_457_end;
      }
      l3 = get_curr_value(m1);
      if (!is_ne_seq(l3))
      {
        b0 = false;
        goto block_458_end;
      }
      get_seq_iter(q1, l3);
      for ( ; ; )
      {
        if (is_out_of_range(q1))
        {
          break;
        }
        l4 = get_curr_obj(q1);
        b0 = is_pattern(l4);
        if (!b0)
        {
          goto block_458_end;
        }
        move_forward(q1);
      }
      b0 = true;
      block_458_end:;
      if (!b0)
      {
        goto block_457_end;
      }
      move_forward(m1);
      b0 = is_out_of_range(m1);
      block_457_end:;
      if (!b0)
      {
        goto block_456_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_456_end:;
    if (!b0)
    {
      goto block_455_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_455_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_exprs))
    {
      b0 = false;
      goto block_455_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_459_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_expr(l2);
      if (!b0)
      {
        goto block_459_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_459_end:;
    if (!b0)
    {
      goto block_455_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_455_end:;
    block_454_end:;
    if (b0)
    {
      goto block_408_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_460_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fn_call, l0);
    if (!b0)
    {
      goto block_460_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_461_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_461_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_461_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_462_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_462_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_extexpr(l2);
      if (!b0)
      {
        goto block_462_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_462_end:;
    if (!b0)
    {
      goto block_461_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_named_params))
    {
      b0 = false;
      goto block_461_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_map))
    {
      b0 = true;
      goto block_463_end;
    }
    if (!is_ne_map(l1))
    {
      b0 = false;
      goto block_463_end;
    }
    get_map_iter(m1, l1);
    for ( ; ; )
    {
      if (is_out_of_range(m1))
      {
        break;
      }
      l2 = get_curr_key(m1);
      if (!is_tag_obj(l2))
      {
        b0 = false;
        goto block_464_end;
      }
      l3 = get_tag(l2);
      b0 = are_eq(S_named_par, l3);
      if (!b0)
      {
        goto block_464_end;
      }
      l3 = get_inner_obj(l2);
      b0 = is_atom(l3);
      block_464_end:;
      if (!b0)
      {
        goto block_463_end;
      }
      l2 = get_curr_value(m1);
      b0 = is_extexpr(l2);
      if (!b0)
      {
        goto block_463_end;
      }
      move_forward(m1);
    }
    b0 = true;
    block_463_end:;
    if (!b0)
    {
      goto block_461_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_461_end:;
    block_460_end:;
    if (b0)
    {
      goto block_408_end;
    }
    block_408_end:;
    return b0;
  }
  
  
  bool is_synexpr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b0;
    int i0;
    int i1;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    b0 = is_var(p0);
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_466_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_const_or_var, l0);
    if (!b0)
    {
      goto block_466_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_atom(l0);
    block_466_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_467_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_not, l0);
    if (!b0)
    {
      goto block_467_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_synexpr(l0);
    block_467_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_468_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_expr, l0);
    if (!b0)
    {
      goto block_468_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_set))
    {
      b0 = true;
      goto block_469_end;
    }
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_469_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b0 = is_synsubexpr(l1);
      if (!b0)
      {
        goto block_469_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_469_end:;
    block_468_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_470_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_do_expr, l0);
    if (!b0)
    {
      goto block_470_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_471_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_synstmt(l1);
      if (!b0)
      {
        goto block_471_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_471_end:;
    block_470_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_472_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_object, l0);
    if (!b0)
    {
      goto block_472_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_int(l0);
    if (b0)
    {
      goto block_473_end;
    }
    b0 = is_atom(l0);
    if (b0)
    {
      goto block_473_end;
    }
    block_473_end:;
    block_472_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_474_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_and, l0);
    if (!b0)
    {
      goto block_474_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_475_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_475_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_475_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_475_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_475_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_475_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_475_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_475_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_475_end:;
    block_474_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_476_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_or, l0);
    if (!b0)
    {
      goto block_476_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_477_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_477_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_477_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_477_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_477_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_477_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_477_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_477_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_477_end:;
    block_476_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_478_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_eq, l0);
    if (!b0)
    {
      goto block_478_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_479_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_479_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_479_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_479_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_479_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_479_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_479_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_479_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_479_end:;
    block_478_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_480_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_neq, l0);
    if (!b0)
    {
      goto block_480_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_481_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_481_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_481_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_481_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_481_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_481_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_481_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_481_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_481_end:;
    block_480_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_482_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_membership, l0);
    if (!b0)
    {
      goto block_482_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_483_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_483_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_483_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_483_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_483_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_483_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_483_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_syntype(l1);
    if (!b0)
    {
      goto block_483_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_483_end:;
    block_482_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_484_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_tag_obj_expr, l0);
    if (!b0)
    {
      goto block_484_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_485_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_485_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_485_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_485_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_485_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_485_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tag))
    {
      b0 = false;
      goto block_485_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_485_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_485_end:;
    block_484_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_486_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_select_expr, l0);
    if (!b0)
    {
      goto block_486_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_487_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_487_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_487_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_type))
    {
      b0 = false;
      goto block_487_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_syntype(l1);
    if (!b0)
    {
      goto block_487_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_487_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_487_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_487_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_487_end:;
    block_486_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_488_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_accessor, l0);
    if (!b0)
    {
      goto block_488_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_489_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_489_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_489_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_489_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_489_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_489_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_field))
    {
      b0 = false;
      goto block_489_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_symbobj(l1);
    if (!b0)
    {
      goto block_489_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_489_end:;
    block_488_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_490_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_accessor_test, l0);
    if (!b0)
    {
      goto block_490_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_491_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_491_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_491_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_491_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_491_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_491_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_field))
    {
      b0 = false;
      goto block_491_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_symbobj(l1);
    if (!b0)
    {
      goto block_491_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_491_end:;
    block_490_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_492_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_expr, l0);
    if (!b0)
    {
      goto block_492_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_493_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 2)))
    {
      b0 = false;
      goto block_493_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_493_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_head))
    {
      b0 = false;
      goto block_493_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_494_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_494_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synsubexpr(l2);
      if (!b0)
      {
        goto block_494_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_494_end:;
    if (!b0)
    {
      goto block_493_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_tail))
      {
        l1 = get_curr_value(m0);
        b0 = is_synexpr(l1);
        if (!b0)
        {
          goto block_493_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_493_end:;
    block_492_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_495_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_builtin_call, l0);
    if (!b0)
    {
      goto block_495_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_496_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_496_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_496_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_496_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_builtin(l1);
    if (!b0)
    {
      goto block_496_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_496_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_496_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_497_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_497_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_497_end:;
    if (!b0)
    {
      goto block_496_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_496_end:;
    block_495_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_498_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_let_expr, l0);
    if (!b0)
    {
      goto block_498_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_499_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_499_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_499_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_499_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_499_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_499_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_stmts))
    {
      b0 = false;
      goto block_499_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_500_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synstmt(l2);
      if (!b0)
      {
        goto block_500_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_500_end:;
    if (!b0)
    {
      goto block_499_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_499_end:;
    block_498_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_501_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ex_qual, l0);
    if (!b0)
    {
      goto block_501_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_502_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_502_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_502_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_502_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_503_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synclause(l2);
      if (!b0)
      {
        goto block_503_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_503_end:;
    if (!b0)
    {
      goto block_502_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_502_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_sel_exprs))
    {
      b0 = false;
      goto block_502_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_504_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_504_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_504_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_504_end:;
    if (!b0)
    {
      goto block_502_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_502_end:;
    block_501_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_505_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_match_expr, l0);
    if (!b0)
    {
      goto block_505_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_506_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_506_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_506_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cases))
    {
      b0 = false;
      goto block_506_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_507_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_syncase(l2);
      if (!b0)
      {
        goto block_507_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_507_end:;
    if (!b0)
    {
      goto block_506_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_506_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_exprs))
    {
      b0 = false;
      goto block_506_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_508_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_508_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_508_end:;
    if (!b0)
    {
      goto block_506_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_506_end:;
    block_505_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_509_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_replace_expr, l0);
    if (!b0)
    {
      goto block_509_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_510_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_510_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_510_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_510_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_510_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_510_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_510_end:;
    block_509_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_511_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_expr, l0);
    if (!b0)
    {
      goto block_511_end;
    }
    l0 = get_inner_obj(p0);
    if (are_eq(l0, empty_set))
    {
      b0 = true;
      goto block_512_end;
    }
    if (!is_ne_set(l0))
    {
      b0 = false;
      goto block_512_end;
    }
    get_set_iter(s0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      if (!is_ne_map(l1))
      {
        b0 = false;
        goto block_513_end;
      }
      i0 = get_map_size(l1);
      if (!((i0 >= 2) & (i0 <= 3)))
      {
        b0 = false;
        goto block_513_end;
      }
      get_map_iter(m0, l1);
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_513_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_key))
      {
        b0 = false;
        goto block_513_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_513_end;
      }
      move_forward(m0);
      if (!is_out_of_range(m0))
      {
        l2 = get_curr_key(m0);
        if (are_eq(l2, S_cond))
        {
          l2 = get_curr_value(m0);
          b0 = is_synexpr(l2);
          if (!b0)
          {
            goto block_513_end;
          }
          move_forward(m0);
        }
      }
      if (is_out_of_range(m0))
      {
        b0 = false;
        goto block_513_end;
      }
      l2 = get_curr_key(m0);
      if (!are_eq(l2, S_value))
      {
        b0 = false;
        goto block_513_end;
      }
      l2 = get_curr_value(m0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_513_end;
      }
      move_forward(m0);
      b0 = is_out_of_range(m0);
      block_513_end:;
      if (!b0)
      {
        goto block_512_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_512_end:;
    block_511_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_514_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_fn_call, l0);
    if (!b0)
    {
      goto block_514_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_515_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_515_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_fnsymbol(l1);
    if (!b0)
    {
      goto block_515_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_516_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_516_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_extsynexpr(l2);
      if (!b0)
      {
        goto block_516_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_516_end:;
    if (!b0)
    {
      goto block_515_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_named_params))
    {
      b0 = false;
      goto block_515_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_517_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_517_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synfndef(l2);
      if (!b0)
      {
        goto block_517_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_517_end:;
    if (!b0)
    {
      goto block_515_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_515_end:;
    block_514_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_518_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_comp, l0);
    if (!b0)
    {
      goto block_518_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_519_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_519_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_519_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_520_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synclause(l2);
      if (!b0)
      {
        goto block_520_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_520_end:;
    if (!b0)
    {
      goto block_519_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_sel_exprs))
    {
      b0 = false;
      goto block_519_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_521_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_521_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_521_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_521_end:;
    if (!b0)
    {
      goto block_519_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_519_end:;
    block_518_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_522_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_if_expr, l0);
    if (!b0)
    {
      goto block_522_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_523_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_523_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_523_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_else))
    {
      b0 = false;
      goto block_523_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_523_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_523_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_branches))
    {
      b0 = false;
      goto block_523_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_524_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_525_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 2) & (i1 <= 2)))
      {
        b0 = false;
        goto block_525_end;
      }
      get_map_iter(m1, l2);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_525_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_cond))
      {
        b0 = false;
        goto block_525_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_synexpr(l3);
      if (!b0)
      {
        goto block_525_end;
      }
      move_forward(m1);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_525_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_expr))
      {
        b0 = false;
        goto block_525_end;
      }
      l3 = get_curr_value(m1);
      b0 = is_synexpr(l3);
      if (!b0)
      {
        goto block_525_end;
      }
      move_forward(m1);
      b0 = is_out_of_range(m1);
      block_525_end:;
      if (!b0)
      {
        goto block_524_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_524_end:;
    if (!b0)
    {
      goto block_523_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_523_end:;
    block_522_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_526_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_retrieve_expr, l0);
    if (!b0)
    {
      goto block_526_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_527_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_527_end;
    }
    get_map_iter(m0, l0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_cond))
      {
        l1 = get_curr_value(m0);
        b0 = is_synexpr(l1);
        if (!b0)
        {
          goto block_527_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_527_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_ptrn))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_pattern(l1);
    if (!b0)
    {
      goto block_527_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_527_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_527_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_527_end:;
    block_526_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_528_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_comp, l0);
    if (!b0)
    {
      goto block_528_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_529_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 5)))
    {
      b0 = false;
      goto block_529_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_529_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_expr))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_529_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_idx_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_var(l1);
        if (!b0)
        {
          goto block_529_end;
        }
        move_forward(m0);
      }
    }
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_sel_expr))
      {
        l1 = get_curr_value(m0);
        b0 = is_synexpr(l1);
        if (!b0)
        {
          goto block_529_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src_expr))
    {
      b0 = false;
      goto block_529_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_529_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_529_end:;
    block_528_end:;
    if (b0)
    {
      goto block_465_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_530_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_map_comp, l0);
    if (!b0)
    {
      goto block_530_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_531_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_531_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_source))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_532_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synclause(l2);
      if (!b0)
      {
        goto block_532_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_532_end:;
    if (!b0)
    {
      goto block_531_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_expr))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_531_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_sel_exprs))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_533_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_533_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_synexpr(l2);
      if (!b0)
      {
        goto block_533_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_533_end:;
    if (!b0)
    {
      goto block_531_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_expr))
    {
      b0 = false;
      goto block_531_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_synexpr(l1);
    if (!b0)
    {
      goto block_531_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_531_end:;
    block_530_end:;
    if (b0)
    {
      goto block_465_end;
    }
    block_465_end:;
    return b0;
  }
  
  
  bool is_instr(Obj p0)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b0;
    int i0;
    int i1;
    SetIter s0;
    SetIter s1;
    SeqIter q0;
    MapIter m0;
    MapIter m1;
  
    b0 = are_eq(S_terminate, p0);
    if (b0)
    {
      goto block_534_end;
    }
    b0 = are_eq(S_no_op, p0);
    if (b0)
    {
      goto block_534_end;
    }
    b0 = are_eq(S_break_loop, p0);
    if (b0)
    {
      goto block_534_end;
    }
    b0 = are_eq(S_exit_block, p0);
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_535_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_init_stream, l0);
    if (!b0)
    {
      goto block_535_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_streamvar(l0);
    block_535_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_536_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_add_ref, l0);
    if (!b0)
    {
      goto block_536_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objvar(l0);
    block_536_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_537_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_release, l0);
    if (!b0)
    {
      goto block_537_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objvar(l0);
    block_537_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_538_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_move_forward, l0);
    if (!b0)
    {
      goto block_538_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_itvar(l0);
    block_538_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_539_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_print_obj, l0);
    if (!b0)
    {
      goto block_539_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_540_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 1) & (i0 <= 1)))
    {
      b0 = false;
      goto block_540_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_540_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_540_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_540_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_540_end:;
    block_539_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_541_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_repeat, l0);
    if (!b0)
    {
      goto block_541_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_542_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_instr(l1);
      if (!b0)
      {
        goto block_542_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_542_end:;
    block_541_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_543_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_execute_block, l0);
    if (!b0)
    {
      goto block_543_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_seq(l0))
    {
      b0 = false;
      goto block_544_end;
    }
    get_seq_iter(q0, l0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b0 = is_instr(l1);
      if (!b0)
      {
        goto block_544_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_544_end:;
    block_543_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_545_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ret_val, l0);
    if (!b0)
    {
      goto block_545_end;
    }
    l0 = get_inner_obj(p0);
    b0 = is_objexpr(l0);
    if (b0)
    {
      goto block_546_end;
    }
    b0 = is_boolexpr(l0);
    if (b0)
    {
      goto block_546_end;
    }
    block_546_end:;
    block_545_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_547_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_var, l0);
    if (!b0)
    {
      goto block_547_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_548_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_548_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_548_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_548_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_548_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_548_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_548_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_548_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_548_end:;
    block_547_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_549_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_ivar, l0);
    if (!b0)
    {
      goto block_549_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_550_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_550_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_550_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_550_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intvar(l1);
    if (!b0)
    {
      goto block_550_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_550_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_550_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_550_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_550_end:;
    block_549_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_551_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_bvar, l0);
    if (!b0)
    {
      goto block_551_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_552_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_552_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_552_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_552_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolvar(l1);
    if (!b0)
    {
      goto block_552_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_552_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_552_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolexpr(l1);
    if (!b0)
    {
      goto block_552_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_552_end:;
    block_551_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_553_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_set_iter, l0);
    if (!b0)
    {
      goto block_553_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_554_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_554_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_554_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_554_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_554_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_554_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_554_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_setitvar(l1);
    if (!b0)
    {
      goto block_554_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_554_end:;
    block_553_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_555_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_seq_iter, l0);
    if (!b0)
    {
      goto block_555_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_556_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_556_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_556_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_556_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_556_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_556_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_556_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_seqitvar(l1);
    if (!b0)
    {
      goto block_556_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_556_end:;
    block_555_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_557_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_map_iter, l0);
    if (!b0)
    {
      goto block_557_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_558_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_558_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_558_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_src))
    {
      b0 = false;
      goto block_558_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_558_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_558_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_558_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_mapitvar(l1);
    if (!b0)
    {
      goto block_558_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_558_end:;
    block_557_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_559_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_internal_sort, l0);
    if (!b0)
    {
      goto block_559_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_560_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_560_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_560_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_set))
    {
      b0 = false;
      goto block_560_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_560_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_560_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_560_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_560_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_560_end:;
    block_559_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_561_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_list_to_seq, l0);
    if (!b0)
    {
      goto block_561_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_562_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_562_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_562_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_562_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_562_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_562_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_list))
    {
      b0 = false;
      goto block_562_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_562_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_562_end:;
    block_561_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_563_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_append, l0);
    if (!b0)
    {
      goto block_563_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_564_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_564_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_564_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_564_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_564_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_564_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_stream))
    {
      b0 = false;
      goto block_564_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_564_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_564_end:;
    block_563_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_565_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_set_from_stream, l0);
    if (!b0)
    {
      goto block_565_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_566_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_566_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_566_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_566_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_566_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_566_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_stream))
    {
      b0 = false;
      goto block_566_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_566_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_566_end:;
    block_565_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_567_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_seq_from_stream, l0);
    if (!b0)
    {
      goto block_567_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_568_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_568_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_568_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_568_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_568_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_568_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_stream))
    {
      b0 = false;
      goto block_568_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_568_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_568_end:;
    block_567_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_569_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_rev_seq, l0);
    if (!b0)
    {
      goto block_569_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_570_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_570_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_570_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_seq))
    {
      b0 = false;
      goto block_570_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_570_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_570_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_570_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_570_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_570_end:;
    block_569_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_571_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_to_set, l0);
    if (!b0)
    {
      goto block_571_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_572_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_572_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_572_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_seq))
    {
      b0 = false;
      goto block_572_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_572_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_572_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_572_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_572_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_572_end:;
    block_571_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_573_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_seq_to_mset, l0);
    if (!b0)
    {
      goto block_573_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_574_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b0 = false;
      goto block_574_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_574_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_seq))
    {
      b0 = false;
      goto block_574_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_574_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_574_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_574_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_574_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_574_end:;
    block_573_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_575_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_join_seqs, l0);
    if (!b0)
    {
      goto block_575_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_576_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_576_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_576_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_left))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_576_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_right))
    {
      b0 = false;
      goto block_576_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_576_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_576_end:;
    block_575_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_577_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_tagged_obj, l0);
    if (!b0)
    {
      goto block_577_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_578_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_578_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_obj))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_578_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_tag))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_578_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_578_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_578_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_578_end:;
    block_577_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_579_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_array, l0);
    if (!b0)
    {
      goto block_579_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_580_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_580_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_580_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_580_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_580_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_580_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_580_end:;
    block_579_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_581_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_set_at, l0);
    if (!b0)
    {
      goto block_581_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_582_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_582_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_idx))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_582_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_582_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value))
    {
      b0 = false;
      goto block_582_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_582_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_582_end:;
    block_581_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_583_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_call_cls, l0);
    if (!b0)
    {
      goto block_583_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_584_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_584_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_584_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_585_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_585_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_objexpr(l2);
      if (!b0)
      {
        goto block_585_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_585_end:;
    if (!b0)
    {
      goto block_584_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cls_var))
    {
      b0 = false;
      goto block_584_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_var(l1);
    if (!b0)
    {
      goto block_584_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_584_end:;
    block_583_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_586_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_set, l0);
    if (!b0)
    {
      goto block_586_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_587_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_587_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_587_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_587_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_elems))
    {
      b0 = false;
      goto block_587_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_vecvar(l1);
    if (!b0)
    {
      goto block_587_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_587_end:;
    block_586_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_588_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_seq, l0);
    if (!b0)
    {
      goto block_588_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_589_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_589_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_589_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_589_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_elems))
    {
      b0 = false;
      goto block_589_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_vecvar(l1);
    if (!b0)
    {
      goto block_589_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_589_end:;
    block_588_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_590_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_at, l0);
    if (!b0)
    {
      goto block_590_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_591_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_591_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_idx))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_591_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_seq))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_591_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_591_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_591_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_591_end:;
    block_590_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_592_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_map_from_streams, l0);
    if (!b0)
    {
      goto block_592_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_593_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_593_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_593_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key_stream))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_593_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_value_stream))
    {
      b0 = false;
      goto block_593_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_streamvar(l1);
    if (!b0)
    {
      goto block_593_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_593_end:;
    block_592_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_594_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_call_proc, l0);
    if (!b0)
    {
      goto block_594_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_595_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_595_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_595_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_name))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objfnname(l1);
    if (!b0)
    {
      goto block_595_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_params))
    {
      b0 = false;
      goto block_595_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_596_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_596_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_objexpr(l2);
      if (!b0)
      {
        goto block_596_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_596_end:;
    if (!b0)
    {
      goto block_595_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_595_end:;
    block_594_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_597_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_merge_maps, l0);
    if (!b0)
    {
      goto block_597_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_598_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_598_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_598_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_map1))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_598_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_map2))
    {
      b0 = false;
      goto block_598_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_598_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_598_end:;
    block_597_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_599_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_var_scope, l0);
    if (!b0)
    {
      goto block_599_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_600_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_600_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_value(m0);
    if (!is_tag_obj(l1))
    {
      b0 = false;
      goto block_601_end;
    }
    l2 = get_tag(l1);
    b0 = are_eq(S_named_par, l2);
    if (!b0)
    {
      goto block_601_end;
    }
    l2 = get_inner_obj(l1);
    b0 = is_atom(l2);
    block_601_end:;
    if (!b0)
    {
      goto block_600_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_602_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_602_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_602_end:;
    if (!b0)
    {
      goto block_600_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_new_value))
    {
      b0 = false;
      goto block_600_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_atomicexpr(l1);
    if (!b0)
    {
      goto block_600_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_600_end:;
    block_599_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_603_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_branch, l0);
    if (!b0)
    {
      goto block_603_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_604_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 3)))
    {
      b0 = false;
      goto block_604_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cond))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_boolexpr(l1);
    if (!b0)
    {
      goto block_604_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_when_true))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_605_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_605_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_605_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_605_end:;
    if (!b0)
    {
      goto block_604_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_when_false))
    {
      b0 = false;
      goto block_604_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_606_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_606_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_606_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_606_end:;
    if (!b0)
    {
      goto block_604_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_604_end:;
    block_603_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_607_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_mk_map, l0);
    if (!b0)
    {
      goto block_607_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_608_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_608_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_608_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_keys))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_vecvar(l1);
    if (!b0)
    {
      goto block_608_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_size))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_608_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_values))
    {
      b0 = false;
      goto block_608_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_vecvar(l1);
    if (!b0)
    {
      goto block_608_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_608_end:;
    block_607_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_609_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_lookup, l0);
    if (!b0)
    {
      goto block_609_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_610_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_610_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_610_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_map))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_610_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_610_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_610_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_success_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_boolvar(l1);
        if (!b0)
        {
          goto block_610_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_610_end:;
    block_609_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_611_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_ext_lookup, l0);
    if (!b0)
    {
      goto block_611_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_612_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 3) & (i0 <= 4)))
    {
      b0 = false;
      goto block_612_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_key))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_612_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_map))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_612_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_612_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_612_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_success_var))
      {
        l1 = get_curr_value(m0);
        b0 = is_boolvar(l1);
        if (!b0)
        {
          goto block_612_end;
        }
        move_forward(m0);
      }
    }
    b0 = is_out_of_range(m0);
    block_612_end:;
    block_611_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_613_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_get_seq_slice, l0);
    if (!b0)
    {
      goto block_613_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_614_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_614_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_len))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_614_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_seq))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_614_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objvar(l1);
    if (!b0)
    {
      goto block_614_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_idx_first))
    {
      b0 = false;
      goto block_614_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_intexpr(l1);
    if (!b0)
    {
      goto block_614_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_614_end:;
    block_613_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_615_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_cls_scope, l0);
    if (!b0)
    {
      goto block_615_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_616_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 4) & (i0 <= 4)))
    {
      b0 = false;
      goto block_616_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cls))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_clsdef(l1);
    if (!b0)
    {
      goto block_616_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_env))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_seq))
    {
      b0 = true;
      goto block_617_end;
    }
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_617_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_var(l2);
      if (!b0)
      {
        goto block_617_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_617_end:;
    if (!b0)
    {
      goto block_616_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_var))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_value(m0);
    if (!is_tag_obj(l1))
    {
      b0 = false;
      goto block_618_end;
    }
    l2 = get_tag(l1);
    b0 = are_eq(S_named_par, l2);
    if (!b0)
    {
      goto block_618_end;
    }
    l2 = get_inner_obj(l1);
    b0 = is_atom(l2);
    block_618_end:;
    if (!b0)
    {
      goto block_616_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_body))
    {
      b0 = false;
      goto block_616_end;
    }
    l1 = get_curr_value(m0);
    if (!is_ne_seq(l1))
    {
      b0 = false;
      goto block_619_end;
    }
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l2 = get_curr_obj(q0);
      b0 = is_instr(l2);
      if (!b0)
      {
        goto block_619_end;
      }
      move_forward(q0);
    }
    b0 = true;
    block_619_end:;
    if (!b0)
    {
      goto block_616_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_616_end:;
    block_615_end:;
    if (b0)
    {
      goto block_534_end;
    }
    if (!is_tag_obj(p0))
    {
      b0 = false;
      goto block_620_end;
    }
    l0 = get_tag(p0);
    b0 = are_eq(S_symbol_switch, l0);
    if (!b0)
    {
      goto block_620_end;
    }
    l0 = get_inner_obj(p0);
    if (!is_ne_map(l0))
    {
      b0 = false;
      goto block_621_end;
    }
    i0 = get_map_size(l0);
    if (!((i0 >= 2) & (i0 <= 3)))
    {
      b0 = false;
      goto block_621_end;
    }
    get_map_iter(m0, l0);
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_621_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_val))
    {
      b0 = false;
      goto block_621_end;
    }
    l1 = get_curr_value(m0);
    b0 = is_objexpr(l1);
    if (!b0)
    {
      goto block_621_end;
    }
    move_forward(m0);
    if (!is_out_of_range(m0))
    {
      l1 = get_curr_key(m0);
      if (are_eq(l1, S_else))
      {
        l1 = get_curr_value(m0);
        if (!is_ne_seq(l1))
        {
          b0 = false;
          goto block_622_end;
        }
        get_seq_iter(q0, l1);
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          l2 = get_curr_obj(q0);
          b0 = is_instr(l2);
          if (!b0)
          {
            goto block_622_end;
          }
          move_forward(q0);
        }
        b0 = true;
        block_622_end:;
        if (!b0)
        {
          goto block_621_end;
        }
        move_forward(m0);
      }
    }
    if (is_out_of_range(m0))
    {
      b0 = false;
      goto block_621_end;
    }
    l1 = get_curr_key(m0);
    if (!are_eq(l1, S_cases))
    {
      b0 = false;
      goto block_621_end;
    }
    l1 = get_curr_value(m0);
    if (are_eq(l1, empty_set))
    {
      b0 = true;
      goto block_623_end;
    }
    if (!is_ne_set(l1))
    {
      b0 = false;
      goto block_623_end;
    }
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      if (!is_ne_map(l2))
      {
        b0 = false;
        goto block_624_end;
      }
      i1 = get_map_size(l2);
      if (!((i1 >= 2) & (i1 <= 2)))
      {
        b0 = false;
        goto block_624_end;
      }
      get_map_iter(m1, l2);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_624_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_vals))
      {
        b0 = false;
        goto block_624_end;
      }
      l3 = get_curr_value(m1);
      if (!is_ne_set(l3))
      {
        b0 = false;
        goto block_625_end;
      }
      get_set_iter(s1, l3);
      for ( ; ; )
      {
        if (is_out_of_range(s1))
        {
          break;
        }
        l4 = get_curr_obj(s1);
        b0 = is_symbobj(l4);
        if (!b0)
        {
          goto block_625_end;
        }
        move_forward(s1);
      }
      b0 = true;
      block_625_end:;
      if (!b0)
      {
        goto block_624_end;
      }
      move_forward(m1);
      if (is_out_of_range(m1))
      {
        b0 = false;
        goto block_624_end;
      }
      l3 = get_curr_key(m1);
      if (!are_eq(l3, S_instrs))
      {
        b0 = false;
        goto block_624_end;
      }
      l3 = get_curr_value(m1);
      if (are_eq(l3, empty_seq))
      {
        b0 = true;
        goto block_626_end;
      }
      if (!is_ne_seq(l3))
      {
        b0 = false;
        goto block_626_end;
      }
      get_seq_iter(q0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        l4 = get_curr_obj(q0);
        b0 = is_instr(l4);
        if (!b0)
        {
          goto block_626_end;
        }
        move_forward(q0);
      }
      b0 = true;
      block_626_end:;
      if (!b0)
      {
        goto block_624_end;
      }
      move_forward(m1);
      b0 = is_out_of_range(m1);
      block_624_end:;
      if (!b0)
      {
        goto block_623_end;
      }
      move_forward(s0);
    }
    b0 = true;
    block_623_end:;
    if (!b0)
    {
      goto block_621_end;
    }
    move_forward(m0);
    b0 = is_out_of_range(m0);
    block_621_end:;
    block_620_end:;
    if (b0)
    {
      goto block_534_end;
    }
    block_534_end:;
    return b0;
  }
  
  
  
  
  
  
  Obj cls_0(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj v_b;
  
    v_b = p0;
    l1 = ext_lookup(v_b, S_label);
    add_ref(l1);
    return l1;
  }
  
  
  Obj cls_1(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj v_f;
  
    v_f = p0;
    l1 = ext_lookup(v_f, S_label);
    add_ref(l1);
    return l1;
  }
  
  
  Obj cls_2(Obj p0, Obj p1, const Obj C[], Env &env)
  {
    Obj l2;
    Obj v_s1;
    Obj v_s2;
  
    v_s1 = p0;
    v_s2 = p1;
    l2 = lower(v_s1, v_s2, env);
    return l2;
  }
  
  
  Obj cls_3(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj v_cls;
    Obj v_sorted_cls_defs;
  
    v_cls = p0;
    v_sorted_cls_defs = C[0];
    l1 = Index_First(v_cls, v_sorted_cls_defs, env);
    return l1;
  }
  
  
  Obj cls_4(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = u0;
      add_ref(l1);
      goto block_627_end;
    }
    fail();
    block_627_end:;
    return l1;
  }
  
  
  Obj cls_5(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = u0;
      add_ref(l2);
      goto block_628_end;
    }
    fail();
    block_628_end:;
    return l2;
  }
  
  
  Obj cls_6(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l3;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l3 = u0;
      add_ref(l3);
      goto block_629_end;
    }
    fail();
    block_629_end:;
    return l3;
  }
  
  
  Obj cls_7(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l4;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l4 = u0;
      add_ref(l4);
      goto block_630_end;
    }
    fail();
    block_630_end:;
    return l4;
  }
  
  
  Obj cls_8(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_symbobj(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = u0;
      add_ref(l2);
      goto block_631_end;
    }
    fail();
    block_631_end:;
    return l2;
  }
  
  
  Obj cls_9(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_typesymbol(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = u0;
      add_ref(l1);
      goto block_632_end;
    }
    fail();
    block_632_end:;
    return l1;
  }
  
  
  Obj cls_10(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_partypesymbol(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = u0;
      add_ref(l2);
      goto block_633_end;
    }
    fail();
    block_633_end:;
    return l2;
  }
  
  
  Obj cls_11(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_clsdef(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = u0;
      add_ref(l1);
      goto block_634_end;
    }
    fail();
    block_634_end:;
    return l1;
  }
  
  
  Obj cls_12(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    bool b1;
    Obj v_t;
  
    b1 = is_type(p0);
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l1 = Norm_Type(v_t, env);
      goto block_635_end;
    }
    fail();
    block_635_end:;
    return l1;
  }
  
  
  Obj cls_13(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj v_ts;
    Obj v_ptss;
  
    v_ts = p0;
    v_ptss = C[0];
    l1 = Compile_To_C__Typesymb2str(v_ts, v_ptss, env);
    return l1;
  }
  
  
  Obj cls_14(Obj p0, const Obj C[], Env &env)
  {
    Obj l10;
    Obj v_ts;
    Obj v_ptss;
  
    v_ts = p0;
    v_ptss = C[0];
    l10 = Compile_To_C__Typesymb2str(v_ts, v_ptss, env);
    return l10;
  }
  
  
  Obj cls_15(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    bool b1;
    Obj v_t;
  
    b1 = is_type(p0);
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_636_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_636_end;
    }
    fail();
    block_636_end:;
    return l1;
  }
  
  
  Obj cls_16(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_637_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_637_end;
    }
    fail();
    block_637_end:;
    return l1;
  }
  
  
  Obj cls_17(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = S_true;
      goto block_638_end;
    }
    b1 = true;
    if (b1)
    {
      l2 = S_false;
      goto block_638_end;
    }
    fail();
    block_638_end:;
    return l2;
  }
  
  
  Obj cls_18(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l3;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l3 = S_true;
      goto block_639_end;
    }
    b1 = true;
    if (b1)
    {
      l3 = S_false;
      goto block_639_end;
    }
    fail();
    block_639_end:;
    return l3;
  }
  
  
  Obj cls_19(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l4;
    bool b1;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l4 = S_true;
      goto block_640_end;
    }
    b1 = true;
    if (b1)
    {
      l4 = S_false;
      goto block_640_end;
    }
    fail();
    block_640_end:;
    return l4;
  }
  
  
  Obj cls_20(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_symbobj(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = S_true;
      goto block_641_end;
    }
    b1 = true;
    if (b1)
    {
      l2 = S_false;
      goto block_641_end;
    }
    fail();
    block_641_end:;
    return l2;
  }
  
  
  Obj cls_21(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_typesymbol(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_642_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_642_end;
    }
    fail();
    block_642_end:;
    return l1;
  }
  
  
  Obj cls_22(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_partypesymbol(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = S_true;
      goto block_643_end;
    }
    b1 = true;
    if (b1)
    {
      l2 = S_false;
      goto block_643_end;
    }
    fail();
    block_643_end:;
    return l2;
  }
  
  
  Obj cls_23(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l1;
    bool b1;
  
    b1 = is_clsdef(p0);
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_644_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_644_end;
    }
    fail();
    block_644_end:;
    return l1;
  }
  
  
  Obj cls_24(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    bool b1;
    Obj v_t;
  
    b1 = is_uniontype(p0);
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_645_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_645_end;
    }
    fail();
    block_645_end:;
    return l1;
  }
  
  
  Obj cls_25(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    bool b1;
    Obj v_v;
  
    b1 = is_typevar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_646_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_646_end;
    }
    fail();
    block_646_end:;
    return l1;
  }
  
  
  Obj cls_26(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    bool b1;
    Obj v_t;
  
    b1 = is_uniontype(p0);
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l1 = Norm_Type__Norm_Union_Type(v_t, env);
      goto block_647_end;
    }
    fail();
    block_647_end:;
    return l1;
  }
  
  
  Obj cls_27(Obj p0, Obj p1, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    Obj l3;
    Obj v_f1;
    Obj v_f2;
  
    v_f1 = p0;
    v_f2 = p1;
    l2 = ext_lookup(v_f1, S_label);
    add_ref(l2);
    l3 = ext_lookup(v_f2, S_label);
    add_ref(l3);
    l1 = lower(l2, l3, env);
    release(l3);
    release(l2);
    return l1;
  }
  
  
  Obj cls_28(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    int i0;
    Obj V0[2];
    Obj v_fd;
  
    v_fd = p0;
    i0 = 0;
    V0[i0] = ext_lookup(v_fd, S_name);
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = Arity(v_fd, env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    return l1;
  }
  
  
  Obj cls_29(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_anyvar(p0);
    if (b1)
    {
      goto block_649_end;
    }
    b1 = is_clsdef(p0);
    if (b1)
    {
      goto block_649_end;
    }
    block_649_end:;
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = u0;
      add_ref(l2);
      goto block_648_end;
    }
    fail();
    block_648_end:;
    return l2;
  }
  
  
  Obj cls_30(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_ts;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_651_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_memb_test);
    if (!b1)
    {
      goto block_651_end;
    }
    l2 = get_inner_obj(p0);
    v_ts = l2;
    b1 = true;
    block_651_end:;
    if (b1)
    {
      l1 = v_ts;
      add_ref(l1);
      goto block_650_end;
    }
    fail();
    block_650_end:;
    return l1;
  }
  
  
  Obj cls_31(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    bool b1;
  
    b1 = is_anyvar(p0);
    if (b1)
    {
      goto block_653_end;
    }
    b1 = is_clsdef(p0);
    if (b1)
    {
      goto block_653_end;
    }
    block_653_end:;
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = S_true;
      goto block_652_end;
    }
    b1 = true;
    if (b1)
    {
      l2 = S_false;
      goto block_652_end;
    }
    fail();
    block_652_end:;
    return l2;
  }
  
  
  Obj cls_32(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    Obj l3;
    bool b1;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_655_end;
    }
    l3 = get_tag(p0);
    b1 = are_eq(S_return_stmt, l3);
    if (!b1)
    {
      goto block_655_end;
    }
    l3 = get_inner_obj(p0);
    b1 = is_any(l3);
    block_655_end:;
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = u0;
      add_ref(l2);
      goto block_654_end;
    }
    fail();
    block_654_end:;
    return l2;
  }
  
  
  Obj cls_33(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_ts;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_657_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_memb_test);
    if (!b1)
    {
      goto block_657_end;
    }
    l2 = get_inner_obj(p0);
    v_ts = l2;
    b1 = true;
    block_657_end:;
    if (b1)
    {
      l1 = S_true;
      goto block_656_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_656_end;
    }
    fail();
    block_656_end:;
    return l1;
  }
  
  
  Obj cls_34(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_v;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_659_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_ext_var_ptrn);
    if (!b1)
    {
      goto block_659_end;
    }
    l2 = get_inner_obj(p0);
    b1 = is_var(l2);
    if (b1)
    {
      v_v = l2;
    }
    block_659_end:;
    if (b1)
    {
      l1 = v_v;
      add_ref(l1);
      goto block_658_end;
    }
    fail();
    block_658_end:;
    return l1;
  }
  
  
  Obj cls_35(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_p;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_661_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_var_ptrn);
    if (!b1)
    {
      goto block_661_end;
    }
    l2 = get_inner_obj(p0);
    b1 = true;
    block_661_end:;
    if (b1)
    {
      v_p = p0;
    }
    if (b1)
    {
      l1 = S_true;
      goto block_660_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_660_end;
    }
    fail();
    block_660_end:;
    return l1;
  }
  
  
  Obj cls_36(Obj p0, const Obj C[], Env &env)
  {
    Obj u0;
    Obj l2;
    Obj l3;
    bool b1;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_663_end;
    }
    l3 = get_tag(p0);
    b1 = are_eq(S_return_stmt, l3);
    if (!b1)
    {
      goto block_663_end;
    }
    l3 = get_inner_obj(p0);
    b1 = is_any(l3);
    block_663_end:;
    if (b1)
    {
      u0 = p0;
    }
    if (b1)
    {
      l2 = S_true;
      goto block_662_end;
    }
    b1 = true;
    if (b1)
    {
      l2 = S_false;
      goto block_662_end;
    }
    fail();
    block_662_end:;
    return l2;
  }
  
  
  Obj cls_37(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_v;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_665_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_ext_var_ptrn);
    if (!b1)
    {
      goto block_665_end;
    }
    l2 = get_inner_obj(p0);
    b1 = is_var(l2);
    if (b1)
    {
      v_v = l2;
    }
    block_665_end:;
    if (b1)
    {
      l1 = S_true;
      goto block_664_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = S_false;
      goto block_664_end;
    }
    fail();
    block_664_end:;
    return l1;
  }
  
  
  Obj cls_38(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Obj v_symb;
    Obj v_v;
    Obj v_par_tdef;
  
    v_symb = C[0];
    v_par_tdef = C[1];
    b1 = is_typevar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      l2 = ext_lookup(v_symb, S_params);
      add_ref(l2);
      l4 = ext_lookup(v_par_tdef, S_params);
      add_ref(l4);
      l3 = Index_First(v_v, l4, env);
      release(l4);
      l1 = brackets(l2, l3, env);
      release(l3);
      release(l2);
      goto block_666_end;
    }
    fail();
    block_666_end:;
    return l1;
  }
  
  
  Obj cls_39(Obj p0, const Obj C[], Env &env)
  {
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    Obj v_p;
    Obj v_def_vars;
  
    v_def_vars = C[0];
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_668_end;
    }
    l2 = get_tag(p0);
    b1 = are_eq(l2, S_var_ptrn);
    if (!b1)
    {
      goto block_668_end;
    }
    l2 = get_inner_obj(p0);
    b1 = true;
    block_668_end:;
    if (b1)
    {
      v_p = p0;
    }
    if (b1)
    {
      l3 = ext_lookup(v_p, S_name);
      add_ref(l3);
      l2 = In(l3, v_def_vars, env);
      release(l3);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = ext_lookup(v_p, S_name);
        add_ref(l2);
        l1 = make_tagged_obj(S_ext_var_ptrn, l2);
      }
      else
      {
        l1 = v_p;
        add_ref(l1);
      }
      goto block_667_end;
    }
    fail();
    block_667_end:;
    return l1;
  }
  
  
  
  
  
  
  Obj Empty_Set(Env &env)
  {
    Obj l0;
  
    l0 = S_empty_set;
    return l0;
  }
  
  
  Obj Empty_Seq(Env &env)
  {
    Obj l0;
  
    l0 = S_empty_seq;
    return l0;
  }
  
  
  Obj Empty_Map(Env &env)
  {
    Obj l0;
  
    l0 = S_empty_map;
    return l0;
  }
  
  
  Obj Unique_Int(Env &env)
  {
    Obj l0;
  
    l0 = S_unique_int;
    return l0;
  }
  
  
  Obj Ascii_Minus(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(45);
    return l0;
  }
  
  
  Obj Ascii_Space(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(32);
    return l0;
  }
  
  
  Obj Ascii_Newline(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(10);
    return l0;
  }
  
  
  Obj Ascii_Comma(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(44);
    return l0;
  }
  
  
  Obj Ascii_Left_Parenthesis(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(40);
    return l0;
  }
  
  
  Obj Ascii_Right_Parenthesis(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(41);
    return l0;
  }
  
  
  Obj Terminate(Env &env)
  {
    Obj l0;
  
    l0 = S_terminate;
    return l0;
  }
  
  
  Obj Ascii_Double_Quotes(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(34);
    return l0;
  }
  
  
  Obj No_Op(Env &env)
  {
    Obj l0;
  
    l0 = S_no_op;
    return l0;
  }
  
  
  Obj Break_Loop(Env &env)
  {
    Obj l0;
  
    l0 = S_break_loop;
    return l0;
  }
  
  
  Obj Ascii_Column(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(58);
    return l0;
  }
  
  
  Obj Exit_Block(Env &env)
  {
    Obj l0;
  
    l0 = S_exit_block;
    return l0;
  }
  
  
  Obj Ascii_Left_Bracket(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(91);
    return l0;
  }
  
  
  Obj Ascii_Right_Bracket(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(93);
    return l0;
  }
  
  
  Obj Ascii_Underscore(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(95);
    return l0;
  }
  
  
  Obj Ascii_Backslash(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(92);
    return l0;
  }
  
  
  Obj Ascii_Left_Brace(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(123);
    return l0;
  }
  
  
  Obj Left_Parenthesis(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_left, S_parenthesis);
    return l0;
  }
  
  
  Obj Right_Parenthesis(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_right, S_parenthesis);
    return l0;
  }
  
  
  Obj Left_Bracket(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_left, S_bracket);
    return l0;
  }
  
  
  Obj Right_Bracket(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_right, S_bracket);
    return l0;
  }
  
  
  Obj Ascii_Right_Brace(Env &env)
  {
    Obj l0;
  
    l0 = to_obj(125);
    return l0;
  }
  
  
  Obj Left_Brace(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_left, S_brace);
    return l0;
  }
  
  
  Obj Right_Brace(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_right, S_brace);
    return l0;
  }
  
  
  Obj Obj_True(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_object, S_true);
    return l0;
  }
  
  
  Obj Obj_False(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_object, S_false);
    return l0;
  }
  
  
  Obj Obj_Nil(Env &env)
  {
    Obj l0;
  
    l0 = make_tagged_obj(S_object, S_nil);
    return l0;
  }
  
  
  Obj Ret_True(Env &env)
  {
    Obj l0;
  
    l0 = Ret_Val(S_true, env);
    return l0;
  }
  
  
  Obj Ret_False(Env &env)
  {
    Obj l0;
  
    l0 = Ret_Val(S_false, env);
    return l0;
  }
  
  
  Obj Rand_Sort(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_set;
  
    v_set = p0;
    l0 = internal_sort(v_set);
    return l0;
  }
  
  
  Obj Set(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_seq;
  
    v_seq = p0;
    l0 = seq_to_set(v_seq);
    return l0;
  }
  
  
  Obj Left(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = get_at(v_s, get_int_val(to_obj(0)));
    return l0;
  }
  
  
  Obj Right(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = get_at(v_s, get_int_val(to_obj(1)));
    return l0;
  }
  
  
  Obj Head(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = get_at(v_s, get_int_val(to_obj(0)));
    return l0;
  }
  
  
  Obj minus(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    l0 = to_obj(-get_int_val(v_n));
    return l0;
  }
  
  
  Obj Symbol(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_a;
  
    v_a = p0;
    add_ref(v_a);
    l0 = make_tagged_obj(S_symbol, v_a);
    return l0;
  }
  
  
  Obj Label(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_a;
  
    v_a = p0;
    add_ref(v_a);
    l0 = make_tagged_obj(S_label, v_a);
    return l0;
  }
  
  
  Obj At_Least_One(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = In(S_true, v_s, env);
    return l0;
  }
  
  
  Obj Not_All(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = In(S_true, v_s, env);
    return l0;
  }
  
  
  Obj Minus(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_minus, v_e);
    return l0;
  }
  
  
  Obj Neg(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_neg, v_e);
    return l0;
  }
  
  
  Obj Fn_Par(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_fn_par, v_n);
    return l0;
  }
  
  
  Obj And(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_es;
  
    v_es = p0;
    add_ref(v_es);
    l0 = make_tagged_obj(S_and, v_es);
    return l0;
  }
  
  
  Obj Or(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_es;
  
    v_es = p0;
    add_ref(v_es);
    l0 = make_tagged_obj(S_or, v_es);
    return l0;
  }
  
  
  Obj String(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_raw;
  
    v_raw = p0;
    add_ref(v_raw);
    l0 = make_tagged_obj(S_string, v_raw);
    return l0;
  }
  
  
  Obj Cls_Ext_Par(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_cls_ext_par, v_n);
    return l0;
  }
  
  
  Obj Lvar(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_lvar, v_n);
    return l0;
  }
  
  
  Obj Bvar(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_bvar, v_n);
    return l0;
  }
  
  
  Obj Ivar(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_ivar, v_n);
    return l0;
  }
  
  
  Obj Svar(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_svar, v_n);
    return l0;
  }
  
  
  Obj Set_It_Var(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_set_it_var, v_n);
    return l0;
  }
  
  
  Obj Seq_It_Var(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_seq_it_var, v_n);
    return l0;
  }
  
  
  Obj Map_It_Var(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_n;
  
    v_n = p0;
    add_ref(v_n);
    l0 = make_tagged_obj(S_map_it_var, v_n);
    return l0;
  }
  
  
  Obj Is_Symb(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_symb, v_e);
    return l0;
  }
  
  
  Obj Is_Int(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_int, v_e);
    return l0;
  }
  
  
  Obj Is_Ne_Set(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_ne_set, v_e);
    return l0;
  }
  
  
  Obj Is_Ne_Seq(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_ne_seq, v_e);
    return l0;
  }
  
  
  Obj Is_Ne_Map(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_ne_map, v_e);
    return l0;
  }
  
  
  Obj Is_Tagged_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_is_tagged_obj, v_e);
    return l0;
  }
  
  
  Obj Get_Int_Val(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_int_val, v_e);
    return l0;
  }
  
  
  Obj Get_Set_Size(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_set_size, v_e);
    return l0;
  }
  
  
  Obj Get_Seq_Len(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_seq_len, v_e);
    return l0;
  }
  
  
  Obj Get_Map_Size(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_map_size, v_e);
    return l0;
  }
  
  
  Obj Get_Tag(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_tag, v_e);
    return l0;
  }
  
  
  Obj Get_Inner_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_get_inner_obj, v_e);
    return l0;
  }
  
  
  Obj To_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_to_obj, v_e);
    return l0;
  }
  
  
  Obj To_Symb(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_to_symb, v_e);
    return l0;
  }
  
  
  Obj Flow_Control_Can_Jump_Out(Obj p0, Env &env)
  {
    Obj v_stmts;
    Obj l0;
  
    v_stmts = p0;
    l0 = Flow_Control_Can_Jump_Out(v_stmts, S_false, env);
    return l0;
  }
  
  
  Obj Repeat(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_b;
  
    v_b = p0;
    add_ref(v_b);
    l0 = make_tagged_obj(S_repeat, v_b);
    return l0;
  }
  
  
  Obj Execute_Block(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_b;
  
    v_b = p0;
    add_ref(v_b);
    l0 = make_tagged_obj(S_execute_block, v_b);
    return l0;
  }
  
  
  Obj Ret_Val(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_e;
  
    v_e = p0;
    add_ref(v_e);
    l0 = make_tagged_obj(S_ret_val, v_e);
    return l0;
  }
  
  
  Obj Is_Out_Of_Range(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_v;
  
    v_v = p0;
    add_ref(v_v);
    l0 = make_tagged_obj(S_is_out_of_range, v_v);
    return l0;
  }
  
  
  Obj Init_Stream(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_v;
  
    v_v = p0;
    add_ref(v_v);
    l0 = make_tagged_obj(S_init_stream, v_v);
    return l0;
  }
  
  
  Obj Move_Forward(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_v;
  
    v_v = p0;
    add_ref(v_v);
    l0 = make_tagged_obj(S_move_forward, v_v);
    return l0;
  }
  
  
  Obj Add_Ref(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_v;
  
    v_v = p0;
    add_ref(v_v);
    l0 = make_tagged_obj(S_add_ref, v_v);
    return l0;
  }
  
  
  Obj Release(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_v;
  
    v_v = p0;
    add_ref(v_v);
    l0 = make_tagged_obj(S_release, v_v);
    return l0;
  }
  
  
  Obj And_Then(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_es;
  
    v_es = p0;
    add_ref(v_es);
    l0 = make_tagged_obj(S_and_then, v_es);
    return l0;
  }
  
  
  Obj Or_Else(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_es;
  
    v_es = p0;
    add_ref(v_es);
    l0 = make_tagged_obj(S_or_else, v_es);
    return l0;
  }
  
  
  Obj Sort(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = Mergesort(v_s, env);
    return l0;
  }
  
  
  Obj Memb_Test(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_ts;
  
    v_ts = p0;
    add_ref(v_ts);
    l0 = make_tagged_obj(S_memb_test, v_ts);
    return l0;
  }
  
  
  Obj greater(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l0 = lower(v_b, v_a, env);
    return l0;
  }
  
  
  Obj Get_Curr_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_it;
  
    v_it = p0;
    add_ref(v_it);
    l0 = make_tagged_obj(S_get_curr_obj, v_it);
    return l0;
  }
  
  
  Obj Get_Curr_Key(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_it;
  
    v_it = p0;
    add_ref(v_it);
    l0 = make_tagged_obj(S_get_curr_key, v_it);
    return l0;
  }
  
  
  Obj Get_Curr_Value(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_it;
  
    v_it = p0;
    add_ref(v_it);
    l0 = make_tagged_obj(S_get_curr_value, v_it);
    return l0;
  }
  
  
  Obj To_Text(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj l0;
  
    v_obj = p0;
    l0 = To_Text__To_Txt(v_obj, env);
    goto block_669_end;
    block_669_end:;
    return l0;
  }
  
  
  Obj Seq_Union(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_sets;
  
    v_sets = p0;
    l1 = Set(v_sets, env);
    l0 = Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Break_If_Not(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Break_Loop(env);
    l0 = Do_If_Not(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Break_If(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Break_Loop(env);
    l0 = Do_If(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Exit_Block_If_Not(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Exit_Block(env);
    l0 = Do_If_Not(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Exit_Block_If(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Exit_Block(env);
    l0 = Do_If(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Size(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_s;
  
    v_s = p0;
    l1 = Rand_Sort(v_s, env);
    l0 = Length(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_Empty_Set(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Empty_Set(env);
    l0 = Is_Eq(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_Empty_Seq(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Empty_Seq(env);
    l0 = Is_Eq(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_Empty_Map(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Empty_Map(env);
    l0 = Is_Eq(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj plus(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l0 = to_obj(get_int_val(v_a) + get_int_val(v_b));
    return l0;
  }
  
  
  Obj Is_Singleton(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_s;
  
    v_s = p0;
    l1 = Size(v_s, env);
    l0 = to_obj(are_eq(l1, to_obj(1)));
    release(l1);
    return l0;
  }
  
  
  Obj Indexes(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_s;
  
    v_s = p0;
    l1 = Length(v_s, env);
    l0 = Inc_Seq(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Dec_Seq(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_n;
  
    v_n = p0;
    l1 = Inc_Seq(v_n, env);
    l0 = Reverse(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Ret_True_If(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Ret_True(env);
    l0 = Do_If(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Ret_True_If_Not(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Ret_True(env);
    l0 = Do_If_Not(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Ret_False_If(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Ret_False(env);
    l0 = Do_If(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Ret_False_If_Not(Obj p0, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
  
    v_cond = p0;
    l1 = Ret_False(env);
    l0 = Do_If_Not(v_cond, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj At(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_str;
    Obj v_idx;
  
    v_str = p0;
    v_idx = p1;
    l1 = Untag(v_str, env);
    l0 = At(l1, v_idx, S_nil, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_True(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Obj_True(env);
    l0 = Is_Eq(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_False(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Obj_False(env);
    l0 = Is_Eq(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Check(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Terminate(env);
    l0 = Do_If_Not(v_e, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Increment(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_v;
  
    v_v = p0;
    l1 = Add(v_v, to_obj(1), env);
    l0 = Set_Ivar(v_v, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Sort_Set(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_s;
  
    v_s = p0;
    l1 = Rand_Sort(v_s, env);
    l0 = Sort(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Simplify(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
  
    v_expr = p0;
    l0 = Simplify__Make(v_expr, env);
    goto block_670_end;
    block_670_end:;
    return l0;
  }
  
  
  Obj Check_Is_Bool(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_e;
  
    v_e = p0;
    l1 = Is_Bool(v_e, env);
    l0 = Check(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Rep_Str(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_len;
    Obj v_ch;
  
    v_len = p0;
    v_ch = p1;
    l1 = Rep_Seq(v_len, v_ch, env);
    l0 = String(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Subseq(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj v_seq;
    Obj v_first;
    Obj v_count;
  
    v_seq = p0;
    v_first = p1;
    v_count = p2;
    l0 = get_seq_slice(v_seq, get_int_val(v_first), get_int_val(v_count));
    return l0;
  }
  
  
  Obj Rand_Elem(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
    Obj v_ses;
  
    v_s = p0;
    v_ses = Rand_Sort(v_s, env);
    l0 = brackets(v_ses, to_obj(0), env);
    release(v_ses);
    goto block_671_end;
    block_671_end:;
    return l0;
  }
  
  
  Obj Get_Curr_Obj(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_v;
    Obj v_it;
  
    v_v = p0;
    v_it = p1;
    l1 = Get_Curr_Obj(v_it, env);
    l0 = Set_Var(v_v, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Get_Curr_Key(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_v;
    Obj v_it;
  
    v_v = p0;
    v_it = p1;
    l1 = Get_Curr_Key(v_it, env);
    l0 = Set_Var(v_v, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Get_Curr_Value(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_v;
    Obj v_it;
  
    v_v = p0;
    v_it = p1;
    l1 = Get_Curr_Value(v_it, env);
    l0 = Set_Var(v_v, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Last(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s;
  
    v_s = p0;
    l2 = to_obj(get_seq_len(v_s));
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    l0 = get_at(v_s, get_int_val(l1));
    release(l1);
    return l0;
  }
  
  
  Obj Tail(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s;
  
    v_s = p0;
    l2 = to_obj(get_seq_len(v_s));
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    l0 = get_seq_slice(v_s, get_int_val(to_obj(1)), get_int_val(l1));
    release(l1);
    return l0;
  }
  
  
  Obj Block_Failure_If_Not(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_res_var;
    Obj v_c;
  
    v_c = p0;
    v_res_var = p1;
    l1 = Neg(v_c, env);
    l0 = Block_Failure_If(l1, v_res_var, env);
    release(l1);
    return l0;
  }
  
  
  Obj Is_Bool(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_e;
  
    v_e = p0;
    l1 = Is_True(v_e, env);
    l2 = Is_False(v_e, env);
    l0 = Or(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj To_Text(Obj p0, Obj p1, Env &env)
  {
    Obj v_obj;
    Obj l0;
    Obj l1;
    Obj v_line_len;
  
    v_obj = p0;
    v_line_len = p1;
    l1 = To_Text(v_obj, env);
    l0 = To_Text__Wrap(l1, v_line_len, env);
    release(l1);
    goto block_672_end;
    block_672_end:;
    return l0;
  }
  
  
  Obj Subset(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s1;
    Obj v_s2;
  
    v_s1 = p0;
    v_s2 = p1;
    l1 = minus(v_s1, v_s2, env);
    l2 = empty_set;
    l0 = to_obj(are_eq(l1, l2));
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Disjoint(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s1;
    Obj v_s2;
  
    v_s1 = p0;
    v_s2 = p1;
    l1 = Intersection(v_s1, v_s2, env);
    l2 = empty_set;
    l0 = to_obj(are_eq(l1, l2));
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Stmts_Are_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj v_scalar_vars;
  
    v_stmts = p0;
    v_scalar_vars = p1;
    l0 = Stmts_Are_Wf(v_stmts, v_scalar_vars, S_false, S_true, env);
    return l0;
  }
  
  
  Obj Rev_At(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj v_idx;
    Obj v_seq;
  
    v_seq = p0;
    v_idx = p1;
    l3 = to_obj(get_seq_len(v_seq));
    l2 = minus(l3, v_idx, env);
    release(l3);
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    l0 = get_at(v_seq, get_int_val(l1));
    release(l1);
    return l0;
  }
  
  
  Obj None(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_s;
  
    v_s = p0;
    l0 = In(S_true, v_s, env);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    return l0;
  }
  
  
  Obj Substr(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s;
    Obj v_n;
    Obj v_m;
  
    v_s = p0;
    v_n = p1;
    v_m = p2;
    l2 = Untag(v_s, env);
    l1 = Subseq(l2, v_n, v_m, env);
    release(l2);
    l0 = String(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Print_Obj(Obj p0, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[1];
    Obj V1[1];
  
    v_x = p0;
    i0 = 0;
    V0[i0] = S_obj;
    V1[i0] = v_x;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_print_obj, l1);
    return l0;
  }
  
  
  Obj Is_Between(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_e;
    Obj v_l;
    Obj v_u;
  
    v_e = p0;
    v_l = p1;
    v_u = p2;
    l1 = Is_Ge(v_e, v_l, env);
    l2 = Is_Le(v_e, v_u, env);
    l0 = And(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Maybe_Op(Obj p0, Obj p1, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj v_instr;
  
    v_instr = p0;
    v_cond = p1;
    if (!(are_eq(v_cond, S_true) | are_eq(v_cond, S_false)))
    {
      fail();
    }
    if (are_eq(v_cond, S_true))
    {
      l0 = v_instr;
      add_ref(l0);
    }
    else
    {
      l0 = No_Op(env);
    }
    return l0;
  }
  
  
  Obj Are_Compatible(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_t1;
    Obj v_t2;
  
    v_t1 = p0;
    v_t2 = p1;
    l1 = Partitions(v_t1, env);
    l2 = Partitions(v_t2, env);
    l0 = Are_Disjoint(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Some(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    SetIter s0;
    Obj v_bs;
  
    v_bs = p0;
    l0 = S_false;
    get_set_iter(s0, v_bs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = are_eq(l2, S_true);
      if (b1)
      {
        l0 = S_true;
        goto block_673_end;
      }
      move_forward(s0);
    }
    block_673_end:;
    return l0;
  }
  
  
  Obj Ret_False_If_Not_In(Obj p0, Obj p1, Env &env)
  {
    Obj v_values;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_val;
    Obj V0[1];
  
    v_val = p0;
    v_values = p1;
    i0 = 0;
    V0[i0] = Ret_False(env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Do_If_Not_In(v_val, v_values, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Set_Found_Var_And_Leave(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_v;
    Obj V0[1];
    Obj V1[1];
  
    v_v = p0;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_set_found_var_and_leave, l1);
    return l0;
  }
  
  
  Obj Fndef_Wf_Errors(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_fn_def;
    Obj v_global_fns;
    Obj v_impl_pars;
  
    v_fn_def = p0;
    v_global_fns = p1;
    v_impl_pars = p2;
    l1 = empty_set;
    l0 = Fndef_Wf_Errors(v_fn_def, v_global_fns, l1, v_impl_pars, env);
    release(l1);
    return l0;
  }
  
  
  Obj Parse_Obj__Error(Obj p0, Env &env)
  {
    Obj v_token;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[1];
    Obj V1[1];
  
    v_token = p0;
    i0 = 0;
    V0[i0] = S_token;
    V1[i0] = v_token;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_parser_error, l1);
    return l0;
  }
  
  
  Obj Parse_Prg_Decl(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj l0;
    Obj l1;
    Obj v_str;
    Obj v_ts;
  
    v_str = p0;
    l1 = Untag(v_str, env);
    v_ts = Fast_Tokenize(l1, env);
    release(l1);
    v_obj = Parse_Obj(v_ts, env);
    l0 = Untag(v_obj, env);
    release(v_obj);
    release(v_ts);
    goto block_674_end;
    block_674_end:;
    return l0;
  }
  
  
  Obj Syn_Fns_Are_Compatible__Are_Part_Compatible(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_t1;
    Obj v_t2;
  
    v_t1 = p0;
    v_t2 = p1;
    l1 = Partitions(v_t1, env);
    l2 = Partitions(v_t2, env);
    l0 = Are_Disjoint(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Indent_Line(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_str;
    Obj V0[2];
  
    v_str = p0;
    i0 = 0;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    l0 = amp(l1, v_str, env);
    release(l1);
    return l0;
  }
  
  
  Obj Max(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l1 = greater(v_a, v_b, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_a;
      add_ref(l0);
    }
    else
    {
      l0 = v_b;
      add_ref(l0);
    }
    return l0;
  }
  
  
  Obj Min(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l1 = lower(v_a, v_b, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_a;
      add_ref(l0);
    }
    else
    {
      l0 = v_b;
      add_ref(l0);
    }
    return l0;
  }
  
  
  Obj Clause_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_clause;
    Obj v_ext_vars;
  
    v_clause = p0;
    v_ext_vars = p1;
    l1 = empty_set;
    l0 = Clause_Wf_Errors(v_clause, l1, v_ext_vars, env);
    release(l1);
    return l0;
  }
  
  
  Obj Untag(Obj p0, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj v_tag;
    Obj l0;
    Obj l1;
    bool b1;
  
    v_x = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_676_end;
    }
    l1 = get_tag(p0);
    v_tag = l1;
    b1 = true;
    if (!b1)
    {
      goto block_676_end;
    }
    l1 = get_inner_obj(p0);
    v_obj = l1;
    b1 = true;
    block_676_end:;
    if (b1)
    {
      l0 = v_obj;
      add_ref(l0);
      goto block_675_end;
    }
    fail();
    block_675_end:;
    return l0;
  }
  
  
  Obj Has_Duplicates(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_s;
  
    v_s = p0;
    l1 = Dupl_Elems(v_s, env);
    l2 = empty_set;
    l0 = to_obj(are_eq(l1, l2));
    release(l2);
    release(l1);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    return l0;
  }
  
  
  Obj Is_Digit(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_ch;
  
    v_ch = p0;
    l0 = greater_eq(v_ch, to_obj(48), env);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = lower_eq(v_ch, to_obj(57), env);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj Is_Lower(Obj p0, Env &env)
  {
    Obj l0;
    Obj v_ch;
  
    v_ch = p0;
    l0 = greater_eq(v_ch, to_obj(97), env);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = lower_eq(v_ch, to_obj(122), env);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj Repeat_While(Obj p0, Obj p1, Env &env)
  {
    Obj v_cond;
    Obj v_body;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    Obj V0[1];
  
    v_cond = p0;
    v_body = p1;
    i0 = 0;
    l3 = Break_Loop(env);
    V0[i0] = Do_If_Not(v_cond, l3, env);
    release(l3);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = amp(l2, v_body, env);
    release(l2);
    l0 = Repeat(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Has_Key(Obj p0, Obj p1, Env &env)
  {
    Obj v_key;
    Obj l0;
    Obj l2;
    bool b1;
    MapIter m0;
    Obj v_map;
  
    v_map = p0;
    v_key = p1;
    l0 = S_false;
    get_map_iter(m0, v_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      b1 = are_eq(l2, v_key);
      if (b1)
      {
        l2 = get_curr_value(m0);
        b1 = true;
        if (b1)
        {
          l0 = S_true;
          goto block_677_end;
        }
      }
      move_forward(m0);
    }
    block_677_end:;
    return l0;
  }
  
  
  Obj Set_To_Mset(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    Obj v_s;
    Obj v_e;
  
    v_s = p0;
    init(t0);
    init(t1);
    get_set_iter(s0, v_s);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_e);
        append(t0, v_e);
        append(t1, to_obj(1));
      }
      move_forward(s0);
    }
    l0 = make_map(t0, t1);
    return l0;
  }
  
  
  Obj And(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = And(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Or(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Or(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Mk_Call(Obj p0, Obj p1, Env &env)
  {
    Obj v_params;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[1];
    Obj v_fn_name;
  
    v_fn_name = p0;
    v_params = p1;
    i0 = 0;
    l1 = empty_seq;
    V0[i0] = Mk_Gen_Call(v_fn_name, v_params, l1, env);
    release(l1);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    return l0;
  }
  
  
  Obj Clauses_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_def_vars;
    Obj v_clauses;
  
    v_clauses = p0;
    v_def_vars = p1;
    add_ref(v_clauses);
    l1 = make_tagged_obj(S_and_clause, v_clauses);
    l0 = Clause_Wf_Errors(l1, v_def_vars, env);
    release(l1);
    return l0;
  }
  
  
  Obj Values(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    Stream t0;
    MapIter m0;
    Obj v_map;
    Obj v_v;
  
    v_map = p0;
    init(t0);
    get_map_iter(m0, v_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_v = l2;
        b1 = true;
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
        }
      }
      move_forward(m0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Only_Element(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_set;
    Obj v_seq;
  
    v_set = p0;
    v_seq = Rand_Sort(v_set, env);
    l2 = Length(v_seq, env);
    l1 = to_obj(are_eq(l2, to_obj(1)));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = brackets(v_seq, to_obj(0), env);
      release(v_seq);
      goto block_678_end;
    }
    fail();
    block_678_end:;
    return l0;
  }
  
  
  Obj Join(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    SeqIter q0;
    Obj v_s;
    Obj v_seqs;
    Obj v_res;
  
    v_seqs = p0;
    v_res = empty_seq;
    get_seq_iter(q0, v_seqs);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l1 = join_seqs(v_res, v_s);
      release(v_res);
      v_res = l1;
      move_forward(q0);
    }
    l0 = v_res;
    add_ref(l0);
    release(v_res);
    goto block_679_end;
    block_679_end:;
    return l0;
  }
  
  
  Obj At(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_idx;
    Obj v_seq;
    Obj v_default;
  
    v_seq = p0;
    v_idx = p1;
    v_default = p2;
    l2 = to_obj(get_seq_len(v_seq));
    l1 = lower(v_idx, l2, env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = get_at(v_seq, get_int_val(v_idx));
    }
    else
    {
      l0 = v_default;
      add_ref(l0);
    }
    return l0;
  }
  
  
  Obj Keys(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    Stream t0;
    MapIter m0;
    Obj v_map;
    Obj v_k;
  
    v_map = p0;
    init(t0);
    get_map_iter(m0, v_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_k = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        b1 = true;
        if (b1)
        {
          add_ref(v_k);
          append(t0, v_k);
        }
      }
      move_forward(m0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj And_Then(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = And_Then(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Or_Else(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Or_Else(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Indent(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_strs;
  
    v_strs = p0;
    l0 = make_array(get_seq_len(v_strs), S_nil);
    get_seq_iter(q0, v_strs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l2 = Indent_Line(v_s, env);
      set_at(l0, i0, l2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    return l0;
  }
  
  
  Obj Block_Success_If(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_res_var;
    Obj V0[2];
    Obj v_c;
  
    v_c = p0;
    v_res_var = p1;
    i0 = 0;
    V0[i0] = Set_Bvar(v_res_var, S_true, env);
    i0 = i0 + 1;
    V0[i0] = Exit_Block(env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Do_If(v_c, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Block_Failure_If(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_res_var;
    Obj V0[2];
    Obj v_c;
  
    v_c = p0;
    v_res_var = p1;
    i0 = 0;
    V0[i0] = Set_Bvar(v_res_var, S_false, env);
    i0 = i0 + 1;
    V0[i0] = Exit_Block(env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Do_If(v_c, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj lower_eq(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l0 = lower(v_a, v_b, env);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_false))
    {
      l0 = to_obj(are_eq(v_a, v_b));
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj greater_eq(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    l0 = greater(v_a, v_b, env);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_false))
    {
      l0 = to_obj(are_eq(v_a, v_b));
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj Multiset_Union(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_s;
    Obj v_e;
  
    v_s = p0;
    init(t0);
    get_set_iter(s0, v_s);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_e = l3;
      b1 = true;
      if (b1)
      {
        l3 = Set_To_Mset(v_e, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    l0 = Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Can_Fall_Through(Obj p0, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_s;
  
    v_stmts = p0;
    l1 = make_array(get_seq_len(v_stmts), S_nil);
    get_seq_iter(q0, v_stmts);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l3 = Is_Last_For_Sure(v_s, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l0 = None(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Mk_Call(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_params;
    Obj v_var;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[1];
    Obj v_fn_name;
  
    v_var = p0;
    v_fn_name = p1;
    v_params = p2;
    i0 = 0;
    l1 = empty_seq;
    V0[i0] = Mk_Gen_Call(v_var, v_fn_name, v_params, l1, env);
    release(l1);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    return l0;
  }
  
  
  Obj Normalize_Unions(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_t;
    Obj v_ts;
  
    v_ts = p0;
    init(t0);
    get_set_iter(s0, v_ts);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_t = l3;
      b1 = true;
      if (b1)
      {
        l3 = Normalize_Union(v_t, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    l0 = Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Length(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    Obj v_seq;
    Obj v_s;
  
    b1 = is_string(p0);
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      l1 = Untag(v_s, env);
      l0 = Length(l1, env);
      release(l1);
      goto block_680_end;
    }
    b1 = is_seq(p0);
    if (b1)
    {
      v_seq = p0;
    }
    if (b1)
    {
      l0 = to_obj(get_seq_len(v_seq));
      goto block_680_end;
    }
    fail();
    block_680_end:;
    return l0;
  }
  
  
  Obj Apply(Obj p0, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_s;
  
    v_s = p0;
    l2 = Rand_Sort(v_s, env);
    l1 = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_x = get_curr_obj(q0);
      l3 = env.n1_f(v_x, env.C1_f, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l2);
    l0 = seq_to_mset(l1);
    release(l1);
    return l0;
  }
  
  
  Obj Append(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l4;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_ss;
  
    v_ss = p0;
    l2 = make_array(get_seq_len(v_ss), S_nil);
    get_seq_iter(q0, v_ss);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l4 = Untag(v_s, env);
      set_at(l2, i0, l4);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l1 = Join(l2, env);
    release(l2);
    l0 = String(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Only_Element(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_set;
    Obj v_seq;
    Obj v_default;
  
    v_set = p0;
    v_default = p1;
    v_seq = Rand_Sort(v_set, env);
    l2 = Length(v_seq, env);
    l1 = to_obj(are_eq(l2, to_obj(1)));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = brackets(v_seq, to_obj(0), env);
    }
    else
    {
      l0 = v_default;
      add_ref(l0);
    }
    release(v_seq);
    goto block_681_end;
    block_681_end:;
    return l0;
  }
  
  
  Obj Tokenize__Error(Obj p0, Obj p1, Env &env)
  {
    Obj v_line;
    Obj v_col;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[2];
    Obj V1[2];
  
    v_line = p0;
    v_col = p1;
    i0 = 0;
    V0[i0] = S_line;
    V1[i0] = v_line;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_col;
    V1[i0] = v_col;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_lexer_error, l1);
    return l0;
  }
  
  
  Obj Fast_Tokenize__Error(Obj p0, Obj p1, Env &env)
  {
    Obj v_line;
    Obj v_col;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[2];
    Obj V1[2];
  
    v_line = p0;
    v_col = p1;
    i0 = 0;
    V0[i0] = S_line;
    V1[i0] = v_line;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_col;
    V1[i0] = v_col;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_lexer_error, l1);
    return l0;
  }
  
  
  Obj Vvar(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_n;
    Obj V0[2];
    Obj V1[2];
  
    v_n = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_size;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_id;
    V1[i0] = v_n;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_vvar, l1);
    return l0;
  }
  
  
  Obj Set_Var(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_e = p1;
    i0 = 0;
    V0[i0] = S_value;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_set_var, l1);
    return l0;
  }
  
  
  Obj Set_Bvar(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_e = p1;
    i0 = 0;
    V0[i0] = S_value;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_set_bvar, l1);
    return l0;
  }
  
  
  Obj Set_Ivar(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_e = p1;
    i0 = 0;
    V0[i0] = S_value;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_set_ivar, l1);
    return l0;
  }
  
  
  Obj Evar(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_n;
    Obj v_i;
    Obj V0[2];
    Obj V1[2];
  
    v_n = p0;
    v_i = p1;
    i0 = 0;
    V0[i0] = S_id;
    V1[i0] = v_n;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_idx;
    V1[i0] = v_i;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_evar, l1);
    return l0;
  }
  
  
  Obj List_To_Seq(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_l;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_l = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_list;
    V1[i0] = v_l;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_list_to_seq, l1);
    return l0;
  }
  
  
  Obj Internal_Sort(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_set;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_internal_sort, l1);
    return l0;
  }
  
  
  Obj Reverse(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_seq;
    Obj v_s;
  
    b1 = is_string(p0);
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      l2 = Untag(v_s, env);
      l1 = Reverse(l2, env);
      release(l2);
      l0 = String(l1, env);
      release(l1);
      goto block_682_end;
    }
    b1 = is_seq(p0);
    if (b1)
    {
      v_seq = p0;
    }
    if (b1)
    {
      l0 = rev_seq(v_seq);
      goto block_682_end;
    }
    fail();
    block_682_end:;
    return l0;
  }
  
  
  Obj Append(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_e = p1;
    i0 = 0;
    V0[i0] = S_obj;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_stream;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_append, l1);
    return l0;
  }
  
  
  Obj Mk_Set_From_Stream(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_stream;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_set_from_stream, l1);
    return l0;
  }
  
  
  Obj Mk_Seq_From_Stream(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_stream;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_seq_from_stream, l1);
    return l0;
  }
  
  
  Obj Add(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_val1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_val2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_add, l1);
    return l0;
  }
  
  
  Obj Rev_Seq(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_seq;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_rev_seq, l1);
    return l0;
  }
  
  
  Obj Seq_To_Set(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_seq;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_seq_to_set, l1);
    return l0;
  }
  
  
  Obj Seq_To_Mset(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    v_v = p0;
    v_s = p1;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_seq;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_seq_to_mset, l1);
    return l0;
  }
  
  
  Obj Eval_Bool_Fn(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_n;
    Obj V0[2];
    Obj V1[2];
    Obj v_ps;
  
    v_n = p0;
    v_ps = p1;
    i0 = 0;
    V0[i0] = S_name;
    V1[i0] = v_n;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_params;
    V1[i0] = v_ps;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_eval_bool_fn, l1);
    return l0;
  }
  
  
  Obj Is_Gt(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_expr1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_expr2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_is_gt, l1);
    return l0;
  }
  
  
  Obj Is_Ge(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_expr1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_expr2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_is_ge, l1);
    return l0;
  }
  
  
  Obj Is_Lt(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_expr1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_expr2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_is_lt, l1);
    return l0;
  }
  
  
  Obj Is_Le(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_expr1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_expr2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_is_le, l1);
    return l0;
  }
  
  
  Obj Mult(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_val1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_val2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mult, l1);
    return l0;
  }
  
  
  Obj Idiv(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    v_e1 = p0;
    v_e2 = p1;
    i0 = 0;
    V0[i0] = S_val1;
    V1[i0] = v_e1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_val2;
    V1[i0] = v_e2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_idiv, l1);
    return l0;
  }
  
  
  Obj Is_Space(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj v_ch;
  
    v_ch = p0;
    l1 = Ascii_Space(env);
    l0 = to_obj(are_eq(v_ch, l1));
    release(l1);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_false))
    {
      l1 = Ascii_Newline(env);
      l0 = to_obj(are_eq(v_ch, l1));
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj Union(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    SeqIter q0;
    Obj v_sets;
    Obj v_s;
    Obj v_ss;
    Obj v_u;
  
    v_sets = p0;
    v_ss = Rand_Sort(v_sets, env);
    v_u = empty_set;
    get_seq_iter(q0, v_ss);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l1 = Union(v_u, v_s, env);
      release(v_u);
      v_u = l1;
      move_forward(q0);
    }
    l0 = v_u;
    add_ref(l0);
    release(v_ss);
    release(v_u);
    goto block_683_end;
    block_683_end:;
    return l0;
  }
  
  
  Obj Eval_Expr_And_Add_To_Set(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e;
    Obj V0[2];
    Obj V1[2];
    Obj v_sv;
  
    v_e = p0;
    v_sv = p1;
    i0 = 0;
    V0[i0] = S_expr;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_stream_var;
    V1[i0] = v_sv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_eval_expr_and_add_to_set, l1);
    return l0;
  }
  
  
  Obj Gen_Code(Obj p0, Obj p1, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj v_res_var;
  
    v_stmts = p0;
    v_res_var = p1;
    l1 = empty_set;
    l2 = empty_set;
    l3 = empty_set;
    l0 = Gen_Code(v_stmts, v_res_var, l1, l2, l3, env);
    release(l3);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Untyped_Sgns(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    Stream t0;
    MapIter m0;
    Obj v_v;
    Obj v_nps;
    Obj v_type_or_expr;
  
    v_nps = p0;
    init(t0);
    get_map_iter(m0, v_nps);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_v = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_type_or_expr = l2;
        b1 = true;
        if (b1)
        {
          l2 = Untyped_Sgn(v_v, v_type_or_expr, env);
          append(t0, l2);
        }
      }
      move_forward(m0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Transitive_Closure__Next_Step(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l4;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_map;
    Obj v_r;
    Obj v_rs;
  
    v_rs = p0;
    v_map = p1;
    init(t0);
    get_set_iter(s0, v_rs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_r = l4;
      b1 = true;
      if (b1)
      {
        l4 = brackets(v_map, v_r, env);
        append(t0, l4);
      }
      move_forward(s0);
    }
    l2 = make_set(t0);
    l1 = Union(l2, env);
    release(l2);
    l0 = amp(v_rs, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj To_Text__Is_Left_Par(Obj p0, Env &env)
  {
    Obj l0;
    int i0;
    Obj V0[3];
    Obj v_ch;
    Obj v_left_pars;
  
    v_ch = p0;
    i0 = 0;
    V0[i0] = Ascii_Left_Parenthesis(env);
    i0 = i0 + 1;
    V0[i0] = Ascii_Left_Bracket(env);
    i0 = i0 + 1;
    V0[i0] = Ascii_Left_Brace(env);
    i0 = i0 + 1;
    v_left_pars = make_set(V0, i0);
    l0 = In(v_ch, v_left_pars, env);
    release(v_left_pars);
    goto block_684_end;
    block_684_end:;
    return l0;
  }
  
  
  Obj To_Text__Is_Right_Par(Obj p0, Env &env)
  {
    Obj l0;
    int i0;
    Obj V0[3];
    Obj v_ch;
    Obj v_right_pars;
  
    v_ch = p0;
    i0 = 0;
    V0[i0] = Ascii_Right_Parenthesis(env);
    i0 = i0 + 1;
    V0[i0] = Ascii_Right_Bracket(env);
    i0 = i0 + 1;
    V0[i0] = Ascii_Right_Brace(env);
    i0 = i0 + 1;
    v_right_pars = make_set(V0, i0);
    l0 = In(v_ch, v_right_pars, env);
    release(v_right_pars);
    goto block_685_end;
    block_685_end:;
    return l0;
  }
  
  
  Obj Compile_To_C__Arity(Obj p0, Env &env)
  {
    Obj l0;
    bool b1;
    Obj v_pd;
  
    v_pd = p0;
    b1 = is_objprocdef(p0);
    if (b1)
    {
      l0 = ext_lookup(v_pd, S_in_arity);
      add_ref(l0);
      goto block_686_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      l0 = ext_lookup(v_pd, S_arity);
      add_ref(l0);
      goto block_686_end;
    }
    fail();
    block_686_end:;
    return l0;
  }
  
  
  Obj Gen_C_Decl__Arity(Obj p0, Env &env)
  {
    Obj l0;
    bool b1;
    Obj v_pd;
  
    v_pd = p0;
    b1 = is_objprocdef(p0);
    if (b1)
    {
      l0 = ext_lookup(v_pd, S_in_arity);
      add_ref(l0);
      goto block_687_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      l0 = ext_lookup(v_pd, S_arity);
      add_ref(l0);
      goto block_687_end;
    }
    fail();
    block_687_end:;
    return l0;
  }
  
  
  Obj Index_First(Obj p0, Obj p1, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_e;
    Obj v_i;
  
    v_e = p0;
    v_s = p1;
    get_seq_iter(q0, v_s);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_x = get_curr_obj(q0);
      v_i = to_obj(i0);
      l1 = to_obj(are_eq(v_x, v_e));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_i;
        add_ref(l0);
        goto block_688_end;
      }
      move_forward(q0);
      i0 = i0 + 1;
    }
    fail();
    block_688_end:;
    return l0;
  }
  
  
  Obj And(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[3];
    Obj v_e3;
  
    v_e1 = p0;
    v_e2 = p1;
    v_e3 = p2;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e3;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = And(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Or(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[3];
    Obj v_e3;
  
    v_e1 = p0;
    v_e2 = p1;
    v_e3 = p2;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e3;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Or(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Ublock_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_b;
    Obj v_ublocks;
    Obj v_global_fns;
  
    v_ublocks = p0;
    v_global_fns = p1;
    init(t0);
    get_set_iter(s0, v_ublocks);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_b = l3;
      b1 = true;
      if (b1)
      {
        l3 = Block_Wf_Errors(v_b, v_global_fns, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    l0 = Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj And_Then(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[3];
    Obj v_e3;
  
    v_e1 = p0;
    v_e2 = p1;
    v_e3 = p2;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e3;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = And_Then(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Or_Else(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[3];
    Obj v_e3;
  
    v_e1 = p0;
    v_e2 = p1;
    v_e3 = p2;
    i0 = 0;
    V0[i0] = v_e1;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e2;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_e3;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = Or_Else(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj All_Objects(Env &env)
  {
    Obj l0;
    int i0;
    Obj V0[6];
  
    i0 = 0;
    V0[i0] = S_integers;
    i0 = i0 + 1;
    V0[i0] = S_sets;
    i0 = i0 + 1;
    V0[i0] = S_sequences;
    i0 = i0 + 1;
    V0[i0] = S_maps;
    i0 = i0 + 1;
    V0[i0] = S_symbols;
    i0 = i0 + 1;
    V0[i0] = S_tagged_objs;
    i0 = i0 + 1;
    l0 = make_set(V0, i0);
    return l0;
  }
  
  
  Obj Intersection(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_s1;
    Obj v_s2;
    Obj v_e;
  
    v_s1 = p0;
    v_s2 = p1;
    init(t0);
    get_set_iter(s0, v_s1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_s2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          b1 = are_eq(l3, v_e);
          if (b1)
          {
            add_ref(v_e);
            append(t0, v_e);
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Gen_Eval_Code(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_name;
    Obj v_params;
    Obj l0;
    int i0;
    Obj v_res_var;
    Obj V0[1];
  
    v_name = p0;
    v_params = p1;
    v_res_var = p2;
    i0 = 0;
    V0[i0] = Gen_Eval_Code__Gen_Eval_Instr(v_name, v_params, v_res_var, env);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    goto block_689_end;
    block_689_end:;
    return l0;
  }
  
  
  Obj Difference(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_s1;
    Obj v_s2;
    Obj v_e;
  
    v_s1 = p0;
    v_s2 = p1;
    init(t0);
    get_set_iter(s0, v_s1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_s2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          b1 = are_eq(l3, v_e);
          if (b1)
          {
            goto block_690_end;
          }
          move_forward(s1);
        }
        add_ref(v_e);
        append(t0, v_e);
        block_690_end:;
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Exprs_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_e;
    Obj v_vs;
  
    v_exprs = p0;
    v_vs = p1;
    l1 = make_array(get_seq_len(v_exprs), S_nil);
    get_seq_iter(q0, v_exprs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_e = get_curr_obj(q0);
      l3 = Expr_Wf_Errors(v_e, v_vs, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l0 = Seq_Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Var_Scope(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_value;
    Obj v_var;
    Obj v_body;
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[3];
    Obj V1[3];
  
    v_var = p0;
    v_value = p1;
    v_body = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_var;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_body;
    V1[i0] = v_body;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_new_value;
    V1[i0] = v_value;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_var_scope, l1);
    return l0;
  }
  
  
  Obj Prg_Is_Wf(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
  
    v_prg = p0;
    l1 = ext_lookup(v_prg, S_tdefs);
    add_ref(l1);
    l0 = Types_Are_Wf(l1, env);
    release(l1);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l1 = ext_lookup(v_prg, S_tdefs);
      add_ref(l1);
      Obj BK691 = env.n_typedefs;
      env.n_typedefs = l1;
      add_ref(env.n_typedefs);
      l2 = ext_lookup(v_prg, S_fndefs);
      add_ref(l2);
      l0 = Fndefs_Are_Wf(l2, env);
      release(l2);
      release(env.n_typedefs);
      env.n_typedefs = BK691;
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    return l0;
  }
  
  
  Obj Bool_Proc_Def(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_name;
    Obj v_body;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_arity;
    Obj V0[3];
    Obj V1[3];
  
    v_name = p0;
    v_arity = p1;
    v_body = p2;
    i0 = 0;
    V0[i0] = S_name;
    V1[i0] = v_name;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_body;
    V1[i0] = v_body;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_arity;
    V1[i0] = v_arity;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_bool_proc_def, l1);
    return l0;
  }
  
  
  Obj Union(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_s1;
    Obj v_s2;
    Obj v_e;
  
    v_s1 = p0;
    v_s2 = p1;
    init(t0);
    get_set_iter(s0, v_s1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_e);
        append(t0, v_e);
      }
      move_forward(s0);
    }
    get_set_iter(s0, v_s2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_e);
        append(t0, v_e);
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj To_C_Fn_Name(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    Obj v_arity;
    Obj V0[2];
    Obj v_fn_symb;
  
    v_fn_symb = p0;
    v_arity = p1;
    l2 = To_C_Fn_Name(v_fn_symb, env);
    i0 = 0;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    l2 = To_Str(v_arity, env);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Set_At(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_i;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
  
    v_v = p0;
    v_i = p1;
    v_x = p2;
    i0 = 0;
    V0[i0] = S_value;
    V1[i0] = v_x;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_idx;
    V1[i0] = v_i;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_set_at, l1);
    return l0;
  }
  
  
  Obj Normalize_Union(Obj p0, Env &env)
  {
    Obj v_type;
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj V0[1];
    Obj v_ts;
  
    v_type = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_693_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_693_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_693_end:;
    if (b1)
    {
      l0 = Normalize_Unions(v_ts, env);
      goto block_692_end;
    }
    b1 = true;
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_type;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_692_end;
    }
    fail();
    block_692_end:;
    return l0;
  }
  
  
  Obj Join_Seqs(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_r;
    Obj v_l;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
  
    v_v = p0;
    v_l = p1;
    v_r = p2;
    i0 = 0;
    V0[i0] = S_right;
    V1[i0] = v_r;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_left;
    V1[i0] = v_l;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_join_seqs, l1);
    return l0;
  }
  
  
  Obj Cls_Scope(Obj p0, Obj p1, Obj p2, Obj p3, Obj p4, Env &env)
  {
    Obj v_var;
    Obj v_body;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_env;
    Obj v_cls;
    Obj v_arity;
    Obj V0[2];
    Obj V1[2];
    Obj v_cls_body;
  
    v_var = p0;
    v_arity = p1;
    v_env = p2;
    v_cls_body = p3;
    v_body = p4;
    i0 = 0;
    V0[i0] = S_arity;
    V1[i0] = v_arity;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_body;
    V1[i0] = v_cls_body;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_cls = make_tagged_obj(S_cls_def, l1);
    l0 = Cls_Scope(v_var, v_env, v_cls, v_body, env);
    release(v_cls);
    goto block_694_end;
    block_694_end:;
    return l0;
  }
  
  
  Obj To_C_Fn_Name(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    Obj v_id;
    Obj v_arity;
    Obj V0[2];
    Obj v_fn_symb;
  
    v_fn_symb = p0;
    v_arity = p1;
    v_id = p2;
    l2 = To_C_Fn_Name(v_fn_symb, v_arity, env);
    i0 = 0;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    l2 = To_Str(v_id, env);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Mk_Array(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_d;
  
    v_v = p0;
    v_s = p1;
    v_d = p2;
    i0 = 0;
    V0[i0] = S_value;
    V1[i0] = v_d;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_size;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_array, l1);
    return l0;
  }
  
  
  Obj Cases_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_vs;
    Obj v_c;
    Obj v_cs;
  
    v_cs = p0;
    v_vs = p1;
    l1 = make_array(get_seq_len(v_cs), S_nil);
    get_seq_iter(q0, v_cs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_c = get_curr_obj(q0);
      l3 = Case_Wf_Errors(v_c, v_vs, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l0 = Seq_Union(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Lookup(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_m;
    Obj v_k;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
  
    v_v = p0;
    v_m = p1;
    v_k = p2;
    i0 = 0;
    V0[i0] = S_key;
    V1[i0] = v_k;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map;
    V1[i0] = v_m;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_lookup, l1);
    return l0;
  }
  
  
  Obj Ext_Lookup(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_m;
    Obj v_k;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
  
    v_v = p0;
    v_m = p1;
    v_k = p2;
    i0 = 0;
    V0[i0] = S_key;
    V1[i0] = v_k;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map;
    V1[i0] = v_m;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_ext_lookup, l1);
    return l0;
  }
  
  
  Obj Get_At(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_i;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
  
    v_v = p0;
    v_s = p1;
    v_i = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_idx;
    V1[i0] = v_i;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_seq;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_get_at, l1);
    return l0;
  }
  
  
  Obj Mk_Set(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_es;
  
    v_v = p0;
    v_es = p1;
    v_s = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_size;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_elems;
    V1[i0] = v_es;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_set, l1);
    return l0;
  }
  
  
  Obj Mk_Seq(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_es;
  
    v_v = p0;
    v_es = p1;
    v_s = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_size;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_elems;
    V1[i0] = v_es;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_seq, l1);
    return l0;
  }
  
  
  Obj Mk_Tagged_Obj(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_t;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_o;
  
    v_v = p0;
    v_t = p1;
    v_o = p2;
    i0 = 0;
    V0[i0] = S_tag;
    V1[i0] = v_t;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_obj;
    V1[i0] = v_o;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_tagged_obj, l1);
    return l0;
  }
  
  
  Obj Call_Proc(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_n;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_ps;
  
    v_v = p0;
    v_n = p1;
    v_ps = p2;
    i0 = 0;
    V0[i0] = S_name;
    V1[i0] = v_n;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_params;
    V1[i0] = v_ps;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_call_proc, l1);
    return l0;
  }
  
  
  Obj Is_Def(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l2;
    bool b1;
    SetIter s0;
    Obj v_env;
    Obj v_arity;
    Obj v_actual_named_params;
    Obj v_sgn;
  
    v_name = p0;
    v_arity = p1;
    v_env = p2;
    v_actual_named_params = p3;
    l0 = S_false;
    get_set_iter(s0, v_env);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_sgn = l2;
      b1 = true;
      if (b1)
      {
        l2 = Is_Def__Could_Match(v_name, v_arity, v_sgn, v_actual_named_params, env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_true;
          goto block_696_end;
        }
      }
      move_forward(s0);
    }
    block_696_end:;
    goto block_695_end;
    block_695_end:;
    return l0;
  }
  
  
  Obj Subexprs(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    bool b1;
    int i0;
    Obj V0[2];
  
    v_expr = p0;
    b1 = is_expr(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_expr;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_697_end;
    }
    b1 = is_condexpr(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_cond);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_697_end;
    }
    fail();
    block_697_end:;
    return l0;
  }
  
  
  Obj Call_Cls(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_ps;
    Obj v_cv;
  
    v_v = p0;
    v_cv = p1;
    v_ps = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_params;
    V1[i0] = v_ps;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_cls_var;
    V1[i0] = v_cv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_call_cls, l1);
    return l0;
  }
  
  
  Obj Mk_Map_From_Streams(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_ks;
    Obj v_vs;
  
    v_v = p0;
    v_ks = p1;
    v_vs = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_key_stream;
    V1[i0] = v_ks;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_value_stream;
    V1[i0] = v_vs;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_map_from_streams, l1);
    return l0;
  }
  
  
  Obj Is_Symbol(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[7];
    Obj v_ch;
  
    v_ch = p0;
    i0 = 0;
    V0[i0] = to_obj(40);
    i0 = i0 + 1;
    V0[i0] = to_obj(41);
    i0 = i0 + 1;
    V0[i0] = to_obj(44);
    i0 = i0 + 1;
    V0[i0] = to_obj(91);
    i0 = i0 + 1;
    V0[i0] = to_obj(93);
    i0 = i0 + 1;
    V0[i0] = to_obj(123);
    i0 = i0 + 1;
    V0[i0] = to_obj(125);
    i0 = i0 + 1;
    l1 = make_set(V0, i0);
    l0 = In(v_ch, l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Merge_Maps(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_m1;
    Obj v_m2;
  
    v_v = p0;
    v_m1 = p1;
    v_m2 = p2;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map1;
    V1[i0] = v_m1;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map2;
    V1[i0] = v_m2;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_merge_maps, l1);
    return l0;
  }
  
  
  Obj Only_Element_Or_Def_If_Empty(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_len;
    Obj v_set;
    Obj v_seq;
    Obj v_default;
  
    v_set = p0;
    v_default = p1;
    v_seq = Rand_Sort(v_set, env);
    v_len = Length(v_seq, env);
    l1 = greater(v_len, to_obj(1), env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      fail();
    }
    l2 = Length(v_seq, env);
    l1 = to_obj(are_eq(l2, to_obj(1)));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = brackets(v_seq, to_obj(0), env);
    }
    else
    {
      l0 = v_default;
      add_ref(l0);
    }
    release(v_len);
    release(v_seq);
    goto block_698_end;
    block_698_end:;
    return l0;
  }
  
  
  Obj First_Unused_Int_Var(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj v_i;
    Obj v_vars;
  
    v_vars = p0;
    v_i = to_obj(0);
    for ( ; ; )
    {
      add_ref(v_i);
      l2 = make_tagged_obj(S_unique_var, v_i);
      l1 = In(l2, v_vars, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      l1 = plus(v_i, to_obj(1), env);
      release(v_i);
      v_i = l1;
    }
    add_ref(v_i);
    l0 = make_tagged_obj(S_unique_var, v_i);
    release(v_i);
    goto block_699_end;
    block_699_end:;
    return l0;
  }
  
  
  Obj star(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_a;
    Obj v_b;
  
    v_a = p0;
    v_b = p1;
    b1 = is_int(p0) && (get_int_val(p0) >= 0) && (get_int_val(p0) <= 0);
    if (b1)
    {
      l0 = to_obj(0);
      goto block_700_end;
    }
    b1 = is_int(p0) && (get_int_val(p0) >= 1);
    if (b1)
    {
      l2 = minus(v_a, to_obj(1), env);
      l1 = star(l2, v_b, env);
      release(l2);
      l0 = plus(l1, v_b, env);
      release(l1);
      goto block_700_end;
    }
    b1 = is_int(p0) && (get_int_val(p0) <= -1);
    if (b1)
    {
      l2 = minus(v_a, env);
      l1 = star(l2, v_b, env);
      release(l2);
      l0 = minus(l1, env);
      release(l1);
      goto block_700_end;
    }
    fail();
    block_700_end:;
    return l0;
  }
  
  
  Obj Fn_Call_Is_Wf(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_fn_call;
    Obj l0;
    Obj l2;
    bool b1;
    SetIter s0;
    Obj v_fndefs;
    Obj v_fd;
    Obj v_scalar_vars;
  
    v_fn_call = p0;
    v_fndefs = p1;
    v_scalar_vars = p2;
    l0 = S_false;
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        l2 = Fn_Call_Is_Wf__Could_Match(v_fn_call, v_fd, v_scalar_vars, env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_true;
          goto block_702_end;
        }
      }
      move_forward(s0);
    }
    block_702_end:;
    goto block_701_end;
    block_701_end:;
    return l0;
  }
  
  
  Obj Rand_Sort_Pairs(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    MapIter m0;
    Obj v_map;
    Obj v_k;
    Obj v_v;
    Obj V0[2];
  
    v_map = p0;
    init(t0);
    get_map_iter(m0, v_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l3 = get_curr_key(m0);
      v_k = l3;
      b1 = true;
      if (b1)
      {
        l3 = get_curr_value(m0);
        v_v = l3;
        b1 = true;
        if (b1)
        {
          i0 = 0;
          V0[i0] = v_k;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = v_v;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          append(t0, l3);
        }
      }
      move_forward(m0);
    }
    l1 = make_set(t0);
    l0 = Rand_Sort(l1, env);
    release(l1);
    return l0;
  }
  
  
  Obj Syn_Fn_Defs_To_Named_Params(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    Obj v_fd;
    Obj v_def_vars;
    Obj v_fds;
  
    v_fds = p0;
    v_def_vars = p1;
    init(t0);
    init(t1);
    l1 = Set(v_fds, env);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        l4 = ext_lookup(v_fd, S_name);
        add_ref(l4);
        l3 = Untag(l4, env);
        release(l4);
        l2 = make_tagged_obj(S_named_par, l3);
        append(t0, l2);
        l2 = Syn_Fn_Def_To_Expr(v_fd, v_def_vars, env);
        append(t1, l2);
      }
      move_forward(s0);
    }
    release(l1);
    l0 = make_map(t0, t1);
    return l0;
  }
  
  
  Obj Norm_Type(Obj p0, Env &env)
  {
    Obj v_type;
    Obj l0;
  
    v_type = p0;
    Obj (*BF704)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD704 = env.C1_condition;
    env.n1_condition = cls_24;
    env.C1_condition = 0;
    Obj (*BF705)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD705 = env.C1_eval;
    env.n1_eval = cls_26;
    env.C1_eval = 0;
    l0 = Replace_Expr_Fn(v_type, env);
    env.n1_eval = BF705;
    env.C1_eval = BD705;
    env.n1_condition = BF704;
    env.C1_condition = BD704;
    goto block_703_end;
    block_703_end:;
    return l0;
  }
  
  
  Obj Par_Parts(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_fd;
    Obj v_p;
  
    v_fd = p0;
    l1 = ext_lookup(v_fd, S_params);
    add_ref(l1);
    l0 = make_array(get_seq_len(l1), S_nil);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l4 = ext_lookup(v_p, S_type, b1);
      l4 = to_obj(b1);
      if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
      {
        fail();
      }
      if (are_eq(l4, S_true))
      {
        l4 = ext_lookup(v_p, S_type);
        add_ref(l4);
        l2 = Partitions(l4, env);
        release(l4);
      }
      else
      {
        l2 = S_all_objs;
      }
      set_at(l0, i0, l2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    return l0;
  }
  
  
  Obj Obj_Proc_Def(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_name;
    Obj v_body;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_arity;
    Obj V0[4];
    Obj V1[4];
    Obj v_nps;
  
    v_name = p0;
    v_arity = p1;
    v_nps = p2;
    v_body = p3;
    i0 = 0;
    V0[i0] = S_name;
    V1[i0] = v_name;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_body;
    V1[i0] = v_body;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_in_arity;
    V1[i0] = v_arity;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_named_params;
    V1[i0] = v_nps;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_obj_proc_def, l1);
    return l0;
  }
  
  
  Obj Mk_Fn_Call(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_params;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    int i1;
    int i2;
    Obj V0[1];
    Obj V1[1];
    Obj V2[3];
    Obj v_fn_name;
  
    v_var = p0;
    v_fn_name = p1;
    v_params = p2;
    i0 = 0;
    i1 = 0;
    i2 = 0;
    V2[i2] = to_obj(101);
    i2 = i2 + 1;
    V2[i2] = to_obj(110);
    i2 = i2 + 1;
    V2[i2] = to_obj(118);
    i2 = i2 + 1;
    l2 = make_seq(V2, i2);
    V1[i1] = make_tagged_obj(S_string, l2);
    i1 = i1 + 1;
    l1 = make_seq(V1, i1);
    V0[i0] = Mk_Gen_Call(v_var, v_fn_name, v_params, l1, env);
    release(l1);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    return l0;
  }
  
  
  Obj Mk_Gen_Call(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_params;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    Obj V0[3];
    Obj v_fn_name;
    Obj v_trailing_params;
  
    v_var = p0;
    v_fn_name = p1;
    v_params = p2;
    v_trailing_params = p3;
    l2 = To_C_Var_Name(v_var, env);
    i0 = 0;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(61);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    l2 = Mk_Gen_Call(v_fn_name, v_params, v_trailing_params, env);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Cart_Prod(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_s1;
    Obj v_s2;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_s1 = p0;
    v_s2 = p1;
    init(t0);
    get_set_iter(s0, v_s1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_e1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_s2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_e2 = l3;
          b1 = true;
          if (b1)
          {
            i0 = 0;
            V0[i0] = v_e1;
            add_ref(V0[i0]);
            i0 = i0 + 1;
            V0[i0] = v_e2;
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            append(t0, l3);
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Get_Seq_Slice(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_l;
    Obj v_v;
    Obj V0[4];
    Obj V1[4];
    Obj v_f;
  
    v_v = p0;
    v_s = p1;
    v_f = p2;
    v_l = p3;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_len;
    V1[i0] = v_l;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_seq;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_idx_first;
    V1[i0] = v_f;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_get_seq_slice, l1);
    return l0;
  }
  
  
  Obj Lookup(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_m;
    Obj v_k;
    Obj v_v;
    Obj V0[4];
    Obj V1[4];
    Obj v_sv;
  
    v_sv = p0;
    v_v = p1;
    v_m = p2;
    v_k = p3;
    i0 = 0;
    V0[i0] = S_key;
    V1[i0] = v_k;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map;
    V1[i0] = v_m;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_success_var;
    V1[i0] = v_sv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_lookup, l1);
    return l0;
  }
  
  
  Obj Ext_Lookup(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_m;
    Obj v_k;
    Obj v_v;
    Obj V0[4];
    Obj V1[4];
    Obj v_sv;
  
    v_sv = p0;
    v_v = p1;
    v_m = p2;
    v_k = p3;
    i0 = 0;
    V0[i0] = S_key;
    V1[i0] = v_k;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_map;
    V1[i0] = v_m;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_success_var;
    V1[i0] = v_sv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_ext_lookup, l1);
    return l0;
  }
  
  
  Obj Cls_Scope(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_b;
    Obj v_e;
    Obj v_v;
    Obj V0[4];
    Obj V1[4];
    Obj v_c;
  
    v_v = p0;
    v_e = p1;
    v_c = p2;
    v_b = p3;
    i0 = 0;
    V0[i0] = S_body;
    V1[i0] = v_b;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_env;
    V1[i0] = v_e;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_cls;
    V1[i0] = v_c;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_cls_scope, l1);
    return l0;
  }
  
  
  Obj Mk_Map(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj v_s;
    Obj v_v;
    Obj V0[4];
    Obj V1[4];
    Obj v_ks;
    Obj v_vs;
  
    v_v = p0;
    v_ks = p1;
    v_vs = p2;
    v_s = p3;
    i0 = 0;
    V0[i0] = S_var;
    V1[i0] = v_v;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_size;
    V1[i0] = v_s;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_values;
    V1[i0] = v_vs;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_keys;
    V1[i0] = v_ks;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_mk_map, l1);
    return l0;
  }
  
  
  Obj Symbol_To_Token(Obj p0, Env &env)
  {
    Obj l0;
    bool b1;
    Obj v_ch;
  
    v_ch = p0;
    b1 = are_eq(p0, to_obj(40));
    if (b1)
    {
      l0 = Left_Parenthesis(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(41));
    if (b1)
    {
      l0 = Right_Parenthesis(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(91));
    if (b1)
    {
      l0 = Left_Bracket(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(93));
    if (b1)
    {
      l0 = Right_Bracket(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(123));
    if (b1)
    {
      l0 = Left_Brace(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(125));
    if (b1)
    {
      l0 = Right_Brace(env);
      goto block_706_end;
    }
    b1 = are_eq(p0, to_obj(44));
    if (b1)
    {
      l0 = S_comma;
      goto block_706_end;
    }
    fail();
    block_706_end:;
    return l0;
  }
  
  
  Obj Create_Type_Map(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    Obj v_td;
    Obj v_tdef_map;
    Obj v_par_tdef_map;
  
    v_prg = p0;
    init(t0);
    init(t1);
    l2 = Untag(v_prg, env);
    l1 = Set(l2, env);
    release(l2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_syntypedef(l2);
      if (b1)
      {
        v_td = l2;
      }
      if (b1)
      {
        l2 = ext_lookup(v_td, S_name);
        add_ref(l2);
        append(t0, l2);
        l2 = ext_lookup(v_td, S_type);
        add_ref(l2);
        append(t1, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_tdef_map = make_map(t0, t1);
    v_par_tdef_map = Inst_Req_Par_Types(v_prg, env);
    l0 = amp(v_tdef_map, v_par_tdef_map, env);
    release(v_tdef_map);
    release(v_par_tdef_map);
    goto block_707_end;
    block_707_end:;
    return l0;
  }
  
  
  Obj Undef_Type_Symbol_Errs__Make_Err_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    Obj V0[2];
    Obj V1[2];
    Obj v_ts;
  
    v_ts = p0;
    b1 = is_basictypesymbol(p0);
    if (b1)
    {
      add_ref(v_ts);
      l0 = make_tagged_obj(S_undef_type_name, v_ts);
      goto block_708_end;
    }
    b1 = is_partypesymbol(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_name;
      V1[i0] = ext_lookup(v_ts, S_name);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_arity;
      l2 = ext_lookup(v_ts, S_params);
      add_ref(l2);
      V1[i0] = Length(l2, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_undef_par_type_name, l1);
      goto block_708_end;
    }
    fail();
    block_708_end:;
    return l0;
  }
  
  
  Obj Gen_Fn_Body(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_code;
    Obj V0[1];
    Obj v_fn_res_var;
  
    v_expr = p0;
    v_fn_res_var = Lvar(env.n_next_obj_var_id, env);
    l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
    Obj BK710 = env.n_next_obj_var_id;
    env.n_next_obj_var_id = l1;
    add_ref(env.n_next_obj_var_id);
    v_code = Gen_Eval_Code(v_expr, v_fn_res_var, env);
    release(env.n_next_obj_var_id);
    env.n_next_obj_var_id = BK710;
    release(l1);
    i0 = 0;
    V0[i0] = Ret_Val(v_fn_res_var, env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    l0 = amp(v_code, l1, env);
    release(l1);
    release(v_code);
    release(v_fn_res_var);
    goto block_709_end;
    block_709_end:;
    return l0;
  }
  
  
  Obj Do_If_In(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_values;
    Obj l0;
    Obj l1;
    int i0;
    int i1;
    int i2;
    Obj v_val;
    Obj v_instrs;
    Obj V0[2];
    Obj V2[1];
    Obj V1[2];
    Obj V3[2];
    Obj V4[2];
  
    v_val = p0;
    v_values = p1;
    v_instrs = p2;
    i0 = 0;
    V0[i0] = S_val;
    V1[i0] = v_val;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_cases;
    i1 = 0;
    i2 = 0;
    V3[i2] = S_vals;
    V4[i2] = v_values;
    add_ref(V4[i2]);
    i2 = i2 + 1;
    V3[i2] = S_instrs;
    V4[i2] = v_instrs;
    add_ref(V4[i2]);
    i2 = i2 + 1;
    V2[i1] = make_map(V3, V4, i2);
    i1 = i1 + 1;
    V1[i0] = make_set(V2, i1);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_symbol_switch, l1);
    return l0;
  }
  
  
  Obj Is_Almost_Def(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    SetIter s0;
    Obj v_env;
    Obj v_arity;
    Obj v_s;
  
    v_name = p0;
    v_arity = p1;
    v_env = p2;
    l0 = S_false;
    get_set_iter(s0, v_env);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l3 = ext_lookup(v_s, S_name);
        add_ref(l3);
        l2 = to_obj(are_eq(l3, v_name));
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l3 = ext_lookup(v_s, S_arity);
          add_ref(l3);
          l2 = to_obj(are_eq(l3, v_arity));
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_true;
          goto block_711_end;
        }
      }
      move_forward(s0);
    }
    block_711_end:;
    return l0;
  }
  
  
  Obj Gen_C_Decl__Extra_Params(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    int i1;
    Obj V0[1];
    Obj V1[5];
  
    b1 = is_objprocdef(p0);
    if (b1)
    {
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(69);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(118);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(38);
      i1 = i1 + 1;
      l1 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_712_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      l0 = empty_seq;
      goto block_712_end;
    }
    fail();
    block_712_end:;
    return l0;
  }
  
  
  Obj Rep_Seq(Obj p0, Obj p1, Env &env)
  {
    Obj v_value;
    Obj v_size;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_s;
    Obj v_n;
    Obj V0[1];
  
    v_size = p0;
    v_value = p1;
    v_n = v_size;
    add_ref(v_n);
    v_s = empty_seq;
    for ( ; ; )
    {
      l1 = greater(v_n, to_obj(0), env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      i0 = 0;
      V0[i0] = v_value;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = join_seqs(l2, v_s);
      release(l2);
      release(v_s);
      v_s = l1;
      l1 = minus(v_n, to_obj(1), env);
      release(v_n);
      v_n = l1;
    }
    l0 = v_s;
    add_ref(l0);
    release(v_s);
    release(v_n);
    goto block_713_end;
    block_713_end:;
    return l0;
  }
  
  
  Obj Inc_Seq(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_s;
    Obj v_n;
    Obj v_i;
    Obj V0[1];
  
    v_n = p0;
    v_i = minus(v_n, to_obj(1), env);
    v_s = empty_seq;
    for ( ; ; )
    {
      l1 = greater_eq(v_i, to_obj(0), env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      i0 = 0;
      V0[i0] = v_i;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = join_seqs(l2, v_s);
      release(l2);
      release(v_s);
      v_s = l1;
      l1 = minus(v_i, to_obj(1), env);
      release(v_i);
      v_i = l1;
    }
    l0 = v_s;
    add_ref(l0);
    release(v_s);
    release(v_i);
    goto block_714_end;
    block_714_end:;
    return l0;
  }
  
  
  Obj Norm_Type__Norm_Union_Type(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_t;
    Obj v_ts;
    Obj v_utype;
  
    v_utype = p0;
    init(t0);
    l1 = Norm_Type__Rem_Nesting(v_utype, env);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_t = l2;
      b1 = true;
      if (b1)
      {
        l2 = Norm_Type(v_t, env);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_ts = make_set(t0);
    l2 = Size(v_ts, env);
    l1 = greater(l2, to_obj(1), env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      add_ref(v_ts);
      l0 = make_tagged_obj(S_union_type, v_ts);
    }
    else
    {
      l0 = Only_Element(v_ts, env);
    }
    release(v_ts);
    goto block_715_end;
    block_715_end:;
    return l0;
  }
  
  
  Obj Intersection(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i1;
    int i2;
    Obj v_sets;
    Obj v_int;
    Obj v_i;
    Obj v_ss;
  
    v_sets = p0;
    l2 = empty_set;
    l1 = to_obj(are_eq(v_sets, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = empty_set;
      goto block_716_end;
    }
    v_ss = Rand_Sort(v_sets, env);
    v_int = brackets(v_ss, to_obj(0), env);
    l1 = to_obj(1);
    i2 = get_int_val(l1);
    l2 = Length(v_ss, env);
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    i1 = get_int_val(l1);
    for ( ; ; )
    {
      if (i2 > i1)
      {
        break;
      }
      v_i = to_obj(i2);
      l3 = brackets(v_ss, v_i, env);
      l2 = Intersection(v_int, l3, env);
      release(l3);
      release(v_int);
      v_int = l2;
      i2 = i2 + 1;
    }
    l0 = v_int;
    add_ref(l0);
    release(v_int);
    release(v_ss);
    goto block_716_end;
    block_716_end:;
    return l0;
  }
  
  
  Obj Desugar_Stmts(Obj p0, Obj p1, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_ss;
    Obj V0[1];
    Obj v_vs;
    Obj v_def_vars;
  
    v_stmts = p0;
    v_def_vars = p1;
    v_vs = v_def_vars;
    add_ref(v_vs);
    v_ss = empty_seq;
    get_seq_iter(q0, v_stmts);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      i0 = 0;
      V0[i0] = Desugar_Stmt(v_s, v_vs, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(v_ss, l2, env);
      release(l2);
      release(v_ss);
      v_ss = l1;
      l2 = Syn_New_Vars(v_s, env);
      l1 = amp(v_vs, l2, env);
      release(l2);
      release(v_vs);
      v_vs = l1;
      move_forward(q0);
    }
    l0 = v_ss;
    add_ref(l0);
    release(v_ss);
    release(v_vs);
    goto block_717_end;
    block_717_end:;
    return l0;
  }
  
  
  Obj Eval_Exprs_And_Add_To_Map(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    int i0;
    Obj V0[4];
    Obj V1[4];
    Obj v_ke;
    Obj v_ve;
    Obj v_ksv;
    Obj v_vsv;
  
    v_ke = p0;
    v_ve = p1;
    v_ksv = p2;
    v_vsv = p3;
    i0 = 0;
    V0[i0] = S_key_expr;
    V1[i0] = v_ke;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_value_expr;
    V1[i0] = v_ve;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_key_stream_var;
    V1[i0] = v_ksv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_value_stream_var;
    V1[i0] = v_vsv;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_eval_exprs_and_add_to_map, l1);
    return l0;
  }
  
  
  Obj Stmts_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_errs;
    Obj V0[1];
    Obj v_def_vars;
  
    v_stmts = p0;
    v_def_vars = p1;
    v_errs = Stmts_Wf_Errors(v_stmts, v_def_vars, v_def_vars, S_false, env);
    l1 = Never_Falls_Through(v_stmts, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = S_no_ret_stmt;
      i0 = i0 + 1;
      l2 = make_set(V0, i0);
      l1 = amp(v_errs, l2, env);
      release(l2);
      release(v_errs);
      v_errs = l1;
    }
    l0 = v_errs;
    add_ref(l0);
    release(v_errs);
    goto block_718_end;
    block_718_end:;
    return l0;
  }
  
  
  Obj Incompatibilities__Are_Syn_Compatible(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_t1;
    Obj v_t2;
  
    v_t1 = p0;
    v_t2 = p1;
    b1 = is_typevar(p0);
    if (b1)
    {
      b1 = true;
      if (b1)
      {
        l0 = S_false;
        goto block_719_end;
      }
    }
    b1 = true;
    if (b1)
    {
      b1 = is_typevar(p1);
      if (b1)
      {
        l0 = S_false;
        goto block_719_end;
      }
    }
    b1 = is_inttype(p0);
    if (b1)
    {
      b1 = is_inttype(p1);
      if (b1)
      {
        l0 = S_true;
        goto block_719_end;
      }
    }
    b1 = true;
    if (b1)
    {
      b1 = true;
      if (b1)
      {
        l1 = Partitions(v_t1, env);
        l2 = Partitions(v_t2, env);
        l0 = Are_Disjoint(l1, l2, env);
        release(l2);
        release(l1);
        goto block_719_end;
      }
    }
    fail();
    block_719_end:;
    return l0;
  }
  
  
  Obj Mk_Assignment(Obj p0, Obj p1, Env &env)
  {
    Obj v_value;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    int i0;
    int i1;
    Obj V0[1];
    Obj V1[3];
  
    v_var = p0;
    v_value = p1;
    i0 = 0;
    l3 = To_C_Var_Name(v_var, env);
    i1 = 0;
    V1[i1] = to_obj(32);
    i1 = i1 + 1;
    V1[i1] = to_obj(61);
    i1 = i1 + 1;
    V1[i1] = to_obj(32);
    i1 = i1 + 1;
    l5 = make_seq(V1, i1);
    l4 = make_tagged_obj(S_string, l5);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    l3 = To_C_Expr(v_value, env);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    i1 = 0;
    V1[i1] = to_obj(59);
    i1 = i1 + 1;
    l3 = make_seq(V1, i1);
    l2 = make_tagged_obj(S_string, l3);
    V0[i0] = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    return l0;
  }
  
  
  Obj Sort_Exprs_First(Obj p0, Env &env)
  {
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_e;
    Obj v_pure_exprs;
    Obj v_cond_exprs;
  
    v_exprs = p0;
    init(t0);
    get_set_iter(s0, v_exprs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_expr(l2);
      if (b1)
      {
        v_e = l2;
      }
      if (b1)
      {
        add_ref(v_e);
        append(t0, v_e);
      }
      move_forward(s0);
    }
    v_pure_exprs = make_set(t0);
    v_cond_exprs = minus(v_exprs, v_pure_exprs, env);
    l1 = Rand_Sort(v_pure_exprs, env);
    l2 = Rand_Sort(v_cond_exprs, env);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    release(v_pure_exprs);
    release(v_cond_exprs);
    goto block_720_end;
    block_720_end:;
    return l0;
  }
  
  
  Obj Mk_And_Expr(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i1;
    int i2;
    int i3;
    Obj v_len;
    Obj v_i;
    Obj V0[2];
    Obj V1[2];
    Obj v_rev_exprs;
  
    v_exprs = p0;
    v_len = Length(v_exprs, env);
    v_rev_exprs = Reverse(v_exprs, env);
    v_expr = brackets(v_rev_exprs, to_obj(0), env);
    l1 = to_obj(1);
    i2 = get_int_val(l1);
    l1 = minus(v_len, to_obj(1), env);
    i1 = get_int_val(l1);
    for ( ; ; )
    {
      if (i2 > i1)
      {
        break;
      }
      v_i = to_obj(i2);
      i3 = 0;
      V0[i3] = S_right;
      V1[i3] = v_expr;
      add_ref(V1[i3]);
      i3 = i3 + 1;
      V0[i3] = S_left;
      V1[i3] = brackets(v_rev_exprs, v_i, env);
      i3 = i3 + 1;
      l3 = make_map(V0, V1, i3);
      l2 = make_tagged_obj(S_and_expr, l3);
      release(v_expr);
      v_expr = l2;
      i2 = i2 + 1;
    }
    l0 = v_expr;
    add_ref(l0);
    release(v_expr);
    release(v_len);
    release(v_rev_exprs);
    goto block_721_end;
    block_721_end:;
    return l0;
  }
  
  
  Obj Do_If_Not_In(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_values;
    Obj l0;
    Obj l1;
    int i0;
    int i1;
    int i2;
    Obj v_val;
    Obj v_instrs;
    Obj V2[1];
    Obj V0[3];
    Obj V1[3];
    Obj V3[2];
    Obj V4[2];
  
    v_val = p0;
    v_values = p1;
    v_instrs = p2;
    i0 = 0;
    V0[i0] = S_else;
    V1[i0] = v_instrs;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_val;
    V1[i0] = v_val;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_cases;
    i1 = 0;
    i2 = 0;
    V3[i2] = S_instrs;
    V4[i2] = empty_seq;
    i2 = i2 + 1;
    V3[i2] = S_vals;
    V4[i2] = v_values;
    add_ref(V4[i2]);
    i2 = i2 + 1;
    V2[i1] = make_map(V3, V4, i2);
    i1 = i1 + 1;
    V1[i0] = make_set(V2, i1);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_symbol_switch, l1);
    return l0;
  }
  
  
  Obj Mk_Named_Type_Memb_Test_Fn(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    Obj v_code;
    Obj v_res_var;
    Obj V0[1];
    Obj v_typedefs;
    Obj v_type_name;
  
    v_type_name = p0;
    v_typedefs = p1;
    v_res_var = Bvar(to_obj(0), env);
    Obj BK723 = env.n_next_set_it_var_id;
    env.n_next_set_it_var_id = to_obj(0);
    add_ref(env.n_next_set_it_var_id);
    Obj BK724 = env.n_next_seq_it_var_id;
    env.n_next_seq_it_var_id = to_obj(0);
    add_ref(env.n_next_seq_it_var_id);
    Obj BK725 = env.n_next_map_it_var_id;
    env.n_next_map_it_var_id = to_obj(0);
    add_ref(env.n_next_map_it_var_id);
    Obj BK726 = env.n_next_obj_var_id;
    env.n_next_obj_var_id = to_obj(0);
    add_ref(env.n_next_obj_var_id);
    Obj BK727 = env.n_next_int_var_id;
    env.n_next_int_var_id = to_obj(0);
    add_ref(env.n_next_int_var_id);
    l1 = brackets(v_typedefs, v_type_name, env);
    l2 = Fn_Par(to_obj(0), env);
    v_code = Gen_Type_Checking_Code(l1, l2, v_res_var, env);
    release(l2);
    release(l1);
    release(env.n_next_int_var_id);
    env.n_next_int_var_id = BK727;
    release(env.n_next_obj_var_id);
    env.n_next_obj_var_id = BK726;
    release(env.n_next_map_it_var_id);
    env.n_next_map_it_var_id = BK725;
    release(env.n_next_seq_it_var_id);
    env.n_next_seq_it_var_id = BK724;
    release(env.n_next_set_it_var_id);
    env.n_next_set_it_var_id = BK723;
    add_ref(v_type_name);
    l1 = make_tagged_obj(S_memb_test, v_type_name);
    i0 = 0;
    V0[i0] = Ret_Val(v_res_var, env);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = amp(v_code, l3, env);
    release(l3);
    l0 = Bool_Proc_Def(l1, to_obj(1), l2, env);
    release(l2);
    release(l1);
    release(v_code);
    release(v_res_var);
    goto block_722_end;
    block_722_end:;
    return l0;
  }
  
  
  Obj Norm_Type__Rem_Nesting(Obj p0, Env &env)
  {
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj v_t;
    Obj V0[1];
    Obj v_ts;
  
    v_type = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_729_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_729_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_729_end:;
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_ts);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_t = l3;
        b1 = true;
        if (b1)
        {
          l3 = Norm_Type__Rem_Nesting(v_t, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_728_end;
    }
    b1 = true;
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_type;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_728_end;
    }
    fail();
    block_728_end:;
    return l0;
  }
  
  
  Obj Compile_To_C__Extra_Params(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    int i1;
    Obj V0[1];
    Obj V1[8];
  
    b1 = is_objprocdef(p0);
    if (b1)
    {
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(69);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(118);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(38);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(118);
      i1 = i1 + 1;
      l1 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_730_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      l0 = empty_seq;
      goto block_730_end;
    }
    fail();
    block_730_end:;
    return l0;
  }
  
  
  Obj Compile_To_C__Ret_Type_Str(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj V0[5];
  
    b1 = is_objprocdef(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(79);
      i0 = i0 + 1;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(106);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      l0 = make_tagged_obj(S_string, l1);
      goto block_731_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(108);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      l0 = make_tagged_obj(S_string, l1);
      goto block_731_end;
    }
    fail();
    block_731_end:;
    return l0;
  }
  
  
  Obj Gen_C_Decl__Ret_Type_Str(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj V0[5];
  
    b1 = is_objprocdef(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(79);
      i0 = i0 + 1;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(106);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      l0 = make_tagged_obj(S_string, l1);
      goto block_732_end;
    }
    b1 = is_boolprocdef(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(108);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      l0 = make_tagged_obj(S_string, l1);
      goto block_732_end;
    }
    fail();
    block_732_end:;
    return l0;
  }
  
  
  Obj Merge_Fns__Mk_Ptrn(Obj p0, Env &env)
  {
    Obj v_ptrn;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    Obj V0[2];
    Obj V1[2];
    Obj v_param;
  
    v_param = p0;
    l2 = ext_lookup(v_param, S_type, b1);
    l2 = to_obj(b1);
    if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
    {
      fail();
    }
    if (are_eq(l2, S_true))
    {
      l1 = ext_lookup(v_param, S_type);
      add_ref(l1);
    }
    else
    {
      l1 = S_type_any;
    }
    v_ptrn = make_tagged_obj(S_type_ptrn, l1);
    l1 = ext_lookup(v_param, S_var, b1);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = S_ptrn;
      V1[i0] = v_ptrn;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_name;
      V1[i0] = ext_lookup(v_param, S_var);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l2 = make_map(V0, V1, i0);
      l1 = make_tagged_obj(S_var_ptrn, l2);
      release(v_ptrn);
      v_ptrn = l1;
    }
    l0 = v_ptrn;
    add_ref(l0);
    release(v_ptrn);
    goto block_733_end;
    block_733_end:;
    return l0;
  }
  
  
  Obj In(Obj p0, Obj p1, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    SetIter s0;
    SeqIter q0;
    Obj v_s;
    Obj v_e;
  
    b1 = is_any(p0);
    if (b1)
    {
      v_e = p0;
    }
    if (b1)
    {
      b1 = is_seq(p1);
      if (b1)
      {
        v_s = p1;
      }
      if (b1)
      {
        get_seq_iter(q0, v_s);
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_x = get_curr_obj(q0);
          l1 = to_obj(are_eq(v_x, v_e));
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l0 = S_true;
            goto block_735_end;
          }
          move_forward(q0);
        }
        l0 = S_false;
        goto block_735_end;
        block_735_end:;
        goto block_734_end;
      }
    }
    b1 = is_any(p0);
    if (b1)
    {
      v_e = p0;
    }
    if (b1)
    {
      b1 = is_set(p1);
      if (b1)
      {
        v_s = p1;
      }
      if (b1)
      {
        l0 = S_false;
        get_set_iter(s0, v_s);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          b1 = are_eq(l2, v_e);
          if (b1)
          {
            l0 = S_true;
            goto block_736_end;
          }
          move_forward(s0);
        }
        block_736_end:;
        goto block_734_end;
      }
    }
    fail();
    block_734_end:;
    return l0;
  }
  
  
  Obj Do_If_Not(Obj p0, Obj p1, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_instrs;
    Obj V0[1];
    Obj v_instr;
  
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_cond = p0;
    }
    if (b1)
    {
      b1 = is_instr(p1);
      if (b1)
      {
        v_instr = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = v_instr;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l1 = make_seq(V0, i0);
        l0 = Do_If_Not(v_cond, l1, env);
        release(l1);
        goto block_737_end;
      }
    }
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_cond = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_seq))
      {
        b1 = true;
        goto block_738_end;
      }
      if (!is_ne_seq(p1))
      {
        b1 = false;
        goto block_738_end;
      }
      get_seq_iter(q0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        l1 = get_curr_obj(q0);
        b1 = is_instr(l1);
        if (!b1)
        {
          goto block_738_end;
        }
        move_forward(q0);
      }
      b1 = true;
      block_738_end:;
      if (b1)
      {
        v_instrs = p1;
      }
      if (b1)
      {
        l1 = empty_seq;
        l0 = Branch(v_cond, l1, v_instrs, env);
        release(l1);
        goto block_737_end;
      }
    }
    fail();
    block_737_end:;
    return l0;
  }
  
  
  Obj Do_If(Obj p0, Obj p1, Env &env)
  {
    Obj v_cond;
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_instrs;
    Obj V0[1];
    Obj v_instr;
  
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_cond = p0;
    }
    if (b1)
    {
      b1 = is_instr(p1);
      if (b1)
      {
        v_instr = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = v_instr;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l1 = make_seq(V0, i0);
        l0 = Do_If(v_cond, l1, env);
        release(l1);
        goto block_739_end;
      }
    }
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_cond = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_seq))
      {
        b1 = true;
        goto block_740_end;
      }
      if (!is_ne_seq(p1))
      {
        b1 = false;
        goto block_740_end;
      }
      get_seq_iter(q0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        l1 = get_curr_obj(q0);
        b1 = is_instr(l1);
        if (!b1)
        {
          goto block_740_end;
        }
        move_forward(q0);
      }
      b1 = true;
      block_740_end:;
      if (b1)
      {
        v_instrs = p1;
      }
      if (b1)
      {
        l1 = empty_seq;
        l0 = Branch(v_cond, v_instrs, l1, env);
        release(l1);
        goto block_739_end;
      }
    }
    fail();
    block_739_end:;
    return l0;
  }
  
  
  Obj Intermix(Obj p0, Obj p1, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_seq;
    Obj v_res;
    Obj V0[1];
  
    v_seq = p0;
    v_obj = p1;
    v_res = empty_seq;
    l1 = Reverse(v_seq, env);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_x = get_curr_obj(q0);
      l3 = empty_seq;
      l2 = to_obj(are_eq(v_res, l3));
      release(l3);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        i0 = 0;
        V0[i0] = v_obj;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = join_seqs(l3, v_res);
        release(l3);
        release(v_res);
        v_res = l2;
      }
      i0 = 0;
      V0[i0] = v_x;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = join_seqs(l3, v_res);
      release(l3);
      release(v_res);
      v_res = l2;
      move_forward(q0);
    }
    release(l1);
    l0 = v_res;
    add_ref(l0);
    release(v_res);
    goto block_741_end;
    block_741_end:;
    return l0;
  }
  
  
  Obj Merge_Values(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    Stream t2;
    SetIter s1;
    Obj v_maps;
    Obj v_m;
    Obj v_k;
    Obj v_all_keys;
  
    v_maps = p0;
    init(t0);
    get_set_iter(s0, v_maps);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_m = l3;
      b1 = true;
      if (b1)
      {
        l3 = Keys(v_m, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    v_all_keys = Union(l1, env);
    release(l1);
    init(t0);
    init(t1);
    get_set_iter(s0, v_all_keys);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_k = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_k);
        append(t0, v_k);
        init(t2);
        get_set_iter(s1, v_maps);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l4 = get_curr_obj(s1);
          v_m = l4;
          b1 = true;
          if (b1)
          {
            l4 = Has_Key(v_m, v_k, env);
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              l4 = brackets(v_m, v_k, env);
              append(t2, l4);
            }
          }
          move_forward(s1);
        }
        l2 = make_set(t2);
        append(t1, l2);
      }
      move_forward(s0);
    }
    l0 = make_map(t0, t1);
    release(v_all_keys);
    goto block_742_end;
    block_742_end:;
    return l0;
  }
  
  
  Obj minus(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    SetIter s0;
    Obj v_a;
    Obj v_b;
    Obj v_s1;
    Obj v_s2;
  
    if (are_eq(p0, empty_set))
    {
      b1 = true;
      goto block_744_end;
    }
    if (!is_ne_set(p0))
    {
      b1 = false;
      goto block_744_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b1 = true;
      if (!b1)
      {
        goto block_744_end;
      }
      move_forward(s0);
    }
    b1 = true;
    block_744_end:;
    if (b1)
    {
      v_s1 = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_745_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_745_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = true;
        if (!b1)
        {
          goto block_745_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_745_end:;
      if (b1)
      {
        v_s2 = p1;
      }
      if (b1)
      {
        l0 = Difference(v_s1, v_s2, env);
        goto block_743_end;
      }
    }
    b1 = is_int(p0);
    if (b1)
    {
      v_a = p0;
    }
    if (b1)
    {
      b1 = is_int(p1);
      if (b1)
      {
        v_b = p1;
      }
      if (b1)
      {
        l1 = minus(v_b, env);
        l0 = plus(v_a, l1, env);
        release(l1);
        goto block_743_end;
      }
    }
    fail();
    block_743_end:;
    return l0;
  }
  
  
  Obj Syn_Fndef_To_Fndefs__Syn_Sgns_To_Named_Params(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    SetIter s0;
    Obj v_ss;
    Obj V0[2];
    Obj V1[2];
    Obj v_syn_sgns;
  
    v_syn_sgns = p0;
    init(t0);
    init(t1);
    get_set_iter(s0, v_syn_sgns);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_ss = l2;
      b1 = true;
      if (b1)
      {
        l4 = ext_lookup(v_ss, S_name);
        add_ref(l4);
        l3 = Untag(l4, env);
        release(l4);
        l2 = make_tagged_obj(S_named_par, l3);
        append(t0, l2);
        l4 = ext_lookup(v_ss, S_params);
        add_ref(l4);
        l5 = empty_seq;
        l3 = to_obj(are_eq(l4, l5));
        release(l5);
        release(l4);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l2 = ext_lookup(v_ss, S_res_type);
          add_ref(l2);
        }
        else
        {
          i0 = 0;
          V0[i0] = S_in_types;
          V1[i0] = ext_lookup(v_ss, S_params);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_out_type;
          V1[i0] = ext_lookup(v_ss, S_res_type);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l3 = make_map(V0, V1, i0);
          l2 = make_tagged_obj(S_cls_type, l3);
        }
        append(t1, l2);
      }
      move_forward(s0);
    }
    l0 = make_map(t0, t1);
    return l0;
  }
  
  
  Obj Has_Return(Obj p0, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
  
    v_stmts = p0;
    Obj (*BF746)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD746 = env.C1_eval;
    env.n1_eval = cls_32;
    env.C1_eval = 0;
    Obj (*BF747)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD747 = env.C1_condition;
    env.n1_condition = cls_36;
    env.C1_condition = 0;
    l1 = Select_Expr_Fn(v_stmts, env);
    env.n1_condition = BF747;
    env.C1_condition = BD747;
    env.n1_eval = BF746;
    env.C1_eval = BD746;
    l2 = empty_set;
    l0 = to_obj(are_eq(l1, l2));
    release(l2);
    release(l1);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    return l0;
  }
  
  
  Obj Types_Are_Wf__Top_Level_Refs(Obj p0, Env &env)
  {
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj v_t;
    Obj v_s;
    Obj V0[1];
    Obj v_ts;
  
    v_type = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_749_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ref);
    if (!b1)
    {
      goto block_749_end;
    }
    l1 = get_inner_obj(p0);
    v_s = l1;
    b1 = true;
    block_749_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_s;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_748_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_750_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_750_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_750_end:;
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_ts);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_t = l3;
        b1 = true;
        if (b1)
        {
          l3 = Types_Are_Wf__Top_Level_Refs(v_t, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_748_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = empty_set;
      goto block_748_end;
    }
    fail();
    block_748_end:;
    return l0;
  }
  
  
  Obj Gen_Prg_Code(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_fndefs;
    Obj v_fd;
    Obj v_simpl_prg;
    Obj v_tn;
    Obj v_memb_tests;
  
    v_prg = p0;
    v_simpl_prg = Merge_Fns_Same_Name_And_Arity(v_prg, env);
    init(t0);
    l2 = ext_lookup(v_simpl_prg, S_tdefs);
    add_ref(l2);
    l1 = Keys(l2, env);
    release(l2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_tn = l2;
      b1 = true;
      if (b1)
      {
        l3 = ext_lookup(v_prg, S_tdefs);
        add_ref(l3);
        l2 = Mk_Named_Type_Memb_Test_Fn(v_tn, l3, env);
        release(l3);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_memb_tests = make_set(t0);
    init(t0);
    l1 = ext_lookup(v_simpl_prg, S_fndefs);
    add_ref(l1);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        l3 = ext_lookup(v_simpl_prg, S_tdefs);
        add_ref(l3);
        Obj BK752 = env.n_type_map;
        env.n_type_map = l3;
        add_ref(env.n_type_map);
        l2 = Gen_Fn_Code(v_fd, env);
        release(env.n_type_map);
        env.n_type_map = BK752;
        release(l3);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_fndefs = make_set(t0);
    l0 = amp(v_memb_tests, v_fndefs, env);
    release(v_fndefs);
    release(v_simpl_prg);
    release(v_memb_tests);
    goto block_751_end;
    block_751_end:;
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Seq(Obj p0, Obj p1, Env &env)
  {
    Obj v_offset;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Obj v_res;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
  
    v_tokens = p0;
    v_offset = p1;
    l2 = Length(v_tokens, env);
    l1 = lower(v_offset, l2, env);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l2 = brackets(v_tokens, v_offset, env);
    l3 = Left_Bracket(env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = plus(v_offset, to_obj(1), env);
    l2 = Right_Bracket(env);
    v_res = Parse_Obj__Parse_Objs(v_tokens, l1, l2, env);
    release(l2);
    release(l1);
    b1 = is_parseerror(v_res);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_res;
      add_ref(l0);
      release(v_res);
      goto block_753_end;
    }
    i0 = 0;
    V0[i0] = S_offset;
    V1[i0] = ext_lookup(v_res, S_offset);
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_obj;
    V1[i0] = ext_lookup(v_res, S_objs);
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_res);
    goto block_753_end;
    block_753_end:;
    return l0;
  }
  
  
  Obj Includes(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_p;
    Obj v_ps;
  
    v_ps = p0;
    v_p = p1;
    l1 = In(v_p, v_ps, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_true;
      goto block_754_end;
    }
    if (!is_tag_obj(v_p))
    {
      b1 = false;
      goto block_755_end;
    }
    l2 = get_tag(v_p);
    b1 = are_eq(S_symbol, l2);
    if (!b1)
    {
      goto block_755_end;
    }
    l2 = get_inner_obj(v_p);
    b1 = is_atom(l2);
    block_755_end:;
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = In(S_symbols, v_ps, env);
      goto block_754_end;
    }
    if (!is_tag_obj(v_p))
    {
      b1 = false;
      goto block_756_end;
    }
    l2 = get_tag(v_p);
    b1 = are_eq(S_tagged_obj, l2);
    if (!b1)
    {
      goto block_756_end;
    }
    l2 = get_inner_obj(v_p);
    b1 = is_atom(l2);
    block_756_end:;
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = In(S_tagged_objs, v_ps, env);
      goto block_754_end;
    }
    l0 = S_false;
    goto block_754_end;
    block_754_end:;
    return l0;
  }
  
  
  Obj Compile_To_C__Typesymb2str(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Obj v_a;
    Obj V0[2];
    Obj v_ts;
    Obj v_par_types;
  
    v_ts = p0;
    v_par_types = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_758_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_symbol);
    if (!b1)
    {
      goto block_758_end;
    }
    l1 = get_inner_obj(p0);
    v_a = l1;
    b1 = true;
    block_758_end:;
    if (b1)
    {
      l0 = to_str(v_a);
      goto block_757_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_759_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_par_type_symbol);
    if (!b1)
    {
      goto block_759_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_759_end:;
    if (b1)
    {
      l3 = ext_lookup(v_ts, S_symbol);
      add_ref(l3);
      l2 = Compile_To_C__Typesymb2str(l3, v_par_types, env);
      release(l3);
      i0 = 0;
      V0[i0] = to_obj(95);
      i0 = i0 + 1;
      V0[i0] = to_obj(95);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l3 = make_tagged_obj(S_string, l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l3 = Index_First(v_ts, v_par_types, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_757_end;
    }
    fail();
    block_757_end:;
    return l0;
  }
  
  
  Obj Action(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj v_a;
    Obj V0[2];
    Obj V1[2];
    Obj v_c;
  
    b1 = is_clause(p0);
    if (b1)
    {
      v_c = p0;
    }
    if (b1)
    {
      b1 = is_matchaction(p1);
      if (b1)
      {
        v_a = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_action;
        V1[i0] = v_a;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_clause;
        V1[i0] = v_c;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_match_action, l1);
        goto block_760_end;
      }
    }
    b1 = is_expr(p0);
    if (b1)
    {
      v_c = p0;
    }
    if (b1)
    {
      b1 = is_finalmatchaction(p1);
      if (b1)
      {
        v_a = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_cond;
        V1[i0] = v_c;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_action;
        V1[i0] = v_a;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_cond_match_action, l1);
        goto block_760_end;
      }
    }
    fail();
    block_760_end:;
    return l0;
  }
  
  
  Obj Arity(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    Obj v_t;
    Obj v_s;
    Obj v_e;
    Obj v_d;
    Obj v_fd;
  
    b1 = is_fndef(p0);
    if (b1)
    {
      v_fd = p0;
    }
    if (b1)
    {
      l1 = ext_lookup(v_fd, S_params);
      add_ref(l1);
      l0 = Length(l1, env);
      release(l1);
      goto block_761_end;
    }
    b1 = is_synfndef(p0);
    if (b1)
    {
      v_d = p0;
    }
    if (b1)
    {
      l1 = ext_lookup(v_d, S_params);
      add_ref(l1);
      l0 = Length(l1, env);
      release(l1);
      goto block_761_end;
    }
    b1 = is_clstype(p0);
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l1 = ext_lookup(v_t, S_in_types);
      add_ref(l1);
      l0 = Length(l1, env);
      release(l1);
      goto block_761_end;
    }
    b1 = is_clsexpr(p0);
    if (b1)
    {
      v_e = p0;
    }
    if (b1)
    {
      l1 = ext_lookup(v_e, S_params);
      add_ref(l1);
      l0 = Length(l1, env);
      release(l1);
      goto block_761_end;
    }
    b1 = is_synsgn(p0);
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      l1 = ext_lookup(v_s, S_params);
      add_ref(l1);
      l0 = Length(l1, env);
      release(l1);
      goto block_761_end;
    }
    b1 = is_expr(p0);
    if (b1)
    {
      l0 = to_obj(0);
      goto block_761_end;
    }
    b1 = is_type(p0);
    if (b1)
    {
      l0 = to_obj(0);
      goto block_761_end;
    }
    fail();
    block_761_end:;
    return l0;
  }
  
  
  Obj Parse_Obj(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    Obj v_res;
    Obj v_tokens;
  
    v_tokens = p0;
    l2 = empty_seq;
    l1 = to_obj(are_eq(v_tokens, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = Parse_Obj__Error(to_obj(0), env);
      goto block_762_end;
    }
    v_res = Parse_Obj__Parse_Obj(v_tokens, to_obj(0), env);
    b1 = is_parseerror(v_res);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_res;
      add_ref(l0);
      release(v_res);
      goto block_762_end;
    }
    l2 = ext_lookup(v_res, S_offset);
    add_ref(l2);
    l3 = Length(v_tokens, env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = ext_lookup(v_res, S_offset);
      add_ref(l1);
      l0 = Parse_Obj__Error(l1, env);
      release(l1);
      release(v_res);
      goto block_762_end;
    }
    l1 = ext_lookup(v_res, S_obj);
    add_ref(l1);
    l0 = make_tagged_obj(S_obj, l1);
    release(v_res);
    goto block_762_end;
    block_762_end:;
    return l0;
  }
  
  
  Obj All(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    SetIter s0;
    SeqIter q0;
    Obj v_bs;
    Obj v_s;
  
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_764_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_764_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_bool(l1);
      if (!b1)
      {
        goto block_764_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_764_end:;
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      l0 = In(S_false, v_s, env);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      goto block_763_end;
    }
    if (!is_ne_set(p0))
    {
      b1 = false;
      goto block_765_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b1 = is_bool(l1);
      if (!b1)
      {
        goto block_765_end;
      }
      move_forward(s0);
    }
    b1 = true;
    block_765_end:;
    if (b1)
    {
      v_bs = p0;
    }
    if (b1)
    {
      l0 = S_false;
      get_set_iter(s0, v_bs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        b1 = are_eq(l2, S_false);
        if (b1)
        {
          l0 = S_true;
          goto block_766_end;
        }
        move_forward(s0);
      }
      block_766_end:;
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      goto block_763_end;
    }
    fail();
    block_763_end:;
    return l0;
  }
  
  
  Obj Mk_Gen_Call(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_params;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    int i0;
    Obj l7;
    Obj l8;
    SeqIter q0;
    Obj V0[2];
    Obj v_p;
    Obj v_fn_name;
    Obj v_trailing_params;
  
    v_fn_name = p0;
    v_params = p1;
    v_trailing_params = p2;
    i0 = 0;
    V0[i0] = to_obj(40);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l2 = amp(v_fn_name, l3, env);
    release(l3);
    l6 = make_array(get_seq_len(v_params), S_nil);
    get_seq_iter(q0, v_params);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l8 = To_C_Expr(v_p, env);
      set_at(l6, i0, l8);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l5 = amp(l6, v_trailing_params, env);
    release(l6);
    i0 = 0;
    V0[i0] = to_obj(44);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l7 = make_seq(V0, i0);
    l6 = make_tagged_obj(S_string, l7);
    l4 = Intermix(l5, l6, env);
    release(l6);
    release(l5);
    l3 = Append(l4, env);
    release(l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    i0 = 0;
    V0[i0] = to_obj(41);
    i0 = i0 + 1;
    V0[i0] = to_obj(59);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = make_tagged_obj(S_string, l3);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Gen_Vector_Eval_Info(Obj p0, Env &env)
  {
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_code;
    Obj v_count_var;
    Obj V0[3];
    Obj V1[3];
    Obj v_elems_var;
  
    v_exprs = p0;
    l1 = Length(v_exprs, env);
    v_elems_var = Vvar(env.n_next_vector_var_id, l1, env);
    release(l1);
    v_count_var = Ivar(env.n_next_int_var_id, env);
    l1 = plus(env.n_next_int_var_id, to_obj(1), env);
    Obj BK768 = env.n_next_int_var_id;
    env.n_next_int_var_id = l1;
    add_ref(env.n_next_int_var_id);
    l2 = plus(env.n_next_vector_var_id, to_obj(1), env);
    Obj BK769 = env.n_next_vector_var_id;
    env.n_next_vector_var_id = l2;
    add_ref(env.n_next_vector_var_id);
    v_code = Gen_Vector_Eval_Info__Gen_Vector_Eval_Code(v_exprs, v_elems_var, v_count_var, env);
    release(env.n_next_vector_var_id);
    env.n_next_vector_var_id = BK769;
    release(l2);
    release(env.n_next_int_var_id);
    env.n_next_int_var_id = BK768;
    release(l1);
    i0 = 0;
    V0[i0] = S_code;
    V1[i0] = v_code;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_count_var;
    V1[i0] = v_count_var;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_vect_var;
    V1[i0] = v_elems_var;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_code);
    release(v_count_var);
    release(v_elems_var);
    goto block_767_end;
    block_767_end:;
    return l0;
  }
  
  
  Obj Replace_Bound_Vars(Obj p0, Obj p1, Env &env)
  {
    Obj v_ptrn;
    Obj l0;
    Obj v_def_vars;
  
    v_ptrn = p0;
    v_def_vars = p1;
    Obj (*BF770)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD770 = env.C1_condition;
    env.n1_condition = cls_35;
    env.C1_condition = 0;
    Obj (*BF771)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD771 = env.C1_eval;
    Obj ND771[1];
    ND771[0] = v_def_vars;
    add_ref(ND771[0]);
    env.n1_eval = cls_39;
    env.C1_eval = ND771;
    l0 = Replace_Expr_Fn(v_ptrn, env);
    env.n1_eval = BF771;
    env.C1_eval = BD771;
    release(ND771[0]);
    env.n1_condition = BF770;
    env.C1_condition = BD770;
    return l0;
  }
  
  
  Obj Simplify__Make(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
  
    v_expr = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_773_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_773_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_773_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_src_expr);
      add_ref(l1);
      l2 = ext_lookup(v_expr, S_ptrn);
      add_ref(l2);
      l4 = ext_lookup(v_expr, S_cond, b1);
      l4 = to_obj(b1);
      if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
      {
        fail();
      }
      if (are_eq(l4, S_true))
      {
        l3 = ext_lookup(v_expr, S_cond);
        add_ref(l3);
      }
      else
      {
        l3 = Obj_True(env);
      }
      l4 = ext_lookup(v_expr, S_expr);
      add_ref(l4);
      l0 = Simplify__Make(S_select_expr_fn, l1, l2, l3, l4, env);
      release(l4);
      release(l3);
      release(l2);
      release(l1);
      goto block_772_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_774_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_774_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_774_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_src_expr);
      add_ref(l1);
      l2 = ext_lookup(v_expr, S_ptrn);
      add_ref(l2);
      l3 = Obj_True(env);
      l4 = ext_lookup(v_expr, S_expr);
      add_ref(l4);
      l0 = Simplify__Make(S_replace_expr_fn, l1, l2, l3, l4, env);
      release(l4);
      release(l3);
      release(l2);
      release(l1);
      goto block_772_end;
    }
    fail();
    block_772_end:;
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Set(Obj p0, Obj p1, Env &env)
  {
    Obj v_offset;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Obj v_res;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
  
    v_tokens = p0;
    v_offset = p1;
    l2 = Length(v_tokens, env);
    l1 = lower(v_offset, l2, env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l2 = brackets(v_tokens, v_offset, env);
      l3 = Left_Brace(env);
      l1 = to_obj(are_eq(l2, l3));
      release(l3);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = plus(v_offset, to_obj(1), env);
    l2 = Right_Brace(env);
    v_res = Parse_Obj__Parse_Objs(v_tokens, l1, l2, env);
    release(l2);
    release(l1);
    b1 = is_parseerror(v_res);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_res;
      add_ref(l0);
      release(v_res);
      goto block_775_end;
    }
    i0 = 0;
    V0[i0] = S_offset;
    V1[i0] = ext_lookup(v_res, S_offset);
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_obj;
    l1 = ext_lookup(v_res, S_objs);
    add_ref(l1);
    V1[i0] = Set(l1, env);
    release(l1);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_res);
    goto block_775_end;
    block_775_end:;
    return l0;
  }
  
  
  Obj Are_Compatible(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    SetIter s0;
    SetIter s1;
    Obj v_fndefs;
    Obj v_fd1;
    Obj v_fd2;
  
    v_fndefs = p0;
    l0 = S_false;
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_fndefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_fd2 = l3;
          b1 = true;
          if (b1)
          {
            l3 = to_obj(are_eq(v_fd1, v_fd2));
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = Are_Compatible__Are_Comp(v_fd1, v_fd2, env);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l3 = S_false;
              }
              else
              {
                l3 = S_true;
              }
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l0 = S_true;
              goto block_777_end;
            }
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    block_777_end:;
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    goto block_776_end;
    block_776_end:;
    return l0;
  }
  
  
  Obj Is_Def__Could_Match(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_arity;
    Obj v_actual_named_params;
    Obj v_sgn;
    Obj v_formal_named_params;
  
    v_name = p0;
    v_arity = p1;
    v_sgn = p2;
    v_actual_named_params = p3;
    l2 = ext_lookup(v_sgn, S_name);
    add_ref(l2);
    l1 = to_obj(are_eq(l2, v_name));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_false))
    {
      l2 = ext_lookup(v_sgn, S_arity);
      add_ref(l2);
      l1 = to_obj(are_eq(l2, v_arity));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      goto block_778_end;
    }
    l1 = ext_lookup(v_sgn, S_named_params, b1);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      v_formal_named_params = ext_lookup(v_sgn, S_named_params);
      add_ref(v_formal_named_params);
    }
    else
    {
      v_formal_named_params = empty_set;
    }
    l0 = Subset(v_formal_named_params, v_actual_named_params, env);
    release(v_formal_named_params);
    goto block_778_end;
    block_778_end:;
    return l0;
  }
  
  
  Obj To_Nary_Op(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_expr;
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    SeqIter q0;
    Obj v_e;
    Obj V0[1];
    Obj v_parentesised;
    Obj v_op;
  
    v_op = p0;
    v_exprs = p1;
    v_parentesised = p2;
    l2 = make_array(get_seq_len(v_exprs), S_nil);
    get_seq_iter(q0, v_exprs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_e = get_curr_obj(q0);
      l4 = To_C_Expr(v_e, S_true, env);
      set_at(l2, i0, l4);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l1 = Intermix(l2, v_op, env);
    release(l2);
    v_expr = Append(l1, env);
    release(l1);
    l2 = Length(v_exprs, env);
    l1 = greater(l2, to_obj(1), env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = v_parentesised;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = to_obj(40);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l3 = make_tagged_obj(S_string, l4);
      l2 = amp(l3, v_expr, env);
      release(l3);
      i0 = 0;
      V0[i0] = to_obj(41);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l3 = make_tagged_obj(S_string, l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      release(v_expr);
      v_expr = l1;
    }
    l0 = v_expr;
    add_ref(l0);
    release(v_expr);
    goto block_779_end;
    block_779_end:;
    return l0;
  }
  
  
  Obj Dupl_Elems(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    int i1;
    int i2;
    SeqIter q0;
    SeqIter q1;
    Obj v_s;
    Obj v_r;
    Obj v_i1;
    Obj v_i2;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
  
    v_s = p0;
    v_r = empty_set;
    get_seq_iter(q0, v_s);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_e1 = get_curr_obj(q0);
      v_i1 = to_obj(i0);
      get_seq_iter(q1, v_s);
      i1 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q1))
        {
          break;
        }
        v_e2 = get_curr_obj(q1);
        v_i2 = to_obj(i1);
        l1 = to_obj(are_eq(v_e1, v_e2));
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = to_obj(are_eq(v_i1, v_i2));
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i2 = 0;
          V0[i2] = v_e1;
          add_ref(V0[i2]);
          i2 = i2 + 1;
          V0[i2] = v_e2;
          add_ref(V0[i2]);
          i2 = i2 + 1;
          l2 = make_set(V0, i2);
          l1 = amp(v_r, l2, env);
          release(l2);
          release(v_r);
          v_r = l1;
        }
        move_forward(q1);
        i1 = i1 + 1;
      }
      move_forward(q0);
      i0 = i0 + 1;
    }
    l0 = v_r;
    add_ref(l0);
    release(v_r);
    goto block_780_end;
    block_780_end:;
    return l0;
  }
  
  
  Obj Has_Top_Level_Break(Obj p0, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    SeqIter q0;
    SeqIter q1;
    Obj v_s;
    Obj v_b;
  
    v_stmts = p0;
    get_seq_iter(q0, v_stmts);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l1 = to_obj(are_eq(v_s, S_break_stmt));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_true;
        goto block_781_end;
      }
      if (!is_tag_obj(v_s))
      {
        b1 = false;
        goto block_782_end;
      }
      l2 = get_tag(v_s);
      b1 = are_eq(S_if_stmt, l2);
      if (!b1)
      {
        goto block_782_end;
      }
      l2 = get_inner_obj(v_s);
      b1 = is_any(l2);
      block_782_end:;
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = ext_lookup(v_s, S_branches);
        add_ref(l1);
        get_seq_iter(q1, l1);
        for ( ; ; )
        {
          if (is_out_of_range(q1))
          {
            break;
          }
          v_b = get_curr_obj(q1);
          l3 = ext_lookup(v_b, S_body);
          add_ref(l3);
          l2 = Has_Top_Level_Break(l3, env);
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l0 = S_true;
            release(l1);
            goto block_781_end;
          }
          move_forward(q1);
        }
        release(l1);
        l2 = ext_lookup(v_s, S_else);
        add_ref(l2);
        l1 = Has_Top_Level_Break(l2, env);
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = S_true;
          goto block_781_end;
        }
      }
      move_forward(q0);
    }
    l0 = S_false;
    goto block_781_end;
    block_781_end:;
    return l0;
  }
  
  
  Obj Sgn_Wf_Errors(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_t;
    Obj v_sgn;
    Obj v_type_vars;
    Obj v_in_errs;
    Obj v_out_errs;
  
    v_sgn = p0;
    Obj (*BF784)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD784 = env.C1_eval;
    env.n1_eval = cls_4;
    env.C1_eval = 0;
    Obj (*BF785)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD785 = env.C1_condition;
    env.n1_condition = cls_16;
    env.C1_condition = 0;
    v_type_vars = Select_Expr_Fn(v_sgn, env);
    env.n1_condition = BF785;
    env.C1_condition = BD785;
    env.n1_eval = BF784;
    env.C1_eval = BD784;
    l2 = ext_lookup(v_sgn, S_params);
    add_ref(l2);
    l1 = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_t = get_curr_obj(q0);
      Obj BK786 = env.n_type_vars_in_scope;
      env.n_type_vars_in_scope = v_type_vars;
      add_ref(env.n_type_vars_in_scope);
      l3 = Type_Wf_Errors(v_t, env);
      release(env.n_type_vars_in_scope);
      env.n_type_vars_in_scope = BK786;
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l2);
    v_in_errs = Seq_Union(l1, env);
    release(l1);
    Obj BK787 = env.n_type_vars_in_scope;
    env.n_type_vars_in_scope = v_type_vars;
    add_ref(env.n_type_vars_in_scope);
    l1 = ext_lookup(v_sgn, S_res_type);
    add_ref(l1);
    v_out_errs = Type_Wf_Errors(l1, env);
    release(l1);
    release(env.n_type_vars_in_scope);
    env.n_type_vars_in_scope = BK787;
    l0 = amp(v_in_errs, v_out_errs, env);
    release(v_type_vars);
    release(v_in_errs);
    release(v_out_errs);
    goto block_783_end;
    block_783_end:;
    return l0;
  }
  
  
  Obj Get_Type_Symbols_To_Instantiate(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj v_src;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_ts;
    Obj v_type_symbs;
    Obj v_new_type_symbs;
  
    v_obj = p0;
    v_src = v_obj;
    add_ref(v_src);
    v_type_symbs = empty_set;
    for ( ; ; )
    {
      Obj (*BF789)(Obj, const Obj *, Env &) = env.n1_eval;
      const Obj *BD789 = env.C1_eval;
      env.n1_eval = cls_10;
      env.C1_eval = 0;
      Obj (*BF790)(Obj, const Obj *, Env &) = env.n1_condition;
      const Obj *BD790 = env.C1_condition;
      env.n1_condition = cls_22;
      env.C1_condition = 0;
      l1 = Select_Expr_Fn(v_obj, env);
      env.n1_condition = BF790;
      env.C1_condition = BD790;
      env.n1_eval = BF789;
      env.C1_eval = BD789;
      v_new_type_symbs = minus(l1, v_type_symbs, env);
      release(l1);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_new_type_symbs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_type_symbs;
        add_ref(l0);
        release(v_src);
        release(v_type_symbs);
        release(v_new_type_symbs);
        goto block_788_end;
      }
      l1 = amp(v_type_symbs, v_new_type_symbs, env);
      release(v_type_symbs);
      v_type_symbs = l1;
      release(v_src);
      init(t0);
      get_set_iter(s0, v_new_type_symbs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_ts = l2;
        b1 = true;
        if (b1)
        {
          l2 = ext_lookup(v_ts, S_params);
          add_ref(l2);
          append(t0, l2);
        }
        move_forward(s0);
      }
      v_src = make_set(t0);
      release(v_new_type_symbs);
    }
    block_788_end:;
    return l0;
  }
  
  
  Obj Tdef_Errs(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_tdefs;
    Obj V0[2];
    Obj V1[2];
    Obj v_es;
    Obj v_td;
  
    v_tdefs = p0;
    init(t0);
    get_set_iter(s0, v_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_td = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        l3 = empty_set;
        Obj BK791 = env.n_type_vars_in_scope;
        env.n_type_vars_in_scope = l3;
        add_ref(env.n_type_vars_in_scope);
        l4 = ext_lookup(v_td, S_type);
        add_ref(l4);
        V0[i0] = Type_Wf_Errors(l4, env);
        release(l4);
        release(env.n_type_vars_in_scope);
        env.n_type_vars_in_scope = BK791;
        release(l3);
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        get_set_iter(s1, l2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_es = l3;
          b1 = true;
          if (b1)
          {
            l4 = empty_set;
            l3 = to_obj(are_eq(v_es, l4));
            release(l4);
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              i0 = 0;
              V0[i0] = S_errs;
              V1[i0] = v_es;
              add_ref(V1[i0]);
              i0 = i0 + 1;
              V0[i0] = S_type;
              V1[i0] = ext_lookup(v_td, S_name);
              add_ref(V1[i0]);
              i0 = i0 + 1;
              l4 = make_map(V0, V1, i0);
              l3 = make_tagged_obj(S_tdef_err, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
        release(l2);
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Undef_Type_Symbol_Errs(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    SetIter s0;
    Obj v_fndefs;
    Obj V2[1];
    Obj V1[2];
    Obj V0[3];
    Obj v_ts;
    Obj v_ublocks;
    Obj v_used_type_symbs;
    Obj v_def_type_symbs;
    Obj v_missing_type_symbs;
  
    v_fndefs = p0;
    v_ublocks = p1;
    i0 = 0;
    V0[i0] = v_fndefs;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_ublocks;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = Values(env.n_typedefs, env);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    v_used_type_symbs = Undef_Type_Symbol_Errs__All_Type_Symbols(l1, env);
    release(l1);
    v_def_type_symbs = Keys(env.n_typedefs, env);
    v_missing_type_symbs = minus(v_used_type_symbs, v_def_type_symbs, env);
    init(t0);
    get_set_iter(s0, v_missing_type_symbs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_ts = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_type;
        V1[i0] = v_ts;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_errs;
        i1 = 0;
        V2[i1] = Undef_Type_Symbol_Errs__Make_Err_Obj(v_ts, env);
        i1 = i1 + 1;
        V1[i0] = make_set(V2, i1);
        i0 = i0 + 1;
        l3 = make_map(V0, V1, i0);
        l2 = make_tagged_obj(S_tdef_err, l3);
        append(t0, l2);
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    release(v_used_type_symbs);
    release(v_def_type_symbs);
    release(v_missing_type_symbs);
    goto block_792_end;
    block_792_end:;
    return l0;
  }
  
  
  Obj brackets(Obj p0, Obj p1, Env &env)
  {
    Obj v_key;
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    Stream t0;
    MapIter m0;
    Obj v_idx;
    Obj v_seq;
    Obj v_map;
    Obj v_val;
    Obj v_s;
    Obj v_n;
  
    if (are_eq(p0, empty_map))
    {
      b1 = true;
      goto block_794_end;
    }
    if (!is_ne_map(p0))
    {
      b1 = false;
      goto block_794_end;
    }
    get_map_iter(m0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l1 = get_curr_key(m0);
      b1 = true;
      if (!b1)
      {
        goto block_794_end;
      }
      l1 = get_curr_value(m0);
      b1 = true;
      if (!b1)
      {
        goto block_794_end;
      }
      move_forward(m0);
    }
    b1 = true;
    block_794_end:;
    if (b1)
    {
      v_map = p0;
    }
    if (b1)
    {
      b1 = true;
      if (b1)
      {
        v_key = p1;
      }
      if (b1)
      {
        init(t0);
        get_map_iter(m0, v_map);
        for ( ; ; )
        {
          if (is_out_of_range(m0))
          {
            break;
          }
          l3 = get_curr_key(m0);
          b1 = are_eq(l3, v_key);
          if (b1)
          {
            l3 = get_curr_value(m0);
            v_val = l3;
            b1 = true;
            if (b1)
            {
              add_ref(v_val);
              append(t0, v_val);
            }
          }
          move_forward(m0);
        }
        l1 = make_set(t0);
        l0 = Only_Element(l1, env);
        release(l1);
        goto block_793_end;
      }
    }
    b1 = is_string(p0);
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      b1 = is_nat(p1);
      if (b1)
      {
        v_n = p1;
      }
      if (b1)
      {
        l1 = Untag(v_s, env);
        l0 = brackets(l1, v_n, env);
        release(l1);
        goto block_793_end;
      }
    }
    b1 = is_seq(p0);
    if (b1)
    {
      v_seq = p0;
    }
    if (b1)
    {
      b1 = is_nat(p1);
      if (b1)
      {
        v_idx = p1;
      }
      if (b1)
      {
        l0 = get_at(v_seq, get_int_val(v_idx));
        goto block_793_end;
      }
    }
    fail();
    block_793_end:;
    return l0;
  }
  
  
  Obj Syn_Fn_Def_To_Expr(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj V0[2];
    Obj V1[2];
    Obj v_fd;
    Obj v_p;
    Obj v_ps;
    Obj v_def_vars;
  
    v_fd = p0;
    v_def_vars = p1;
    l1 = ext_lookup(v_fd, S_params);
    add_ref(l1);
    v_ps = make_array(get_seq_len(l1), S_nil);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l2 = ext_lookup(v_p, S_var);
      add_ref(l2);
      set_at(v_ps, i0, l2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    l1 = ext_lookup(v_fd, S_expr);
    add_ref(l1);
    l3 = Set(v_ps, env);
    l2 = amp(v_def_vars, l3, env);
    release(l3);
    v_expr = Desugar_Expr(l1, l2, env);
    release(l2);
    release(l1);
    l2 = ext_lookup(v_fd, S_params);
    add_ref(l2);
    l3 = empty_seq;
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = S_expr;
      V1[i0] = v_expr;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_params;
      V1[i0] = v_ps;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l2 = make_map(V0, V1, i0);
      l1 = make_tagged_obj(S_cls_expr, l2);
      release(v_expr);
      v_expr = l1;
    }
    l0 = v_expr;
    add_ref(l0);
    release(v_expr);
    release(v_ps);
    goto block_795_end;
    block_795_end:;
    return l0;
  }
  
  
  Obj Transitive_Closure(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    Stream t0;
    Stream t1;
    MapIter m0;
    Obj v_map;
    Obj v_n;
    Obj v_rs;
    Obj v_all_starts;
    Obj v_all_refs;
    Obj v_missing;
    Obj v_closure;
    Obj v_new_closure;
  
    v_map = p0;
    v_all_starts = Keys(v_map, env);
    l2 = Values(v_map, env);
    v_all_refs = Union(l2, env);
    release(l2);
    v_missing = minus(v_all_refs, v_all_starts, env);
    l3 = empty_set;
    l2 = to_obj(are_eq(v_missing, l3));
    release(l3);
    if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
    {
      fail();
    }
    if (are_eq(l2, S_true))
    {
      l1 = S_true;
      release(v_all_starts);
      release(v_all_refs);
      release(v_missing);
      goto block_797_end;
    }
    print(v_missing);
    l1 = S_false;
    release(v_all_starts);
    release(v_all_refs);
    release(v_missing);
    goto block_797_end;
    block_797_end:;
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    v_closure = v_map;
    add_ref(v_closure);
    for ( ; ; )
    {
      init(t0);
      init(t1);
      get_map_iter(m0, v_closure);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l2 = get_curr_key(m0);
        v_n = l2;
        b1 = true;
        if (b1)
        {
          l2 = get_curr_value(m0);
          v_rs = l2;
          b1 = true;
          if (b1)
          {
            add_ref(v_n);
            append(t0, v_n);
            l2 = Transitive_Closure__Next_Step(v_rs, v_closure, env);
            append(t1, l2);
          }
        }
        move_forward(m0);
      }
      v_new_closure = make_map(t0, t1);
      l1 = to_obj(are_eq(v_new_closure, v_closure));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_closure;
        add_ref(l0);
        release(v_closure);
        release(v_new_closure);
        goto block_796_end;
      }
      release(v_closure);
      v_closure = v_new_closure;
      add_ref(v_closure);
      release(v_new_closure);
    }
    block_796_end:;
    return l0;
  }
  
  
  Obj Incompatibilities(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_t1;
    Obj v_t2;
    Obj V0[2];
    Obj v_types;
  
    v_types = p0;
    init(t0);
    get_set_iter(s0, v_types);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_t1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_types);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_t2 = l3;
          b1 = true;
          if (b1)
          {
            l3 = to_obj(are_eq(v_t1, v_t2));
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = Incompatibilities__Are_Syn_Compatible(v_t1, v_t2, env);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l3 = S_false;
              }
              else
              {
                l3 = S_true;
              }
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              i0 = 0;
              V0[i0] = v_t1;
              add_ref(V0[i0]);
              i0 = i0 + 1;
              V0[i0] = v_t2;
              add_ref(V0[i0]);
              i0 = i0 + 1;
              l3 = make_set(V0, i0);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    goto block_798_end;
    block_798_end:;
    return l0;
  }
  
  
  Obj Merge_And_Override(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_s;
    Obj v_os;
    Obj v_low_priority_sgns;
    Obj v_high_priority_sgns;
    Obj v_sgns;
  
    v_low_priority_sgns = p0;
    v_high_priority_sgns = p1;
    init(t0);
    get_set_iter(s0, v_low_priority_sgns);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = S_false;
        get_set_iter(s1, v_high_priority_sgns);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l4 = get_curr_obj(s1);
          v_os = l4;
          b1 = true;
          if (b1)
          {
            l5 = ext_lookup(v_s, S_name);
            add_ref(l5);
            l6 = ext_lookup(v_os, S_name);
            add_ref(l6);
            l4 = to_obj(are_eq(l5, l6));
            release(l6);
            release(l5);
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              l5 = ext_lookup(v_s, S_arity);
              add_ref(l5);
              l6 = ext_lookup(v_os, S_arity);
              add_ref(l6);
              l4 = to_obj(are_eq(l5, l6));
              release(l6);
              release(l5);
              if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              l2 = S_true;
              goto block_800_end;
            }
          }
          move_forward(s1);
        }
        block_800_end:;
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          add_ref(v_s);
          append(t0, v_s);
        }
      }
      move_forward(s0);
    }
    v_sgns = make_set(t0);
    l0 = amp(v_sgns, v_high_priority_sgns, env);
    release(v_sgns);
    goto block_799_end;
    block_799_end:;
    return l0;
  }
  
  
  Obj Par_Tdef_Errs(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj V0[2];
    Obj V1[2];
    Obj v_es;
    Obj v_td;
    Obj v_par_tdefs;
  
    v_par_tdefs = p0;
    init(t0);
    get_set_iter(s0, v_par_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_td = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        l4 = ext_lookup(v_td, S_params);
        add_ref(l4);
        l3 = Set(l4, env);
        release(l4);
        Obj BK801 = env.n_type_vars_in_scope;
        env.n_type_vars_in_scope = l3;
        add_ref(env.n_type_vars_in_scope);
        l4 = ext_lookup(v_td, S_type);
        add_ref(l4);
        V0[i0] = Type_Wf_Errors(l4, env);
        release(l4);
        release(env.n_type_vars_in_scope);
        env.n_type_vars_in_scope = BK801;
        release(l3);
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        get_set_iter(s1, l2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_es = l3;
          b1 = true;
          if (b1)
          {
            l4 = empty_set;
            l3 = to_obj(are_eq(v_es, l4));
            release(l4);
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              i0 = 0;
              V0[i0] = S_errs;
              V1[i0] = v_es;
              add_ref(V1[i0]);
              i0 = i0 + 1;
              V0[i0] = S_type;
              V1[i0] = ext_lookup(v_td, S_name);
              add_ref(V1[i0]);
              i0 = i0 + 1;
              l4 = make_map(V0, V1, i0);
              l3 = make_tagged_obj(S_tdef_err, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
        release(l2);
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Capitalize(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    int i1;
    SeqIter q0;
    Obj v_s;
    Obj v_i;
    Obj v_res;
    Obj v_first;
    Obj V0[1];
    Obj v_ch;
  
    v_s = p0;
    v_first = S_true;
    v_res = empty_seq;
    l1 = Untag(v_s, env);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_ch = get_curr_obj(q0);
      v_i = to_obj(i0);
      l2 = to_obj(are_eq(v_ch, to_obj(95)));
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        release(v_first);
        v_first = S_true;
      }
      else
      {
        l2 = greater_eq(v_ch, to_obj(97), env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = lower_eq(v_ch, to_obj(122), env);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = v_first;
          add_ref(l2);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          v_ch = minus(v_ch, to_obj(32), env);
          release(v_ch);
        }
        release(v_first);
        v_first = S_false;
      }
      i1 = 0;
      V0[i1] = v_ch;
      add_ref(V0[i1]);
      i1 = i1 + 1;
      l3 = make_seq(V0, i1);
      l2 = amp(v_res, l3, env);
      release(l3);
      release(v_res);
      v_res = l2;
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    l0 = String(v_res, env);
    release(v_res);
    release(v_first);
    goto block_802_end;
    block_802_end:;
    return l0;
  }
  
  
  Obj Arity_Is_Correct(Obj p0, Obj p1, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l1;
    int i0;
    Obj v_arity;
    Obj V0[14];
    Obj V1[14];
    Obj v_arity_map;
  
    v_name = p0;
    v_arity = p1;
    i0 = 0;
    V0[i0] = S_neg;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_counter;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_add;
    V1[i0] = to_obj(2);
    i0 = i0 + 1;
    V0[i0] = S_str;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_symb;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_len;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_at;
    V1[i0] = to_obj(2);
    i0 = i0 + 1;
    V0[i0] = S_rev;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_cat;
    V1[i0] = to_obj(2);
    i0 = i0 + 1;
    V0[i0] = S_slice;
    V1[i0] = to_obj(3);
    i0 = i0 + 1;
    V0[i0] = S_set;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_mset;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_isort;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    V0[i0] = S_list_to_seq;
    V1[i0] = to_obj(1);
    i0 = i0 + 1;
    v_arity_map = make_map(V0, V1, i0);
    l1 = brackets(v_arity_map, v_name, env);
    l0 = to_obj(are_eq(v_arity, l1));
    release(l1);
    release(v_arity_map);
    goto block_803_end;
    block_803_end:;
    return l0;
  }
  
  
  Obj Branch(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    Obj v_t;
    Obj V0[3];
    Obj V1[3];
    Obj v_f;
    Obj v_c;
  
    v_c = p0;
    v_t = p1;
    v_f = p2;
    l2 = empty_seq;
    l1 = to_obj(are_eq(v_t, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_false))
    {
      l2 = empty_seq;
      l1 = to_obj(are_eq(v_f, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = S_when_true;
      V1[i0] = v_t;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_cond;
      V1[i0] = v_c;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_when_false;
      V1[i0] = v_f;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_branch, l1);
    }
    else
    {
      i0 = 0;
      V0[i0] = S_when_false;
      V1[i0] = v_t;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_when_true;
      V1[i0] = v_f;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_cond;
      V1[i0] = Neg(v_c, env);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_branch, l1);
    }
    return l0;
  }
  
  
  Obj Untyped_Sgn(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Obj V0[3];
    Obj V1[3];
    Obj v_d;
    Obj v_fd;
  
    b1 = is_fndef(p0);
    if (b1)
    {
      v_fd = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_name;
      V1[i0] = ext_lookup(v_fd, S_name);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_arity;
      V1[i0] = Arity(v_fd, env);
      i0 = i0 + 1;
      l3 = ext_lookup(v_fd, S_named_params);
      add_ref(l3);
      l4 = empty_map;
      l2 = to_obj(are_eq(l3, l4));
      release(l4);
      release(l3);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        V0[i0] = S_named_params;
        l2 = ext_lookup(v_fd, S_named_params);
        add_ref(l2);
        V1[i0] = Untyped_Sgns(l2, env);
        release(l2);
        i0 = i0 + 1;
      }
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_untyped_sgn, l1);
      goto block_804_end;
    }
    b1 = is_synfndef(p0);
    if (b1)
    {
      goto block_805_end;
    }
    b1 = is_synsgn(p0);
    if (b1)
    {
      goto block_805_end;
    }
    block_805_end:;
    if (b1)
    {
      v_d = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_name;
      V1[i0] = ext_lookup(v_d, S_name);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_arity;
      V1[i0] = Arity(v_d, env);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_untyped_sgn, l1);
      goto block_804_end;
    }
    fail();
    block_804_end:;
    return l0;
  }
  
  
  Obj Syn_Can_Break_Loop(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    SeqIter q0;
    SeqIter q1;
    Obj v_s;
    Obj v_b;
    Obj v_stmt;
  
    v_stmt = p0;
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      l0 = S_true;
      goto block_806_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_807_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_807_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_807_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_branches);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l6 = ext_lookup(v_b, S_body);
        add_ref(l6);
        l5 = make_array(get_seq_len(l6), S_nil);
        get_seq_iter(q1, l6);
        i1 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q1))
          {
            break;
          }
          v_s = get_curr_obj(q1);
          l7 = Syn_Can_Break_Loop(v_s, env);
          set_at(l5, i1, l7);
          move_forward(q1);
          i1 = i1 + 1;
        }
        release(l6);
        l3 = At_Least_One(l5, env);
        release(l5);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = At_Least_One(l1, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_false))
      {
        l2 = ext_lookup(v_stmt, S_else);
        add_ref(l2);
        l1 = make_array(get_seq_len(l2), S_nil);
        get_seq_iter(q0, l2);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          l3 = Syn_Can_Break_Loop(v_s, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l2);
        l0 = At_Least_One(l1, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_806_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = S_false;
      goto block_806_end;
    }
    fail();
    block_806_end:;
    return l0;
  }
  
  
  Obj Undef_Type_Symbol_Errs__All_Type_Symbols(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_ts;
    Obj v_type_symbs;
    Obj v_new_type_symbs;
  
    v_obj = p0;
    Obj (*BF809)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD809 = env.C1_eval;
    env.n1_eval = cls_9;
    env.C1_eval = 0;
    Obj (*BF810)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD810 = env.C1_condition;
    env.n1_condition = cls_21;
    env.C1_condition = 0;
    v_type_symbs = Select_Expr_Fn(v_obj, env);
    env.n1_condition = BF810;
    env.C1_condition = BD810;
    env.n1_eval = BF809;
    env.C1_eval = BD809;
    for ( ; ; )
    {
      init(t0);
      get_set_iter(s0, v_type_symbs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        b1 = is_partypesymbol(l3);
        if (b1)
        {
          v_ts = l3;
        }
        if (b1)
        {
          l4 = ext_lookup(v_ts, S_params);
          add_ref(l4);
          l3 = Undef_Type_Symbol_Errs__All_Type_Symbols(l4, env);
          release(l4);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      v_new_type_symbs = Union(l1, env);
      release(l1);
      l1 = minus(v_new_type_symbs, v_type_symbs, env);
      release(v_new_type_symbs);
      v_new_type_symbs = l1;
      l2 = empty_set;
      l1 = to_obj(are_eq(v_new_type_symbs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_type_symbs;
        add_ref(l0);
        release(v_type_symbs);
        release(v_new_type_symbs);
        goto block_808_end;
      }
      l1 = amp(v_type_symbs, v_new_type_symbs, env);
      release(v_type_symbs);
      v_type_symbs = l1;
      release(v_new_type_symbs);
    }
    block_808_end:;
    return l0;
  }
  
  
  Obj Lower_Than(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_i;
    Obj v_str1;
    Obj v_str2;
    Obj v_len1;
    Obj v_len2;
    Obj v_ch1;
    Obj v_ch2;
    Obj v_a1;
    Obj v_a2;
  
    v_a1 = p0;
    v_a2 = p1;
    v_str1 = to_str(v_a1);
    v_str2 = to_str(v_a2);
    v_len1 = Length(v_str1, env);
    v_len2 = Length(v_str2, env);
    l1 = to_obj(are_eq(v_len1, v_len2));
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = minus(v_len2, v_len1, env);
      b1 = is_nznat(l1);
      l0 = to_obj(b1);
      release(l1);
      release(v_str1);
      release(v_str2);
      release(v_len1);
      release(v_len2);
      goto block_811_end;
    }
    l1 = Untag(v_str1, env);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_ch1 = get_curr_obj(q0);
      v_i = to_obj(i0);
      v_ch2 = brackets(v_str2, v_i, env);
      l2 = to_obj(are_eq(v_ch1, v_ch2));
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = minus(v_ch2, v_ch1, env);
        b1 = is_nznat(l2);
        l0 = to_obj(b1);
        release(l2);
        release(l1);
        release(v_str1);
        release(v_str2);
        release(v_len1);
        release(v_len2);
        release(v_ch2);
        goto block_811_end;
      }
      release(v_ch2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    fail();
    block_811_end:;
    return l0;
  }
  
  
  Obj Mk_And_Clause(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    int i1;
    int i2;
    int i3;
    SeqIter q0;
    Obj v_clause;
    Obj v_i;
    Obj V0[2];
    Obj V1[2];
    Obj v_vs;
    Obj v_c;
    Obj v_cs;
    Obj v_def_vars;
    Obj v_clauses;
    Obj v_rev_cs;
  
    v_clauses = p0;
    v_def_vars = p1;
    v_vs = v_def_vars;
    add_ref(v_vs);
    v_cs = empty_seq;
    get_seq_iter(q0, v_clauses);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_c = get_curr_obj(q0);
      i0 = 0;
      V0[i0] = Desugar_Clause(v_c, v_vs, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(v_cs, l2, env);
      release(l2);
      release(v_cs);
      v_cs = l1;
      l2 = Syn_New_Vars(v_c, env);
      l1 = amp(v_vs, l2, env);
      release(l2);
      release(v_vs);
      v_vs = l1;
      move_forward(q0);
    }
    v_rev_cs = Reverse(v_cs, env);
    v_clause = brackets(v_rev_cs, to_obj(0), env);
    l1 = to_obj(1);
    i2 = get_int_val(l1);
    l2 = Length(v_clauses, env);
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    i1 = get_int_val(l1);
    for ( ; ; )
    {
      if (i2 > i1)
      {
        break;
      }
      v_i = to_obj(i2);
      i3 = 0;
      V0[i3] = S_right;
      V1[i3] = v_clause;
      add_ref(V1[i3]);
      i3 = i3 + 1;
      V0[i3] = S_left;
      V1[i3] = brackets(v_rev_cs, v_i, env);
      i3 = i3 + 1;
      l3 = make_map(V0, V1, i3);
      l2 = make_tagged_obj(S_and_clause, l3);
      release(v_clause);
      v_clause = l2;
      i2 = i2 + 1;
    }
    l0 = v_clause;
    add_ref(l0);
    release(v_clause);
    release(v_vs);
    release(v_cs);
    release(v_rev_cs);
    goto block_812_end;
    block_812_end:;
    return l0;
  }
  
  
  Obj Partition(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj v_tag;
    Obj l0;
    Obj l1;
    bool b1;
    Obj v_a;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_814_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_814_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_atom(l1);
    if (b1)
    {
      v_a = l1;
    }
    block_814_end:;
    if (b1)
    {
      add_ref(v_a);
      l0 = make_tagged_obj(S_symbol, v_a);
      goto block_813_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_815_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_815_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_int(l1);
    block_815_end:;
    if (b1)
    {
      l0 = S_integers;
      goto block_813_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_816_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_816_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_set(l1);
    block_816_end:;
    if (b1)
    {
      l0 = S_sets;
      goto block_813_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_817_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_817_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_seq(l1);
    block_817_end:;
    if (b1)
    {
      l0 = S_sequences;
      goto block_813_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_818_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_818_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_map(l1);
    block_818_end:;
    if (b1)
    {
      l0 = S_maps;
      goto block_813_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_819_end;
    }
    l1 = get_tag(p0);
    v_tag = l1;
    b1 = true;
    if (!b1)
    {
      goto block_819_end;
    }
    l1 = get_inner_obj(p0);
    v_obj = l1;
    b1 = true;
    block_819_end:;
    if (b1)
    {
      add_ref(v_tag);
      l0 = make_tagged_obj(S_tagged_obj, v_tag);
      goto block_813_end;
    }
    fail();
    block_813_end:;
    return l0;
  }
  
  
  Obj To_Int(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_neg;
    Obj v_str;
    Obj v_code;
    Obj v_i;
    Obj v_res;
    Obj v_ch;
  
    v_str = p0;
    l2 = Length(v_str, env);
    l1 = greater(l2, to_obj(0), env);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    v_res = to_obj(0);
    v_neg = S_false;
    l1 = Untag(v_str, env);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_ch = get_curr_obj(q0);
      v_i = to_obj(i0);
      l3 = Ascii_Minus(env);
      l2 = to_obj(are_eq(v_ch, l3));
      release(l3);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = to_obj(are_eq(v_i, to_obj(0)));
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        release(v_neg);
        v_neg = S_true;
        l3 = Length(v_str, env);
        l2 = greater(l3, to_obj(1), env);
        release(l3);
        if (!are_eq(l2, S_true))
        {
          fail();
        }
      }
      else
      {
        v_code = minus(v_ch, to_obj(48), env);
        l2 = greater_eq(v_code, to_obj(0), env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = lower_eq(v_code, to_obj(9), env);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
        }
        if (!are_eq(l2, S_true))
        {
          fail();
        }
        l3 = star(to_obj(10), v_res, env);
        l2 = plus(l3, v_code, env);
        release(l3);
        release(v_res);
        v_res = l2;
        release(v_code);
      }
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    if (!(are_eq(v_neg, S_true) | are_eq(v_neg, S_false)))
    {
      fail();
    }
    if (are_eq(v_neg, S_true))
    {
      l0 = minus(v_res, env);
    }
    else
    {
      l0 = v_res;
      add_ref(l0);
    }
    release(v_neg);
    release(v_res);
    goto block_820_end;
    block_820_end:;
    return l0;
  }
  
  
  Obj Fndefs_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_fndefs;
    Obj v_fd;
    Obj v_fd1;
    Obj v_fd2;
    Obj v_def_vars;
    Obj v_dup_errs;
  
    v_fndefs = p0;
    v_def_vars = p1;
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_fndefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_fd2 = l3;
          b1 = true;
          if (b1)
          {
            l3 = to_obj(are_eq(v_fd1, v_fd2));
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l4 = Untyped_Sgn(v_fd1, env);
              l5 = Untyped_Sgn(v_fd2, env);
              l3 = to_obj(are_eq(l4, l5));
              release(l5);
              release(l4);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l4 = Untyped_Sgn(v_fd1, env);
              l3 = make_tagged_obj(S_dup_closure_def, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    v_dup_errs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_fd = l4;
      b1 = true;
      if (b1)
      {
        l4 = Fndef_Wf_Errors(v_fd, v_def_vars, env);
        append(t0, l4);
      }
      move_forward(s0);
    }
    l2 = make_set(t0);
    l1 = Union(l2, env);
    release(l2);
    l0 = amp(v_dup_errs, l1, env);
    release(l1);
    release(v_dup_errs);
    goto block_821_end;
    block_821_end:;
    return l0;
  }
  
  
  Obj Are_Compatible__Are_Comp(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_i;
    Obj v_fd1;
    Obj v_fd2;
    Obj v_p2;
    Obj v_p1;
  
    v_fd1 = p0;
    v_fd2 = p1;
    l2 = Arity(v_fd1, env);
    l3 = Arity(v_fd2, env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = ext_lookup(v_fd1, S_params);
    add_ref(l1);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p1 = get_curr_obj(q0);
      v_i = to_obj(i0);
      l2 = ext_lookup(v_fd2, S_params);
      add_ref(l2);
      v_p2 = brackets(l2, v_i, env);
      release(l2);
      l2 = ext_lookup(v_p1, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = ext_lookup(v_p2, S_type, b1);
        l2 = to_obj(b1);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = ext_lookup(v_p1, S_type);
        add_ref(l3);
        l4 = ext_lookup(v_p2, S_type);
        add_ref(l4);
        l2 = Are_Compatible(l3, l4, env);
        release(l4);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l0 = S_true;
        release(l1);
        release(v_p2);
        goto block_822_end;
      }
      release(v_p2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    l1 = ext_lookup(v_fd1, S_named_params);
    add_ref(l1);
    l2 = ext_lookup(v_fd2, S_named_params);
    add_ref(l2);
    l0 = to_obj(are_eq(l1, l2));
    release(l2);
    release(l1);
    goto block_822_end;
    block_822_end:;
    return l0;
  }
  
  
  Obj Get_Iter(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj v_s;
    Obj v_m;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
  
    b1 = is_mapitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      b1 = is_objexpr(p1);
      if (b1)
      {
        v_m = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_src;
        V1[i0] = v_m;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_var;
        V1[i0] = v_v;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_get_map_iter, l1);
        goto block_823_end;
      }
    }
    b1 = is_seqitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      b1 = is_objexpr(p1);
      if (b1)
      {
        v_s = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_src;
        V1[i0] = v_s;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_var;
        V1[i0] = v_v;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_get_seq_iter, l1);
        goto block_823_end;
      }
    }
    b1 = is_setitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      b1 = is_objexpr(p1);
      if (b1)
      {
        v_s = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_src;
        V1[i0] = v_s;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_var;
        V1[i0] = v_v;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_get_set_iter, l1);
        goto block_823_end;
      }
    }
    fail();
    block_823_end:;
    return l0;
  }
  
  
  Obj Is_Eq(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj v_e1;
    Obj v_e2;
    Obj V0[2];
    Obj V1[2];
  
    b1 = is_intexpr(p0);
    if (b1)
    {
      v_e1 = p0;
    }
    if (b1)
    {
      b1 = is_intexpr(p1);
      if (b1)
      {
        v_e2 = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_expr1;
        V1[i0] = v_e1;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_expr2;
        V1[i0] = v_e2;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_is_eq_int, l1);
        goto block_824_end;
      }
    }
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_e1 = p0;
    }
    if (b1)
    {
      b1 = is_boolexpr(p1);
      if (b1)
      {
        v_e2 = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_expr1;
        V1[i0] = v_e1;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_expr2;
        V1[i0] = v_e2;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_is_eq_bool, l1);
        goto block_824_end;
      }
    }
    b1 = is_objexpr(p0);
    if (b1)
    {
      v_e1 = p0;
    }
    if (b1)
    {
      b1 = is_objexpr(p1);
      if (b1)
      {
        v_e2 = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_expr1;
        V1[i0] = v_e1;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_expr2;
        V1[i0] = v_e2;
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_is_eq, l1);
        goto block_824_end;
      }
    }
    fail();
    block_824_end:;
    return l0;
  }
  
  
  Obj Gen_Eval_Code__Gen_Eval_Expr(Obj p0, Obj p1, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Obj v_ps;
  
    v_name = p0;
    v_ps = p1;
    b1 = are_eq(p0, S_str);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = To_Str(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_symb);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = To_Symb(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_neg);
    if (b1)
    {
      l3 = brackets(v_ps, to_obj(0), env);
      l2 = Get_Int_Val(l3, env);
      release(l3);
      l1 = Minus(l2, env);
      release(l2);
      l0 = To_Obj(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_add);
    if (b1)
    {
      l3 = brackets(v_ps, to_obj(0), env);
      l2 = Get_Int_Val(l3, env);
      release(l3);
      l4 = brackets(v_ps, to_obj(1), env);
      l3 = Get_Int_Val(l4, env);
      release(l4);
      l1 = Add(l2, l3, env);
      release(l3);
      release(l2);
      l0 = To_Obj(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_mult);
    if (b1)
    {
      l3 = brackets(v_ps, to_obj(0), env);
      l2 = Get_Int_Val(l3, env);
      release(l3);
      l4 = brackets(v_ps, to_obj(1), env);
      l3 = Get_Int_Val(l4, env);
      release(l4);
      l1 = Mult(l2, l3, env);
      release(l3);
      release(l2);
      l0 = To_Obj(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_counter);
    if (b1)
    {
      l1 = Unique_Int(env);
      l0 = To_Obj(l1, env);
      release(l1);
      goto block_825_end;
    }
    b1 = are_eq(p0, S_len);
    if (b1)
    {
      l2 = brackets(v_ps, to_obj(0), env);
      l1 = Get_Seq_Len(l2, env);
      release(l2);
      l0 = To_Obj(l1, env);
      release(l1);
      goto block_825_end;
    }
    fail();
    block_825_end:;
    return l0;
  }
  
  
  Obj To_Text__Match_Idxs(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    int i1;
    SeqIter q0;
    Obj v_str;
    Obj v_len;
    Obj v_i;
    Obj V0[1];
    Obj v_ch;
    Obj v_ms;
    Obj v_open_par_idxs;
    Obj v_mtc;
  
    v_str = p0;
    v_len = Length(v_str, env);
    v_ms = empty_seq;
    v_open_par_idxs = empty_seq;
    l2 = Untag(v_str, env);
    l1 = Reverse(l2, env);
    release(l2);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_ch = get_curr_obj(q0);
      v_i = to_obj(i0);
      l2 = To_Text__Is_Left_Par(v_ch, env);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = empty_seq;
        l2 = to_obj(are_eq(v_open_par_idxs, l3));
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!are_eq(l2, S_true))
        {
          fail();
        }
        v_mtc = brackets(v_open_par_idxs, to_obj(0), env);
        l2 = Tail(v_open_par_idxs, env);
        release(v_open_par_idxs);
        v_open_par_idxs = l2;
      }
      else
      {
        l2 = To_Text__Is_Right_Par(v_ch, env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          i1 = 0;
          l4 = minus(v_len, v_i, env);
          V0[i1] = minus(l4, to_obj(1), env);
          release(l4);
          i1 = i1 + 1;
          l3 = make_seq(V0, i1);
          l2 = join_seqs(l3, v_open_par_idxs);
          release(l3);
          release(v_open_par_idxs);
          v_open_par_idxs = l2;
        }
        v_mtc = S_nil;
      }
      i1 = 0;
      V0[i1] = v_mtc;
      add_ref(V0[i1]);
      i1 = i1 + 1;
      l3 = make_seq(V0, i1);
      l2 = join_seqs(l3, v_ms);
      release(l3);
      release(v_ms);
      v_ms = l2;
      release(v_mtc);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    l0 = v_ms;
    add_ref(l0);
    release(v_len);
    release(v_ms);
    release(v_open_par_idxs);
    goto block_826_end;
    block_826_end:;
    return l0;
  }
  
  
  Obj Gen_C_Decl(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    int i0;
    Obj V0[3];
    Obj v_pd;
    Obj v_par_list;
  
    v_pd = p0;
    l4 = Gen_C_Decl__Arity(v_pd, env);
    i0 = 0;
    V0[i0] = to_obj(79);
    i0 = i0 + 1;
    V0[i0] = to_obj(98);
    i0 = i0 + 1;
    V0[i0] = to_obj(106);
    i0 = i0 + 1;
    l6 = make_seq(V0, i0);
    l5 = make_tagged_obj(S_string, l6);
    l3 = Rep_Seq(l4, l5, env);
    release(l5);
    release(l4);
    l4 = Gen_C_Decl__Extra_Params(v_pd, env);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    i0 = 0;
    V0[i0] = to_obj(44);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = Intermix(l2, l3, env);
    release(l3);
    release(l2);
    v_par_list = Append(l1, env);
    release(l1);
    l4 = Gen_C_Decl__Ret_Type_Str(v_pd, env);
    l6 = ext_lookup(v_pd, S_name);
    add_ref(l6);
    l5 = To_C_Fn_Name(l6, env);
    release(l6);
    l3 = amp(l4, l5, env);
    release(l5);
    release(l4);
    i0 = 0;
    V0[i0] = to_obj(40);
    i0 = i0 + 1;
    l5 = make_seq(V0, i0);
    l4 = make_tagged_obj(S_string, l5);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    l1 = amp(l2, v_par_list, env);
    release(l2);
    i0 = 0;
    V0[i0] = to_obj(41);
    i0 = i0 + 1;
    V0[i0] = to_obj(59);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = make_tagged_obj(S_string, l3);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    release(v_par_list);
    goto block_827_end;
    block_827_end:;
    return l0;
  }
  
  
  Obj Syn_Fns_Are_Compatible(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_i;
    Obj v_fd1;
    Obj v_fd2;
    Obj v_p2;
    Obj v_p1;
  
    v_fd1 = p0;
    v_fd2 = p1;
    l2 = ext_lookup(v_fd1, S_name);
    add_ref(l2);
    l3 = ext_lookup(v_fd2, S_name);
    add_ref(l3);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l2 = Arity(v_fd1, env);
    l3 = Arity(v_fd2, env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = ext_lookup(v_fd1, S_params);
    add_ref(l1);
    get_seq_iter(q0, l1);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p1 = get_curr_obj(q0);
      v_i = to_obj(i0);
      l2 = ext_lookup(v_fd2, S_params);
      add_ref(l2);
      v_p2 = brackets(l2, v_i, env);
      release(l2);
      l2 = ext_lookup(v_p1, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = ext_lookup(v_p2, S_type, b1);
        l2 = to_obj(b1);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = ext_lookup(v_p1, S_type);
        add_ref(l3);
        l4 = ext_lookup(v_p2, S_type);
        add_ref(l4);
        l2 = Syn_Fns_Are_Compatible__Are_Part_Compatible(l3, l4, env);
        release(l4);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l0 = S_true;
        release(l1);
        release(v_p2);
        goto block_828_end;
      }
      release(v_p2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l1);
    l0 = S_false;
    goto block_828_end;
    block_828_end:;
    return l0;
  }
  
  
  Obj Replace_Expr_Fn(Obj p0, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj v_tag;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    Obj v_k;
    Obj v_v;
    Obj v_iobj;
  
    v_obj = p0;
    l1 = env.n1_condition(v_obj, env.C1_condition, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = env.n1_eval(v_obj, env.C1_eval, env);
      goto block_829_end;
    }
    b1 = is_atom(v_obj);
    if (b1)
    {
      l0 = v_obj;
      add_ref(l0);
      goto block_830_end;
    }
    b1 = is_int(v_obj);
    if (b1)
    {
      l0 = v_obj;
      add_ref(l0);
      goto block_830_end;
    }
    b1 = is_set(v_obj);
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_obj);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_x = l2;
        b1 = true;
        if (b1)
        {
          l2 = Replace_Expr_Fn(v_x, env);
          append(t0, l2);
        }
        move_forward(s0);
      }
      l0 = make_set(t0);
      goto block_830_end;
    }
    b1 = is_seq(v_obj);
    if (b1)
    {
      l0 = make_array(get_seq_len(v_obj), S_nil);
      get_seq_iter(q0, v_obj);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_x = get_curr_obj(q0);
        l2 = Replace_Expr_Fn(v_x, env);
        set_at(l0, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      goto block_830_end;
    }
    b1 = is_map(v_obj);
    if (b1)
    {
      init(t0);
      init(t1);
      get_map_iter(m0, v_obj);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l2 = get_curr_key(m0);
        v_k = l2;
        b1 = true;
        if (b1)
        {
          l2 = get_curr_value(m0);
          v_v = l2;
          b1 = true;
          if (b1)
          {
            l2 = Replace_Expr_Fn(v_k, env);
            append(t0, l2);
            l2 = Replace_Expr_Fn(v_v, env);
            append(t1, l2);
          }
        }
        move_forward(m0);
      }
      l0 = make_map(t0, t1);
      goto block_830_end;
    }
    if (!is_tag_obj(v_obj))
    {
      b1 = false;
      goto block_831_end;
    }
    l1 = get_tag(v_obj);
    v_tag = l1;
    b1 = true;
    if (!b1)
    {
      goto block_831_end;
    }
    l1 = get_inner_obj(v_obj);
    v_iobj = l1;
    b1 = true;
    block_831_end:;
    if (b1)
    {
      add_ref(v_tag);
      l1 = Replace_Expr_Fn(v_iobj, env);
      l0 = make_tagged_obj(v_tag, l1);
      goto block_830_end;
    }
    fail();
    block_830_end:;
    goto block_829_end;
    block_829_end:;
    return l0;
  }
  
  
  Obj Expr_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    SetIter s0;
    Obj v_e;
    Obj v_scalar_vars;
    Obj v_gvs;
  
    v_expr = p0;
    v_scalar_vars = p1;
    l1 = S_false;
    l2 = Ordinary_Subexprs(v_expr, env);
    get_set_iter(s0, l2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_e = l3;
      b1 = true;
      if (b1)
      {
        l3 = Expr_Is_Wf(v_e, v_scalar_vars, env);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = S_false;
        }
        else
        {
          l3 = S_true;
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l1 = S_true;
          goto block_833_end;
        }
      }
      move_forward(s0);
    }
    release(l2);
    block_833_end:;
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      goto block_832_end;
    }
    l1 = Gen_Vars(v_expr, env);
    v_gvs = amp(v_scalar_vars, l1, env);
    release(l1);
    l1 = S_false;
    l2 = Special_Subexprs(v_expr, env);
    get_set_iter(s0, l2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_e = l3;
      b1 = true;
      if (b1)
      {
        l3 = Expr_Is_Wf(v_e, v_gvs, env);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = S_false;
        }
        else
        {
          l3 = S_true;
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l1 = S_true;
          goto block_834_end;
        }
      }
      move_forward(s0);
    }
    release(l2);
    block_834_end:;
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      release(v_gvs);
      goto block_832_end;
    }
    l0 = Expr_Is_Wf__Rest_Is_Wf(v_expr, v_scalar_vars, env);
    release(v_gvs);
    goto block_832_end;
    block_832_end:;
    return l0;
  }
  
  
  Obj To_Text__Quote(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_str;
    Obj V0[2];
    Obj v_ch;
    Obj v_qr_str;
  
    v_str = p0;
    v_qr_str = empty_seq;
    l1 = Untag(v_str, env);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_ch = get_curr_obj(q0);
      l2 = to_obj(are_eq(v_ch, to_obj(10)));
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        i0 = 0;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(92);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = join_seqs(l3, v_qr_str);
        release(l3);
        release(v_qr_str);
        v_qr_str = l2;
      }
      else
      {
        l2 = to_obj(are_eq(v_ch, to_obj(92)));
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          i0 = 0;
          V0[i0] = to_obj(92);
          i0 = i0 + 1;
          V0[i0] = to_obj(92);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = join_seqs(l3, v_qr_str);
          release(l3);
          release(v_qr_str);
          v_qr_str = l2;
        }
        else
        {
          l2 = to_obj(are_eq(v_ch, to_obj(34)));
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            i0 = 0;
            V0[i0] = to_obj(34);
            i0 = i0 + 1;
            V0[i0] = to_obj(92);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = join_seqs(l3, v_qr_str);
            release(l3);
            release(v_qr_str);
            v_qr_str = l2;
          }
          else
          {
            i0 = 0;
            V0[i0] = v_ch;
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = join_seqs(l3, v_qr_str);
            release(l3);
            release(v_qr_str);
            v_qr_str = l2;
          }
        }
      }
      move_forward(q0);
    }
    release(l1);
    l1 = Reverse(v_qr_str, env);
    l0 = String(l1, env);
    release(l1);
    release(v_qr_str);
    goto block_835_end;
    block_835_end:;
    return l0;
  }
  
  
  Obj Syn_Fndef_To_Fndefs(Obj p0, Obj p1, Env &env)
  {
    Obj v_named_params;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj V0[2];
    Obj V1[2];
    Obj v_fndef;
    Obj v_fd;
    Obj v_lfd;
    Obj v_lfns;
    Obj v_main_fn;
    Obj v_loc_fns;
  
    v_fndef = p0;
    v_named_params = p1;
    init(t0);
    l2 = ext_lookup(v_fndef, S_local_fns);
    add_ref(l2);
    l1 = Set(l2, env);
    release(l2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_lfd = l2;
      b1 = true;
      if (b1)
      {
        l2 = Untyped_Sgn(v_lfd, env);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_lfns = make_set(t0);
    l1 = ext_lookup(v_fndef, S_name);
    add_ref(l1);
    l2 = ext_lookup(v_fndef, S_name);
    add_ref(l2);
    v_main_fn = Syn_Fndef_To_Fndefs__Mk_Fndef(v_fndef, l1, l2, v_named_params, v_lfns, env);
    release(l2);
    release(l1);
    init(t0);
    l2 = ext_lookup(v_fndef, S_local_fns);
    add_ref(l2);
    l1 = Set(l2, env);
    release(l2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_outer;
        V1[i0] = ext_lookup(v_fndef, S_name);
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_inner;
        V1[i0] = ext_lookup(v_fd, S_name);
        add_ref(V1[i0]);
        i0 = i0 + 1;
        l4 = make_map(V0, V1, i0);
        l3 = make_tagged_obj(S_nested_fn_symbol, l4);
        l4 = ext_lookup(v_fndef, S_name);
        add_ref(l4);
        l2 = Syn_Fndef_To_Fndefs__Mk_Fndef(v_fd, l3, l4, v_named_params, v_lfns, env);
        release(l4);
        release(l3);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_loc_fns = make_set(t0);
    i0 = 0;
    V0[i0] = v_main_fn;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_set(V0, i0);
    l0 = amp(l1, v_loc_fns, env);
    release(l1);
    release(v_lfns);
    release(v_main_fn);
    release(v_loc_fns);
    goto block_836_end;
    block_836_end:;
    return l0;
  }
  
  
  Obj Stmts_Wf_Errors(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    SeqIter q0;
    Obj v_errs;
    Obj v_s;
    Obj V0[1];
    Obj v_vs;
    Obj v_all_def_vars;
    Obj v_readonly_vars;
    Obj v_inside_loop;
    Obj v_reachable;
  
    v_stmts = p0;
    v_all_def_vars = p1;
    v_readonly_vars = p2;
    v_inside_loop = p3;
    v_vs = v_all_def_vars;
    add_ref(v_vs);
    v_reachable = S_true;
    v_errs = empty_set;
    get_seq_iter(q0, v_stmts);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l1 = v_reachable;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = S_unreachable_code;
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        l1 = amp(v_errs, l2, env);
        release(l2);
        release(v_errs);
        v_errs = l1;
      }
      l2 = Stmt_Wf_Errors(v_s, v_vs, v_readonly_vars, v_inside_loop, env);
      l1 = amp(v_errs, l2, env);
      release(l2);
      release(v_errs);
      v_errs = l1;
      l2 = Syn_New_Vars(v_s, env);
      l1 = amp(v_vs, l2, env);
      release(l2);
      release(v_vs);
      v_vs = l1;
      l1 = v_reachable;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = Syn_Is_Last_For_Sure(v_s, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      release(v_reachable);
      v_reachable = l1;
      move_forward(q0);
    }
    l0 = v_errs;
    add_ref(l0);
    release(v_errs);
    release(v_vs);
    release(v_reachable);
    goto block_837_end;
    block_837_end:;
    return l0;
  }
  
  
  Obj Fndef_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    Obj V0[1];
    Obj v_fndef;
    Obj v_p;
    Obj v_vs;
    Obj v_sgn_errs;
    Obj v_def_vars;
  
    v_fndef = p0;
    v_def_vars = p1;
    v_vs = v_def_vars;
    add_ref(v_vs);
    v_sgn_errs = empty_set;
    l1 = ext_lookup(v_fndef, S_params);
    add_ref(l1);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l2 = ext_lookup(v_p, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      if (!are_eq(l2, S_true))
      {
        fail();
      }
      l2 = ext_lookup(v_p, S_var, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = ext_lookup(v_p, S_var);
        add_ref(l3);
        l2 = In(l3, v_vs, env);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          i0 = 0;
          l4 = ext_lookup(v_p, S_var);
          add_ref(l4);
          V0[i0] = make_tagged_obj(S_var_redef, l4);
          i0 = i0 + 1;
          l3 = make_set(V0, i0);
          l2 = amp(v_sgn_errs, l3, env);
          release(l3);
          release(v_sgn_errs);
          v_sgn_errs = l2;
        }
        i0 = 0;
        V0[i0] = ext_lookup(v_p, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l3 = make_set(V0, i0);
        l2 = amp(v_vs, l3, env);
        release(l3);
        release(v_vs);
        v_vs = l2;
      }
      move_forward(q0);
    }
    release(l1);
    l2 = ext_lookup(v_fndef, S_expr);
    add_ref(l2);
    l1 = Expr_Wf_Errors(l2, v_vs, env);
    release(l2);
    l0 = amp(v_sgn_errs, l1, env);
    release(l1);
    release(v_vs);
    release(v_sgn_errs);
    goto block_838_end;
    block_838_end:;
    return l0;
  }
  
  
  Obj Max(Obj p0, Env &env)
  {
    Obj v_x;
    Obj v_max;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    Obj v_set;
    Obj v_seq;
    Obj v_t;
  
    if (!is_ne_set(p0))
    {
      b1 = false;
      goto block_840_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b1 = is_int(l1);
      if (!b1)
      {
        goto block_840_end;
      }
      move_forward(s0);
    }
    b1 = true;
    block_840_end:;
    if (b1)
    {
      v_set = p0;
    }
    if (b1)
    {
      v_seq = Rand_Sort(v_set, env);
      v_max = brackets(v_seq, to_obj(0), env);
      get_seq_iter(q0, v_seq);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_x = get_curr_obj(q0);
        l1 = greater(v_x, v_max, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          release(v_max);
          v_max = v_x;
          add_ref(v_max);
        }
        move_forward(q0);
      }
      l0 = v_max;
      add_ref(l0);
      release(v_max);
      release(v_seq);
      goto block_841_end;
      block_841_end:;
      goto block_839_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_842_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(S_int_range, l1);
    if (!b1)
    {
      goto block_842_end;
    }
    l1 = get_inner_obj(p0);
    if (!is_ne_map(l1))
    {
      b1 = false;
      goto block_843_end;
    }
    i0 = get_map_size(l1);
    if (!((i0 >= 2) & (i0 <= 2)))
    {
      b1 = false;
      goto block_843_end;
    }
    get_map_iter(m0, l1);
    if (is_out_of_range(m0))
    {
      b1 = false;
      goto block_843_end;
    }
    l2 = get_curr_key(m0);
    if (!are_eq(l2, S_min))
    {
      b1 = false;
      goto block_843_end;
    }
    l2 = get_curr_value(m0);
    b1 = is_int(l2);
    if (!b1)
    {
      goto block_843_end;
    }
    move_forward(m0);
    if (is_out_of_range(m0))
    {
      b1 = false;
      goto block_843_end;
    }
    l2 = get_curr_key(m0);
    if (!are_eq(l2, S_size))
    {
      b1 = false;
      goto block_843_end;
    }
    l2 = get_curr_value(m0);
    b1 = is_nznat(l2);
    if (!b1)
    {
      goto block_843_end;
    }
    move_forward(m0);
    b1 = is_out_of_range(m0);
    block_843_end:;
    block_842_end:;
    if (b1)
    {
      v_t = p0;
    }
    if (b1)
    {
      l2 = ext_lookup(v_t, S_min);
      add_ref(l2);
      l3 = ext_lookup(v_t, S_size);
      add_ref(l3);
      l1 = plus(l2, l3, env);
      release(l3);
      release(l2);
      l0 = minus(l1, to_obj(1), env);
      release(l1);
      goto block_839_end;
    }
    fail();
    block_839_end:;
    return l0;
  }
  
  
  Obj Mk_Cls_Call(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_name;
    Obj v_params;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    int i1;
    int i2;
    Obj v_cls_var;
    Obj V0[1];
    Obj V1[5];
    Obj V2[5];
  
    v_var = p0;
    v_cls_var = p1;
    v_params = p2;
    l3 = Length(v_params, env);
    l2 = To_Str(l3, env);
    release(l3);
    i0 = 0;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    l3 = Untag(v_cls_var, env);
    l2 = to_str(l3);
    release(l3);
    v_name = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    i1 = 0;
    V1[i1] = to_obj(101);
    i1 = i1 + 1;
    V1[i1] = to_obj(110);
    i1 = i1 + 1;
    V1[i1] = to_obj(118);
    i1 = i1 + 1;
    V1[i1] = to_obj(46);
    i1 = i1 + 1;
    V1[i1] = to_obj(110);
    i1 = i1 + 1;
    l3 = make_seq(V1, i1);
    l2 = make_tagged_obj(S_string, l3);
    l1 = amp(l2, v_name, env);
    release(l2);
    i1 = 0;
    i2 = 0;
    V2[i2] = to_obj(101);
    i2 = i2 + 1;
    V2[i2] = to_obj(110);
    i2 = i2 + 1;
    V2[i2] = to_obj(118);
    i2 = i2 + 1;
    V2[i2] = to_obj(46);
    i2 = i2 + 1;
    V2[i2] = to_obj(67);
    i2 = i2 + 1;
    l4 = make_seq(V2, i2);
    l3 = make_tagged_obj(S_string, l4);
    V1[i1] = amp(l3, v_name, env);
    release(l3);
    i1 = i1 + 1;
    i2 = 0;
    V2[i2] = to_obj(101);
    i2 = i2 + 1;
    V2[i2] = to_obj(110);
    i2 = i2 + 1;
    V2[i2] = to_obj(118);
    i2 = i2 + 1;
    l3 = make_seq(V2, i2);
    V1[i1] = make_tagged_obj(S_string, l3);
    i1 = i1 + 1;
    l2 = make_seq(V1, i1);
    V0[i0] = Mk_Gen_Call(v_var, l1, v_params, l2, env);
    release(l2);
    release(l1);
    i0 = i0 + 1;
    l0 = make_seq(V0, i0);
    release(v_name);
    goto block_844_end;
    block_844_end:;
    return l0;
  }
  
  
  Obj Can_Break_Loop(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_stmt;
  
    v_stmt = p0;
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      l0 = S_true;
      goto block_845_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_846_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_846_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_846_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Can_Break_Loop(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = At_Least_One(l1, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_false))
      {
        l2 = ext_lookup(v_stmt, S_else);
        add_ref(l2);
        l1 = make_array(get_seq_len(l2), S_nil);
        get_seq_iter(q0, l2);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          l3 = Can_Break_Loop(v_s, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l2);
        l0 = At_Least_One(l1, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_845_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_847_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_let_stmt);
    if (!b1)
    {
      goto block_847_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_847_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Can_Break_Loop(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = At_Least_One(l1, env);
      release(l1);
      goto block_845_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = S_false;
      goto block_845_end;
    }
    fail();
    block_845_end:;
    return l0;
  }
  
  
  Obj Cls_Vars(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    MapIter m0;
    Obj v_fn_def;
    Obj v_t;
    Obj v_v;
    Obj v_p;
  
    v_fn_def = p0;
    init(t0);
    init(t1);
    l3 = ext_lookup(v_fn_def, S_params);
    add_ref(l3);
    l2 = Set(l3, env);
    release(l3);
    get_set_iter(s0, l2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_p = l3;
      b1 = true;
      if (b1)
      {
        l3 = ext_lookup(v_p, S_var, b1);
        l3 = to_obj(b1);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = ext_lookup(v_p, S_type, b1);
          l3 = to_obj(b1);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l4 = ext_lookup(v_p, S_type);
            add_ref(l4);
            b1 = is_clstype(l4);
            l3 = to_obj(b1);
            release(l4);
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = ext_lookup(v_p, S_var);
          add_ref(l3);
          append(t0, l3);
          l5 = ext_lookup(v_p, S_type);
          add_ref(l5);
          l4 = ext_lookup(l5, S_in_types);
          add_ref(l4);
          release(l5);
          l3 = Length(l4, env);
          release(l4);
          append(t1, l3);
        }
      }
      move_forward(s0);
    }
    release(l2);
    l1 = make_map(t0, t1);
    init(t0);
    init(t1);
    l3 = ext_lookup(v_fn_def, S_named_params);
    add_ref(l3);
    get_map_iter(m0, l3);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l4 = get_curr_key(m0);
      v_v = l4;
      b1 = true;
      if (b1)
      {
        l4 = get_curr_value(m0);
        b1 = is_clstype(l4);
        if (b1)
        {
          v_t = l4;
        }
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
          l5 = ext_lookup(v_t, S_in_types);
          add_ref(l5);
          l4 = Length(l5, env);
          release(l5);
          append(t1, l4);
        }
      }
      move_forward(m0);
    }
    release(l3);
    l2 = make_map(t0, t1);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj Inst_Par_Type(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_symb;
    Obj v_arity;
    Obj v_d;
    Obj v_par_tdefs;
    Obj v_par_tdef;
  
    v_symb = p0;
    v_par_tdefs = p1;
    l1 = ext_lookup(v_symb, S_params);
    add_ref(l1);
    v_arity = Length(l1, env);
    release(l1);
    init(t0);
    get_set_iter(s0, v_par_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_d = l3;
      b1 = true;
      if (b1)
      {
        l4 = ext_lookup(v_d, S_name);
        add_ref(l4);
        l5 = ext_lookup(v_symb, S_symbol);
        add_ref(l5);
        l3 = to_obj(are_eq(l4, l5));
        release(l5);
        release(l4);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l5 = ext_lookup(v_d, S_params);
          add_ref(l5);
          l4 = Length(l5, env);
          release(l5);
          l3 = to_obj(are_eq(l4, v_arity));
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          add_ref(v_d);
          append(t0, v_d);
        }
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    v_par_tdef = Only_Element(l1, env);
    release(l1);
    Obj (*BF849)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD849 = env.C1_condition;
    env.n1_condition = cls_25;
    env.C1_condition = 0;
    Obj (*BF850)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD850 = env.C1_eval;
    Obj ND850[2];
    ND850[0] = v_symb;
    add_ref(ND850[0]);
    ND850[1] = v_par_tdef;
    add_ref(ND850[1]);
    env.n1_eval = cls_38;
    env.C1_eval = ND850;
    l1 = ext_lookup(v_par_tdef, S_type);
    add_ref(l1);
    l0 = Replace_Expr_Fn(l1, env);
    release(l1);
    env.n1_eval = BF850;
    env.C1_eval = BD850;
    release(ND850[0]);
    release(ND850[1]);
    env.n1_condition = BF849;
    env.C1_condition = BD849;
    release(v_arity);
    release(v_par_tdef);
    goto block_848_end;
    block_848_end:;
    return l0;
  }
  
  
  Obj Inst_Tdef_Errs(Obj p0, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s1;
    MapIter m0;
    Obj v_t;
    Obj v_s;
    Obj V0[2];
    Obj V1[2];
    Obj v_es;
    Obj v_inst_tdefs;
  
    v_inst_tdefs = p0;
    init(t0);
    get_map_iter(m0, v_inst_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_t = l2;
        b1 = true;
        if (b1)
        {
          i0 = 0;
          Obj (*BF851)(Obj, const Obj *, Env &) = env.n1_eval;
          const Obj *BD851 = env.C1_eval;
          env.n1_eval = cls_7;
          env.C1_eval = 0;
          Obj (*BF852)(Obj, const Obj *, Env &) = env.n1_condition;
          const Obj *BD852 = env.C1_condition;
          env.n1_condition = cls_19;
          env.C1_condition = 0;
          l3 = Select_Expr_Fn(v_s, env);
          env.n1_condition = BF852;
          env.C1_condition = BD852;
          env.n1_eval = BF851;
          env.C1_eval = BD851;
          Obj BK853 = env.n_type_vars_in_scope;
          env.n_type_vars_in_scope = l3;
          add_ref(env.n_type_vars_in_scope);
          V0[i0] = Type_Wf_Errors(v_t, env);
          release(env.n_type_vars_in_scope);
          env.n_type_vars_in_scope = BK853;
          release(l3);
          i0 = i0 + 1;
          l2 = make_set(V0, i0);
          get_set_iter(s1, l2);
          for ( ; ; )
          {
            if (is_out_of_range(s1))
            {
              break;
            }
            l3 = get_curr_obj(s1);
            v_es = l3;
            b1 = true;
            if (b1)
            {
              l4 = empty_set;
              l3 = to_obj(are_eq(v_es, l4));
              release(l4);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l3 = S_false;
              }
              else
              {
                l3 = S_true;
              }
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                i0 = 0;
                V0[i0] = S_type;
                V1[i0] = v_s;
                add_ref(V1[i0]);
                i0 = i0 + 1;
                V0[i0] = S_errs;
                V1[i0] = v_es;
                add_ref(V1[i0]);
                i0 = i0 + 1;
                l4 = make_map(V0, V1, i0);
                l3 = make_tagged_obj(S_tdef_err, l4);
                append(t0, l3);
              }
            }
            move_forward(s1);
          }
          release(l2);
        }
      }
      move_forward(m0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj Fn_Def_Errs(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    Obj l8;
    SetIter s0;
    SetIter s1;
    SeqIter q0;
    Obj v_fndefs;
    Obj V0[3];
    Obj V1[3];
    Obj v_es;
    Obj v_fd;
    Obj v_p;
    Obj v_global_fns;
    Obj v_impl_pars;
  
    v_fndefs = p0;
    v_global_fns = p1;
    v_impl_pars = p2;
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        V0[i0] = Fndef_Wf_Errors(v_fd, v_global_fns, v_impl_pars, env);
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        get_set_iter(s1, l2);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_es = l3;
          b1 = true;
          if (b1)
          {
            l4 = empty_set;
            l3 = to_obj(are_eq(v_es, l4));
            release(l4);
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              i0 = 0;
              V0[i0] = S_errs;
              V1[i0] = v_es;
              add_ref(V1[i0]);
              i0 = i0 + 1;
              V0[i0] = S_name;
              V1[i0] = ext_lookup(v_fd, S_name);
              add_ref(V1[i0]);
              i0 = i0 + 1;
              V0[i0] = S_params;
              l5 = ext_lookup(v_fd, S_params);
              add_ref(l5);
              V1[i0] = make_array(get_seq_len(l5), S_nil);
              get_seq_iter(q0, l5);
              i1 = 0;
              for ( ; ; )
              {
                if (is_out_of_range(q0))
                {
                  break;
                }
                v_p = get_curr_obj(q0);
                l8 = ext_lookup(v_p, S_type, b1);
                l8 = to_obj(b1);
                if (!(are_eq(l8, S_true) | are_eq(l8, S_false)))
                {
                  fail();
                }
                if (are_eq(l8, S_true))
                {
                  l6 = ext_lookup(v_p, S_type);
                  add_ref(l6);
                }
                else
                {
                  l6 = S_nil;
                }
                set_at(V1[i0], i1, l6);
                move_forward(q0);
                i1 = i1 + 1;
              }
              release(l5);
              i0 = i0 + 1;
              l4 = make_map(V0, V1, i0);
              l3 = make_tagged_obj(S_fndef_err, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
        release(l2);
      }
      move_forward(s0);
    }
    l0 = make_set(t0);
    return l0;
  }
  
  
  Obj To_Text__To_Txt(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Stream t0;
    SeqIter q0;
    MapIter m0;
    Obj v_map;
    Obj v_e;
    Obj v_k;
    Obj v_v;
    Obj V0[2];
    Obj V1[2];
    Obj v_key_val_sep;
    Obj v_es;
    Obj v_strs;
  
    v_map = p0;
    v_key_val_sep = p1;
    init(t0);
    get_map_iter(m0, v_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l3 = get_curr_key(m0);
      v_k = l3;
      b1 = true;
      if (b1)
      {
        l3 = get_curr_value(m0);
        v_v = l3;
        b1 = true;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_value;
          V1[i0] = v_v;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_key;
          V1[i0] = v_k;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l3 = make_map(V0, V1, i0);
          append(t0, l3);
        }
      }
      move_forward(m0);
    }
    l1 = make_set(t0);
    v_es = Rand_Sort(l1, env);
    release(l1);
    v_strs = make_array(get_seq_len(v_es), S_nil);
    get_seq_iter(q0, v_es);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_e = get_curr_obj(q0);
      l6 = ext_lookup(v_e, S_key);
      add_ref(l6);
      l5 = To_Text__To_Txt(l6, env);
      release(l6);
      l4 = amp(l5, v_key_val_sep, env);
      release(l5);
      l6 = ext_lookup(v_e, S_value);
      add_ref(l6);
      l5 = To_Text__To_Txt(l6, env);
      release(l6);
      l2 = amp(l4, l5, env);
      release(l5);
      release(l4);
      set_at(v_strs, i0, l2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    i0 = 0;
    V0[i0] = to_obj(40);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = make_tagged_obj(S_string, l3);
    i0 = 0;
    V0[i0] = to_obj(44);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l6 = make_seq(V0, i0);
    l5 = make_tagged_obj(S_string, l6);
    l4 = Intermix(v_strs, l5, env);
    release(l5);
    l3 = Append(l4, env);
    release(l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    i0 = 0;
    V0[i0] = to_obj(41);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = make_tagged_obj(S_string, l3);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    release(v_es);
    release(v_strs);
    goto block_854_end;
    block_854_end:;
    return l0;
  }
  
  
  Obj Select_Expr_Fn(Obj p0, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj v_tag;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    MapIter m0;
    Obj v_k;
    Obj v_v;
    Obj V0[1];
    Obj v_iobj;
  
    v_obj = p0;
    l1 = env.n1_condition(v_obj, env.C1_condition, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = env.n1_eval(v_obj, env.C1_eval, env);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_855_end;
    }
    b1 = is_atom(v_obj);
    if (b1)
    {
      l0 = empty_set;
      goto block_856_end;
    }
    b1 = is_int(v_obj);
    if (b1)
    {
      l0 = empty_set;
      goto block_856_end;
    }
    b1 = is_set(v_obj);
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_obj);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_x = l3;
        b1 = true;
        if (b1)
        {
          l3 = Select_Expr_Fn(v_x, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_856_end;
    }
    b1 = is_seq(v_obj);
    if (b1)
    {
      init(t0);
      l2 = Set(v_obj, env);
      get_set_iter(s0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_x = l3;
        b1 = true;
        if (b1)
        {
          l3 = Select_Expr_Fn(v_x, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      release(l2);
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_856_end;
    }
    b1 = is_map(v_obj);
    if (b1)
    {
      init(t0);
      get_map_iter(m0, v_obj);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l3 = get_curr_key(m0);
        v_k = l3;
        b1 = true;
        if (b1)
        {
          l3 = get_curr_value(m0);
          v_v = l3;
          b1 = true;
          if (b1)
          {
            l4 = Select_Expr_Fn(v_k, env);
            l5 = Select_Expr_Fn(v_v, env);
            l3 = amp(l4, l5, env);
            release(l5);
            release(l4);
            append(t0, l3);
          }
        }
        move_forward(m0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_856_end;
    }
    if (!is_tag_obj(v_obj))
    {
      b1 = false;
      goto block_857_end;
    }
    l1 = get_tag(v_obj);
    v_tag = l1;
    b1 = true;
    if (!b1)
    {
      goto block_857_end;
    }
    l1 = get_inner_obj(v_obj);
    v_iobj = l1;
    b1 = true;
    block_857_end:;
    if (b1)
    {
      l0 = Select_Expr_Fn(v_iobj, env);
      goto block_856_end;
    }
    fail();
    block_856_end:;
    goto block_855_end;
    block_855_end:;
    return l0;
  }
  
  
  Obj Gen_Code(Obj p0, Obj p1, Obj p2, Obj p3, Obj p4, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l6;
    int i0;
    SeqIter q0;
    Obj v_code;
    Obj v_res_var;
    Obj v_all_rel_vars;
    Obj v_break_vars;
    Obj v_surv_vars;
    Obj v_s;
    Obj v_v;
    Obj v_vs;
  
    v_stmts = p0;
    v_res_var = p1;
    v_all_rel_vars = p2;
    v_break_vars = p3;
    v_surv_vars = p4;
    l1 = Subset(v_break_vars, v_all_rel_vars, env);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = In(v_res_var, v_all_rel_vars, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = Disjoint(v_all_rel_vars, v_surv_vars, env);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    v_vs = empty_set;
    v_code = empty_seq;
    get_seq_iter(q0, v_stmts);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l3 = amp(v_all_rel_vars, v_vs, env);
      l4 = amp(v_break_vars, v_vs, env);
      l2 = Gen_Code(v_s, v_res_var, l3, l4, env);
      release(l4);
      release(l3);
      l1 = amp(v_code, l2, env);
      release(l2);
      release(v_code);
      v_code = l1;
      l3 = New_Vars(v_s, env);
      l2 = minus(l3, v_all_rel_vars, env);
      release(l3);
      l1 = amp(v_vs, l2, env);
      release(l2);
      release(v_vs);
      v_vs = l1;
      move_forward(q0);
    }
    l1 = Can_Fall_Through(v_stmts, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l6 = minus(v_vs, v_surv_vars, env);
      l3 = Rand_Sort(l6, env);
      release(l6);
      l2 = make_array(get_seq_len(l3), S_nil);
      get_seq_iter(q0, l3);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        l4 = Release(v_v, env);
        set_at(l2, i0, l4);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l3);
      l1 = amp(v_code, l2, env);
      release(l2);
      release(v_code);
      v_code = l1;
    }
    l0 = v_code;
    add_ref(l0);
    release(v_code);
    release(v_vs);
    goto block_858_end;
    block_858_end:;
    return l0;
  }
  
  
  Obj Gen_Eval_Code__Gen_Eval_Instr(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_name;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Obj v_res_var;
    Obj v_ps;
  
    v_name = p0;
    v_ps = p1;
    v_res_var = p2;
    b1 = are_eq(p0, S_slice);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l3 = brackets(v_ps, to_obj(1), env);
      l2 = Get_Int_Val(l3, env);
      release(l3);
      l4 = brackets(v_ps, to_obj(2), env);
      l3 = Get_Int_Val(l4, env);
      release(l4);
      l0 = Get_Seq_Slice(v_res_var, l1, l2, l3, env);
      release(l3);
      release(l2);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_cat);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l2 = brackets(v_ps, to_obj(1), env);
      l0 = Join_Seqs(v_res_var, l1, l2, env);
      release(l2);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_rev);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = Rev_Seq(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_set);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = Seq_To_Set(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_at);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l3 = brackets(v_ps, to_obj(1), env);
      l2 = Get_Int_Val(l3, env);
      release(l3);
      l0 = Get_At(v_res_var, l1, l2, env);
      release(l2);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_mset);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = Seq_To_Mset(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_isort);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = Internal_Sort(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    b1 = are_eq(p0, S_list_to_seq);
    if (b1)
    {
      l1 = brackets(v_ps, to_obj(0), env);
      l0 = List_To_Seq(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    b1 = true;
    if (b1)
    {
      l1 = Gen_Eval_Code__Gen_Eval_Expr(v_name, v_ps, env);
      l0 = Set_Var(v_res_var, l1, env);
      release(l1);
      goto block_859_end;
    }
    fail();
    block_859_end:;
    return l0;
  }
  
  
  Obj Is_Last_For_Sure(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_ss;
    Obj v_stmt;
  
    v_stmt = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_861_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_861_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_861_end:;
    if (b1)
    {
      l0 = S_true;
      goto block_860_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      l0 = S_true;
      goto block_860_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_862_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_862_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_862_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Is_Last_For_Sure(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = At_Least_One(l1, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l2 = ext_lookup(v_stmt, S_else);
        add_ref(l2);
        l1 = make_array(get_seq_len(l2), S_nil);
        get_seq_iter(q0, l2);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          l3 = Is_Last_For_Sure(v_s, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l2);
        l0 = At_Least_One(l1, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_860_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_863_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_loop_stmt);
    if (!b1)
    {
      goto block_863_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_863_end:;
    if (b1)
    {
      l1 = make_array(get_seq_len(v_ss), S_nil);
      get_seq_iter(q0, v_ss);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Can_Break_Loop(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l0 = None(l1, env);
      release(l1);
      goto block_860_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = S_false;
      goto block_860_end;
    }
    fail();
    block_860_end:;
    return l0;
  }
  
  
  Obj Merge_Partitions(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l3;
    Obj l4;
    bool b1;
    Stream t0;
    SetIter s0;
    Obj v_p;
    Obj v_ps;
    Obj v_part_sets;
  
    v_part_sets = p0;
    v_ps = Union(v_part_sets, env);
    l1 = In(S_symbols, v_ps, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      init(t0);
      get_set_iter(s0, v_ps);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_p = l3;
        b1 = true;
        if (b1)
        {
          if (!is_tag_obj(v_p))
          {
            b1 = false;
            goto block_865_end;
          }
          l4 = get_tag(v_p);
          b1 = are_eq(S_symbol, l4);
          if (!b1)
          {
            goto block_865_end;
          }
          l4 = get_inner_obj(v_p);
          b1 = is_atom(l4);
          block_865_end:;
          l3 = to_obj(b1);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            add_ref(v_p);
            append(t0, v_p);
          }
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      release(v_ps);
      v_ps = l1;
    }
    l1 = In(S_tagged_objs, v_ps, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      init(t0);
      get_set_iter(s0, v_ps);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_p = l3;
        b1 = true;
        if (b1)
        {
          if (!is_tag_obj(v_p))
          {
            b1 = false;
            goto block_866_end;
          }
          l4 = get_tag(v_p);
          b1 = are_eq(S_tagged_obj, l4);
          if (!b1)
          {
            goto block_866_end;
          }
          l4 = get_inner_obj(v_p);
          b1 = is_atom(l4);
          block_866_end:;
          l3 = to_obj(b1);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            add_ref(v_p);
            append(t0, v_p);
          }
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      release(v_ps);
      v_ps = l1;
    }
    l0 = v_ps;
    add_ref(l0);
    release(v_ps);
    goto block_864_end;
    block_864_end:;
    return l0;
  }
  
  
  Obj Block_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    Obj v_s;
    Obj V0[1];
    Obj V1[1];
    Obj V2[1];
    Obj v_global_fns;
    Obj v_ublock;
    Obj v_block_errs;
    Obj v_err;
    Obj v_req_fns;
    Obj v_all_fns;
  
    v_ublock = p0;
    v_global_fns = p1;
    l2 = ext_lookup(v_ublock, S_signatures);
    add_ref(l2);
    l1 = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      l3 = Sgn_Wf_Errors(v_s, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l2);
    v_block_errs = Seq_Union(l1, env);
    release(l1);
    l2 = empty_set;
    l1 = to_obj(are_eq(v_block_errs, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      v_err = empty_set;
    }
    else
    {
      i0 = 0;
      i1 = 0;
      V1[i1] = S_errs;
      V2[i1] = v_block_errs;
      add_ref(V2[i1]);
      i1 = i1 + 1;
      l1 = make_map(V1, V2, i1);
      V0[i0] = make_tagged_obj(S_ublock_err, l1);
      i0 = i0 + 1;
      v_err = make_set(V0, i0);
    }
    init(t0);
    l2 = ext_lookup(v_ublock, S_signatures);
    add_ref(l2);
    l1 = Set(l2, env);
    release(l2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = Untyped_Sgn(v_s, env);
        append(t0, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_req_fns = make_set(t0);
    init(t0);
    l3 = ext_lookup(v_ublock, S_signatures);
    add_ref(l3);
    l2 = Set(l3, env);
    release(l3);
    get_set_iter(s0, l2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_s = l3;
      b1 = true;
      if (b1)
      {
        l3 = Untyped_Sgn(v_s, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    release(l2);
    l1 = make_set(t0);
    v_all_fns = Merge_And_Override(v_global_fns, l1, env);
    release(l1);
    l3 = ext_lookup(v_ublock, S_fn_defs);
    add_ref(l3);
    l2 = Set(l3, env);
    release(l3);
    l1 = Fn_Def_Errs(l2, v_all_fns, v_req_fns, env);
    release(l2);
    l0 = amp(v_err, l1, env);
    release(l1);
    release(v_block_errs);
    release(v_err);
    release(v_req_fns);
    release(v_all_fns);
    goto block_867_end;
    block_867_end:;
    return l0;
  }
  
  
  Obj Syn_Fndef_To_Fndefs__Mk_Fndef(Obj p0, Obj p1, Obj p2, Obj p3, Obj p4, Env &env)
  {
    Obj v_named_params;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj v_outer_fn;
    Obj V0[5];
    Obj V1[5];
    Obj v_fndef;
    Obj v_p;
    Obj v_fn_name;
    Obj v_lfns;
    Obj v_np;
  
    v_fndef = p0;
    v_fn_name = p1;
    v_outer_fn = p2;
    v_named_params = p3;
    v_lfns = p4;
    i0 = 0;
    V0[i0] = S_params;
    V1[i0] = ext_lookup(v_fndef, S_params);
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_name;
    V1[i0] = v_fn_name;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l2 = ext_lookup(v_fndef, S_res_type, b1);
    l2 = to_obj(b1);
    if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
    {
      fail();
    }
    if (are_eq(l2, S_true))
    {
      V0[i0] = S_res_type;
      V1[i0] = ext_lookup(v_fndef, S_res_type);
      add_ref(V1[i0]);
      i0 = i0 + 1;
    }
    V0[i0] = S_named_params;
    V1[i0] = Syn_Fndef_To_Fndefs__Syn_Sgns_To_Named_Params(v_named_params, env);
    i0 = i0 + 1;
    V0[i0] = S_expr;
    Obj BK868 = env.n_local_fns;
    env.n_local_fns = v_lfns;
    add_ref(env.n_local_fns);
    Obj BK869 = env.n_curr_outer_fn;
    env.n_curr_outer_fn = v_outer_fn;
    add_ref(env.n_curr_outer_fn);
    init(t0);
    get_set_iter(s0, v_named_params);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_np = l4;
      b1 = true;
      if (b1)
      {
        l6 = ext_lookup(v_np, S_name);
        add_ref(l6);
        l5 = Untag(l6, env);
        release(l6);
        l4 = make_tagged_obj(S_named_par, l5);
        append(t0, l4);
      }
      move_forward(s0);
    }
    l2 = make_set(t0);
    Obj BK870 = env.n_named_params;
    env.n_named_params = l2;
    add_ref(env.n_named_params);
    l3 = ext_lookup(v_fndef, S_expr);
    add_ref(l3);
    init(t0);
    l6 = ext_lookup(v_fndef, S_params);
    add_ref(l6);
    l5 = Set(l6, env);
    release(l6);
    get_set_iter(s0, l5);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l6 = get_curr_obj(s0);
      v_p = l6;
      b1 = true;
      if (b1)
      {
        l6 = ext_lookup(v_p, S_var, b1);
        l6 = to_obj(b1);
        if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
        {
          fail();
        }
        if (are_eq(l6, S_true))
        {
          l6 = ext_lookup(v_p, S_var);
          add_ref(l6);
          append(t0, l6);
        }
      }
      move_forward(s0);
    }
    release(l5);
    l4 = make_set(t0);
    V1[i0] = Desugar_Expr(l3, l4, env);
    release(l4);
    release(l3);
    release(env.n_named_params);
    env.n_named_params = BK870;
    release(l2);
    release(env.n_curr_outer_fn);
    env.n_curr_outer_fn = BK869;
    release(env.n_local_fns);
    env.n_local_fns = BK868;
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_fn_def, l1);
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Objs(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_offset;
    Obj v_objs;
    Obj v_head;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    Obj v_len;
    Obj v_res;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
    Obj v_os;
    Obj v_eof;
  
    v_tokens = p0;
    v_offset = p1;
    v_eof = p2;
    v_len = Length(v_tokens, env);
    v_os = v_offset;
    add_ref(v_os);
    v_objs = empty_seq;
    for ( ; ; )
    {
      l2 = At(v_tokens, v_os, S_nil, env);
      l1 = to_obj(are_eq(l2, v_eof));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      v_res = Parse_Obj__Parse_Obj(v_tokens, v_os, env);
      b1 = is_parseerror(v_res);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_res;
        add_ref(l0);
        release(v_objs);
        release(v_len);
        release(v_res);
        release(v_os);
        goto block_871_end;
      }
      i0 = 0;
      V0[i0] = ext_lookup(v_res, S_obj);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(v_objs, l2, env);
      release(l2);
      release(v_objs);
      v_objs = l1;
      release(v_os);
      v_os = ext_lookup(v_res, S_offset);
      add_ref(v_os);
      v_head = At(v_tokens, v_os, S_nil, env);
      l1 = to_obj(are_eq(v_head, S_comma));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = plus(v_os, to_obj(1), env);
        release(v_os);
        v_os = l1;
      }
      else
      {
        l1 = to_obj(are_eq(v_head, v_eof));
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = Parse_Obj__Error(v_os, env);
          release(v_objs);
          release(v_head);
          release(v_len);
          release(v_res);
          release(v_os);
          goto block_871_end;
        }
      }
      release(v_head);
      release(v_res);
    }
    i0 = 0;
    V0[i0] = S_objs;
    V1[i0] = v_objs;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_offset;
    V1[i0] = plus(v_os, to_obj(1), env);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_objs);
    release(v_len);
    release(v_os);
    goto block_871_end;
    block_871_end:;
    return l0;
  }
  
  
  Obj Gen_Vars(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj V0[2];
  
    v_expr = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_873_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_873_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_873_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = New_Vars(l1, env);
      release(l1);
      goto block_872_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_874_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_874_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_874_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = New_Vars(l1, env);
      release(l1);
      goto block_872_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_875_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_875_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_875_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = New_Vars(l1, env);
      release(l1);
      goto block_872_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_876_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_comp);
    if (!b1)
    {
      goto block_876_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_876_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_var);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_expr, S_idx_var, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_idx_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_872_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_877_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_877_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_877_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = New_Vars(l1, env);
      release(l1);
      goto block_872_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_878_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_878_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_878_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = New_Vars(l1, env);
      release(l1);
      goto block_872_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = empty_set;
      goto block_872_end;
    }
    fail();
    block_872_end:;
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Obj(Obj p0, Obj p1, Env &env)
  {
    Obj v_obj;
    Obj v_offset;
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    int i0;
    Obj v_res;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
  
    v_tokens = p0;
    v_offset = p1;
    l2 = Length(v_tokens, env);
    l1 = lower(v_offset, l2, env);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l1 = brackets(v_tokens, v_offset, env);
    if (!is_tag_obj(l1))
    {
      b1 = false;
      goto block_881_end;
    }
    l2 = get_tag(l1);
    b1 = are_eq(l2, S_symbol);
    if (!b1)
    {
      goto block_881_end;
    }
    l2 = get_inner_obj(l1);
    b1 = true;
    block_881_end:;
    if (b1)
    {
      v_res = Parse_Obj__Parse_Tagged_Obj_Or_Symbol(v_tokens, v_offset, env);
      goto block_880_end;
    }
    b1 = is_char(l1);
    if (b1)
    {
      goto block_882_end;
    }
    b1 = is_string(l1);
    if (b1)
    {
      goto block_882_end;
    }
    b1 = is_int(l1);
    if (b1)
    {
      goto block_882_end;
    }
    block_882_end:;
    if (b1)
    {
      v_obj = l1;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_obj;
      V1[i0] = v_obj;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_offset;
      V1[i0] = plus(v_offset, to_obj(1), env);
      i0 = i0 + 1;
      v_res = make_map(V0, V1, i0);
      goto block_880_end;
    }
    if (!is_tag_obj(l1))
    {
      b1 = false;
      goto block_883_end;
    }
    l2 = get_tag(l1);
    b1 = are_eq(l2, S_left);
    if (!b1)
    {
      goto block_883_end;
    }
    l2 = get_inner_obj(l1);
    b1 = are_eq(l2, S_brace);
    block_883_end:;
    if (b1)
    {
      v_res = Parse_Obj__Parse_Set(v_tokens, v_offset, env);
      goto block_880_end;
    }
    if (!is_tag_obj(l1))
    {
      b1 = false;
      goto block_884_end;
    }
    l2 = get_tag(l1);
    b1 = are_eq(l2, S_left);
    if (!b1)
    {
      goto block_884_end;
    }
    l2 = get_inner_obj(l1);
    b1 = are_eq(l2, S_parenthesis);
    block_884_end:;
    if (b1)
    {
      v_res = Parse_Obj__Parse_Map_Or_Tuple(v_tokens, v_offset, env);
      goto block_880_end;
    }
    if (!is_tag_obj(l1))
    {
      b1 = false;
      goto block_885_end;
    }
    l2 = get_tag(l1);
    b1 = are_eq(l2, S_left);
    if (!b1)
    {
      goto block_885_end;
    }
    l2 = get_inner_obj(l1);
    b1 = are_eq(l2, S_bracket);
    block_885_end:;
    if (b1)
    {
      v_res = Parse_Obj__Parse_Seq(v_tokens, v_offset, env);
      goto block_880_end;
    }
    b1 = true;
    if (b1)
    {
      v_res = Parse_Obj__Error(v_offset, env);
      goto block_880_end;
    }
    fail();
    block_880_end:;
    release(l1);
    l0 = v_res;
    add_ref(l0);
    release(v_res);
    goto block_879_end;
    block_879_end:;
    return l0;
  }
  
  
  Obj To_C_Fn_Name(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Obj v_symb;
    Obj V0[3];
    Obj v_ts;
    Obj v_op;
    Obj v_fn_symb;
  
    b1 = is_fnsymbol(p0);
    if (b1)
    {
      v_fn_symb = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_888_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_fn_symbol);
      if (!b1)
      {
        goto block_888_end;
      }
      l1 = get_inner_obj(p0);
      v_symb = l1;
      b1 = true;
      block_888_end:;
      if (b1)
      {
        l1 = to_str(v_symb);
        l0 = Capitalize(l1, env);
        release(l1);
        goto block_887_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_889_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_op_symbol);
      if (!b1)
      {
        goto block_889_end;
      }
      l1 = get_inner_obj(p0);
      v_op = l1;
      b1 = true;
      block_889_end:;
      if (b1)
      {
        l0 = to_str(v_op);
        goto block_887_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_890_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_nested_fn_symbol);
      if (!b1)
      {
        goto block_890_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_890_end:;
      if (b1)
      {
        l3 = ext_lookup(v_fn_symb, S_outer);
        add_ref(l3);
        l2 = To_C_Fn_Name(l3, env);
        release(l3);
        i0 = 0;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l3 = make_tagged_obj(S_string, l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l3 = ext_lookup(v_fn_symb, S_inner);
        add_ref(l3);
        l2 = To_C_Fn_Name(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_887_end;
      }
      fail();
      block_887_end:;
      goto block_886_end;
    }
    b1 = is_boolfnname(p0);
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_892_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_memb_test);
      if (!b1)
      {
        goto block_892_end;
      }
      l1 = get_inner_obj(p0);
      v_ts = l1;
      b1 = true;
      block_892_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(105);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = env.n1_typesymb2name(v_ts, env.C1_typesymb2name, env);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_891_end;
      }
      fail();
      block_891_end:;
      goto block_886_end;
    }
    fail();
    block_886_end:;
    return l0;
  }
  
  
  Obj Gen_Fn_Code(Obj p0, Env &env)
  {
    Obj v_body;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    Stream t0;
    Stream t1;
    SeqIter q0;
    MapIter m0;
    Obj v_t;
    Obj v_i;
    Obj v_v;
    Obj V0[1];
    Obj v_fndef;
    Obj v_p;
    Obj v_fn_res_var;
    Obj v_tmp_bvar;
  
    v_fndef = p0;
    v_fn_res_var = Lvar(to_obj(0), env);
    v_tmp_bvar = Bvar(to_obj(0), env);
    v_body = empty_seq;
    Obj BK894 = env.n_next_set_it_var_id;
    env.n_next_set_it_var_id = to_obj(0);
    add_ref(env.n_next_set_it_var_id);
    Obj BK895 = env.n_next_seq_it_var_id;
    env.n_next_seq_it_var_id = to_obj(0);
    add_ref(env.n_next_seq_it_var_id);
    Obj BK896 = env.n_next_map_it_var_id;
    env.n_next_map_it_var_id = to_obj(0);
    add_ref(env.n_next_map_it_var_id);
    Obj BK897 = env.n_next_obj_var_id;
    env.n_next_obj_var_id = to_obj(1);
    add_ref(env.n_next_obj_var_id);
    Obj BK898 = env.n_next_int_var_id;
    env.n_next_int_var_id = to_obj(0);
    add_ref(env.n_next_int_var_id);
    Obj BK899 = env.n_next_bool_var_id;
    env.n_next_bool_var_id = to_obj(1);
    add_ref(env.n_next_bool_var_id);
    Obj BK900 = env.n_next_vector_var_id;
    env.n_next_vector_var_id = to_obj(0);
    add_ref(env.n_next_vector_var_id);
    Obj BK901 = env.n_next_stream_var_id;
    env.n_next_stream_var_id = to_obj(0);
    add_ref(env.n_next_stream_var_id);
    l3 = ext_lookup(v_fndef, S_params);
    add_ref(l3);
    init(t0);
    get_seq_iter(q0, l3);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      v_i = to_obj(i0);
      l5 = ext_lookup(v_p, S_var, b1);
      l5 = to_obj(b1);
      if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
      {
        fail();
      }
      if (are_eq(l5, S_true))
      {
        l6 = ext_lookup(v_p, S_var);
        add_ref(l6);
        l7 = Fn_Par(v_i, env);
        l4 = Set_Var(l6, l7, env);
        release(l7);
        release(l6);
        append(t0, l4);
      }
      move_forward(q0);
      i0 = i0 + 1;
    }
    l2 = make_seq(t0);
    release(l3);
    l1 = amp(v_body, l2, env);
    release(l2);
    release(v_body);
    v_body = l1;
    l3 = ext_lookup(v_fndef, S_expr);
    add_ref(l3);
    l2 = Gen_Eval_Code(l3, v_fn_res_var, env);
    release(l3);
    l1 = amp(v_body, l2, env);
    release(l2);
    release(v_body);
    v_body = l1;
    release(env.n_next_stream_var_id);
    env.n_next_stream_var_id = BK901;
    release(env.n_next_vector_var_id);
    env.n_next_vector_var_id = BK900;
    release(env.n_next_bool_var_id);
    env.n_next_bool_var_id = BK899;
    release(env.n_next_int_var_id);
    env.n_next_int_var_id = BK898;
    release(env.n_next_obj_var_id);
    env.n_next_obj_var_id = BK897;
    release(env.n_next_map_it_var_id);
    env.n_next_map_it_var_id = BK896;
    release(env.n_next_seq_it_var_id);
    env.n_next_seq_it_var_id = BK895;
    release(env.n_next_set_it_var_id);
    env.n_next_set_it_var_id = BK894;
    i0 = 0;
    V0[i0] = Ret_Val(v_fn_res_var, env);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = amp(v_body, l2, env);
    release(l2);
    release(v_body);
    v_body = l1;
    l1 = ext_lookup(v_fndef, S_name);
    add_ref(l1);
    l3 = ext_lookup(v_fndef, S_params);
    add_ref(l3);
    l2 = Length(l3, env);
    release(l3);
    init(t0);
    init(t1);
    l4 = ext_lookup(v_fndef, S_named_params);
    add_ref(l4);
    get_map_iter(m0, l4);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l5 = get_curr_key(m0);
      v_v = l5;
      b1 = true;
      if (b1)
      {
        l5 = get_curr_value(m0);
        v_t = l5;
        b1 = true;
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
          l5 = Arity(v_t, env);
          append(t1, l5);
        }
      }
      move_forward(m0);
    }
    release(l4);
    l3 = make_map(t0, t1);
    l0 = Obj_Proc_Def(l1, l2, l3, v_body, env);
    release(l3);
    release(l2);
    release(l1);
    release(v_body);
    release(v_fn_res_var);
    release(v_tmp_bvar);
    goto block_893_end;
    block_893_end:;
    return l0;
  }
  
  
  Obj Subseq(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    SeqIter q0;
    Obj v_s;
    Obj v_m;
    Obj v_r;
    Obj v_l;
  
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_903_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_903_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = true;
      if (!b1)
      {
        goto block_903_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_903_end:;
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      b1 = is_nat(p1);
      if (b1)
      {
        v_l = p1;
      }
      if (b1)
      {
        b1 = are_eq(S_nil, p2);
        if (b1)
        {
          b1 = is_nat(p3);
          if (b1)
          {
            v_r = p3;
          }
          if (b1)
          {
            l3 = Length(v_s, env);
            l2 = minus(l3, v_l, env);
            release(l3);
            l1 = minus(l2, v_r, env);
            release(l2);
            l0 = Subseq(v_s, v_l, l1, env);
            release(l1);
            goto block_902_end;
          }
        }
      }
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_904_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_904_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = true;
      if (!b1)
      {
        goto block_904_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_904_end:;
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      b1 = are_eq(S_nil, p1);
      if (b1)
      {
        b1 = is_nat(p2);
        if (b1)
        {
          v_m = p2;
        }
        if (b1)
        {
          b1 = is_nat(p3);
          if (b1)
          {
            v_r = p3;
          }
          if (b1)
          {
            l3 = Length(v_s, env);
            l2 = minus(l3, v_m, env);
            release(l3);
            l1 = minus(l2, v_r, env);
            release(l2);
            l0 = Subseq(v_s, l1, v_m, env);
            release(l1);
            goto block_902_end;
          }
        }
      }
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_905_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_905_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = true;
      if (!b1)
      {
        goto block_905_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_905_end:;
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      b1 = is_nat(p1);
      if (b1)
      {
        v_l = p1;
      }
      if (b1)
      {
        b1 = is_nat(p2);
        if (b1)
        {
          v_m = p2;
        }
        if (b1)
        {
          b1 = are_eq(S_nil, p3);
          if (b1)
          {
            l0 = Subseq(v_s, v_l, v_m, env);
            goto block_902_end;
          }
        }
      }
    }
    fail();
    block_902_end:;
    return l0;
  }
  
  
  Obj Syn_Is_Last_For_Sure(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    SeqIter q0;
    SeqIter q1;
    Obj v_s;
    Obj v_b;
    Obj v_ss;
    Obj v_stmt;
  
    v_stmt = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_907_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_907_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_907_end:;
    if (b1)
    {
      l0 = S_true;
      goto block_906_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      l0 = S_true;
      goto block_906_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_908_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_908_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_908_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_branches);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l6 = ext_lookup(v_b, S_body);
        add_ref(l6);
        l5 = make_array(get_seq_len(l6), S_nil);
        get_seq_iter(q1, l6);
        i1 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q1))
          {
            break;
          }
          v_s = get_curr_obj(q1);
          l7 = Syn_Is_Last_For_Sure(v_s, env);
          set_at(l5, i1, l7);
          move_forward(q1);
          i1 = i1 + 1;
        }
        release(l6);
        l3 = At_Least_One(l5, env);
        release(l5);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = All(l1, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l2 = ext_lookup(v_stmt, S_else);
        add_ref(l2);
        l1 = make_array(get_seq_len(l2), S_nil);
        get_seq_iter(q0, l2);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          l3 = Syn_Is_Last_For_Sure(v_s, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l2);
        l0 = At_Least_One(l1, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_906_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_909_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_inf_loop_stmt);
    if (!b1)
    {
      goto block_909_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_909_end:;
    if (b1)
    {
      l1 = make_array(get_seq_len(v_ss), S_nil);
      get_seq_iter(q0, v_ss);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Syn_Can_Break_Loop(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l0 = None(l1, env);
      release(l1);
      goto block_906_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = S_false;
      goto block_906_end;
    }
    fail();
    block_906_end:;
    return l0;
  }
  
  
  Obj Gen_Eval_Info(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj v_var;
    Obj l0;
    bool b1;
    int i0;
    int i1;
    Obj v_eval_code;
    Obj V2[1];
    Obj V0[5];
    Obj V1[5];
  
    v_expr = p0;
    v_var = p1;
    b1 = is_leafobj(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_expr;
      V1[i0] = v_expr;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_var_used;
      V1[i0] = S_false;
      i0 = i0 + 1;
      V0[i0] = S_eval_code;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      V0[i0] = S_cleanup_code;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      V0[i0] = S_add_ref_eval_code;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      goto block_910_end;
    }
    b1 = is_var(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_expr;
      V1[i0] = v_expr;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_var_used;
      V1[i0] = S_false;
      i0 = i0 + 1;
      V0[i0] = S_eval_code;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      V0[i0] = S_cleanup_code;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      V0[i0] = S_add_ref_eval_code;
      i1 = 0;
      V2[i1] = Add_Ref(v_expr, env);
      i1 = i1 + 1;
      V1[i0] = make_seq(V2, i1);
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      goto block_910_end;
    }
    b1 = true;
    if (b1)
    {
      v_eval_code = Gen_Eval_Code(v_expr, v_var, env);
      i0 = 0;
      V0[i0] = S_expr;
      V1[i0] = v_var;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_var_used;
      V1[i0] = S_true;
      i0 = i0 + 1;
      V0[i0] = S_eval_code;
      V1[i0] = v_eval_code;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_add_ref_eval_code;
      V1[i0] = v_eval_code;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_cleanup_code;
      i1 = 0;
      V2[i1] = Release(v_var, env);
      i1 = i1 + 1;
      V1[i0] = make_seq(V2, i1);
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      release(v_eval_code);
      goto block_911_end;
      block_911_end:;
      goto block_910_end;
    }
    fail();
    block_910_end:;
    return l0;
  }
  
  
  Obj Stmts_Are_Wf(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_i;
    Obj v_scalar_vars;
    Obj v_vs;
    Obj v_reachable;
    Obj v_is_inside_loop;
    Obj v_needs_return;
  
    v_stmts = p0;
    v_scalar_vars = p1;
    v_is_inside_loop = p2;
    v_needs_return = p3;
    v_vs = v_scalar_vars;
    add_ref(v_vs);
    v_reachable = S_true;
    get_seq_iter(q0, v_stmts);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_s = get_curr_obj(q0);
      v_i = to_obj(i0);
      l1 = v_reachable;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_false))
      {
        l1 = Stmt_Is_Wf(v_s, v_vs, v_is_inside_loop, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_false;
        release(v_vs);
        release(v_reachable);
        goto block_912_end;
      }
      l2 = New_Vars(v_s, env);
      l1 = amp(v_vs, l2, env);
      release(l2);
      release(v_vs);
      v_vs = l1;
      l1 = v_reachable;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = Is_Last_For_Sure(v_s, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      release(v_reachable);
      v_reachable = l1;
      move_forward(q0);
      i0 = i0 + 1;
    }
    l0 = v_needs_return;
    add_ref(l0);
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_false))
    {
      l0 = v_reachable;
      add_ref(l0);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
    }
    release(v_vs);
    release(v_reachable);
    goto block_912_end;
    block_912_end:;
    return l0;
  }
  
  
  Obj Case_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    Obj v_errs;
    Obj v_v;
    Obj V0[1];
    Obj v_p;
    Obj v_vs;
    Obj v_def_vars;
    Obj v_syn_case;
    Obj v_pvs;
  
    v_syn_case = p0;
    v_def_vars = p1;
    v_vs = v_def_vars;
    add_ref(v_vs);
    v_errs = empty_set;
    l1 = ext_lookup(v_syn_case, S_patterns);
    add_ref(l1);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      v_pvs = New_Vars(v_p, env);
      init(t0);
      l4 = Intersection(v_pvs, v_vs, env);
      get_set_iter(s0, l4);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l5 = get_curr_obj(s0);
        v_v = l5;
        b1 = true;
        if (b1)
        {
          add_ref(v_v);
          l5 = make_tagged_obj(S_already_def_ptrn_var, v_v);
          append(t0, l5);
        }
        move_forward(s0);
      }
      release(l4);
      l3 = make_set(t0);
      l2 = amp(v_errs, l3, env);
      release(l3);
      release(v_errs);
      v_errs = l2;
      if (!is_tag_obj(v_p))
      {
        b1 = false;
        goto block_914_end;
      }
      l3 = get_tag(v_p);
      b1 = are_eq(S_ptrn_var, l3);
      if (!b1)
      {
        goto block_914_end;
      }
      l3 = get_inner_obj(v_p);
      if (!is_ne_map(l3))
      {
        b1 = false;
        goto block_915_end;
      }
      i0 = get_map_size(l3);
      if (!((i0 >= 1) & (i0 <= 1)))
      {
        b1 = false;
        goto block_915_end;
      }
      get_map_iter(m0, l3);
      if (is_out_of_range(m0))
      {
        b1 = false;
        goto block_915_end;
      }
      l4 = get_curr_key(m0);
      if (!are_eq(l4, S_name))
      {
        b1 = false;
        goto block_915_end;
      }
      l4 = get_curr_value(m0);
      b1 = is_var(l4);
      if (!b1)
      {
        goto block_915_end;
      }
      move_forward(m0);
      b1 = is_out_of_range(m0);
      block_915_end:;
      block_914_end:;
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        i0 = 0;
        l4 = ext_lookup(v_p, S_name);
        add_ref(l4);
        V0[i0] = make_tagged_obj(S_free_var_in_try_expr, l4);
        i0 = i0 + 1;
        l3 = make_set(V0, i0);
        l2 = amp(v_errs, l3, env);
        release(l3);
        release(v_errs);
        v_errs = l2;
      }
      l4 = empty_set;
      l3 = Ptrn_Wf_Errors(v_p, l4, env);
      release(l4);
      l2 = amp(v_errs, l3, env);
      release(l3);
      release(v_errs);
      v_errs = l2;
      l2 = amp(v_vs, v_pvs, env);
      release(v_vs);
      v_vs = l2;
      release(v_pvs);
      move_forward(q0);
    }
    release(l1);
    l2 = ext_lookup(v_syn_case, S_expr);
    add_ref(l2);
    l1 = Expr_Wf_Errors(l2, v_vs, env);
    release(l2);
    l0 = amp(v_errs, l1, env);
    release(l1);
    release(v_errs);
    release(v_vs);
    goto block_913_end;
    block_913_end:;
    return l0;
  }
  
  
  Obj Iter_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Obj V0[2];
    Obj v_iter;
    Obj v_def_vars;
  
    v_iter = p0;
    v_def_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_917_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_iter);
    if (!b1)
    {
      goto block_917_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_917_end:;
    if (b1)
    {
      l2 = ext_lookup(v_iter, S_values);
      add_ref(l2);
      l1 = Expr_Wf_Errors(l2, v_def_vars, env);
      release(l2);
      i0 = 0;
      l4 = ext_lookup(v_iter, S_var);
      add_ref(l4);
      l3 = In(l4, v_def_vars, env);
      release(l4);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = ext_lookup(v_iter, S_var);
        add_ref(l3);
        V0[i0] = make_tagged_obj(S_var_redef, l3);
        i0 = i0 + 1;
      }
      l3 = ext_lookup(v_iter, S_idx_var, b1);
      l3 = to_obj(b1);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l4 = ext_lookup(v_iter, S_idx_var);
        add_ref(l4);
        l3 = In(l4, v_def_vars, env);
        release(l4);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = ext_lookup(v_iter, S_idx_var);
        add_ref(l3);
        V0[i0] = make_tagged_obj(S_var_redef, l3);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_916_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_918_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_range_iter);
    if (!b1)
    {
      goto block_918_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_918_end:;
    if (b1)
    {
      l3 = ext_lookup(v_iter, S_start_val);
      add_ref(l3);
      l2 = Expr_Wf_Errors(l3, v_def_vars, env);
      release(l3);
      l4 = ext_lookup(v_iter, S_end_val);
      add_ref(l4);
      l3 = Expr_Wf_Errors(l4, v_def_vars, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      l4 = ext_lookup(v_iter, S_var);
      add_ref(l4);
      l3 = In(l4, v_def_vars, env);
      release(l4);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = ext_lookup(v_iter, S_var);
        add_ref(l3);
        V0[i0] = make_tagged_obj(S_var_redef, l3);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_916_end;
    }
    fail();
    block_916_end:;
    return l0;
  }
  
  
  Obj Never_Falls_Through(Obj p0, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    SeqIter q0;
    Obj v_s;
    Obj v_b;
    Obj v_ss;
    Obj v_stmt;
  
    b1 = is_synstmt(p0);
    if (b1)
    {
      v_stmt = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_921_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_return_stmt);
      if (!b1)
      {
        goto block_921_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_921_end:;
      if (b1)
      {
        l0 = S_true;
        goto block_920_end;
      }
      b1 = are_eq(p0, S_fail_stmt);
      if (b1)
      {
        l0 = S_true;
        goto block_920_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_922_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_inf_loop_stmt);
      if (!b1)
      {
        goto block_922_end;
      }
      l1 = get_inner_obj(p0);
      v_ss = l1;
      b1 = true;
      block_922_end:;
      if (b1)
      {
        l0 = Has_Top_Level_Break(v_ss, env);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        goto block_920_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_923_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_if_stmt);
      if (!b1)
      {
        goto block_923_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_923_end:;
      if (b1)
      {
        l1 = ext_lookup(v_stmt, S_branches);
        add_ref(l1);
        get_seq_iter(q0, l1);
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_b = get_curr_obj(q0);
          l3 = ext_lookup(v_b, S_body);
          add_ref(l3);
          l2 = Never_Falls_Through(l3, env);
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l0 = S_false;
            release(l1);
            goto block_924_end;
          }
          move_forward(q0);
        }
        release(l1);
        l1 = ext_lookup(v_stmt, S_else);
        add_ref(l1);
        l0 = Never_Falls_Through(l1, env);
        release(l1);
        goto block_924_end;
        block_924_end:;
        goto block_920_end;
      }
      b1 = true;
      if (b1)
      {
        l0 = S_false;
        goto block_920_end;
      }
      fail();
      block_920_end:;
      goto block_919_end;
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_925_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_925_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_synstmt(l1);
      if (!b1)
      {
        goto block_925_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_925_end:;
    if (b1)
    {
      v_stmts = p0;
    }
    if (b1)
    {
      get_seq_iter(q0, v_stmts);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l1 = Never_Falls_Through(v_s, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = S_true;
          goto block_926_end;
        }
        move_forward(q0);
      }
      l0 = S_false;
      goto block_926_end;
      block_926_end:;
      goto block_919_end;
    }
    fail();
    block_919_end:;
    return l0;
  }
  
  
  Obj Mergesort__Merge(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    Obj v_seq1;
    Obj v_seq2;
    Obj v_l1;
    Obj v_l2;
    Obj v_rs;
    Obj v_i1;
    Obj v_i2;
    Obj V0[1];
  
    v_seq1 = p0;
    v_seq2 = p1;
    v_l1 = Length(v_seq1, env);
    v_l2 = Length(v_seq2, env);
    v_rs = empty_seq;
    v_i1 = to_obj(0);
    v_i2 = to_obj(0);
    for ( ; ; )
    {
      l1 = lower(v_i1, v_l1, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_false))
      {
        l1 = lower(v_i2, v_l2, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      l1 = to_obj(are_eq(v_i1, v_l1));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_false))
      {
        l1 = lower(v_i2, v_l2, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l2 = brackets(v_seq2, v_i2, env);
          l3 = brackets(v_seq1, v_i1, env);
          l1 = env.n2_is_strictly_ordered(l2, l3, env.C2_is_strictly_ordered, env);
          release(l3);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = brackets(v_seq2, v_i2, env);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = join_seqs(l2, v_rs);
        release(l2);
        release(v_rs);
        v_rs = l1;
        l1 = plus(v_i2, to_obj(1), env);
        release(v_i2);
        v_i2 = l1;
      }
      else
      {
        i0 = 0;
        V0[i0] = brackets(v_seq1, v_i1, env);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = join_seqs(l2, v_rs);
        release(l2);
        release(v_rs);
        v_rs = l1;
        l1 = plus(v_i1, to_obj(1), env);
        release(v_i1);
        v_i1 = l1;
      }
    }
    l1 = lower_eq(v_i1, v_l1, env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = lower_eq(v_i2, v_l2, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l0 = Reverse(v_rs, env);
    release(v_l1);
    release(v_l2);
    release(v_rs);
    release(v_i1);
    release(v_i2);
    goto block_927_end;
    block_927_end:;
    return l0;
  }
  
  
  Obj Types_Are_Wf(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    Stream t0;
    Stream t1;
    MapIter m0;
    Obj v_t;
    Obj v_s;
    Obj v_es;
    Obj v_typedefs;
    Obj v_tl_ref_map;
    Obj v_tl_ref_deep_map;
  
    v_typedefs = p0;
    init(t0);
    init(t1);
    get_map_iter(m0, v_typedefs);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_t = l2;
        b1 = true;
        if (b1)
        {
          add_ref(v_s);
          append(t0, v_s);
          l2 = Types_Are_Wf__Top_Level_Refs(v_t, env);
          append(t1, l2);
        }
      }
      move_forward(m0);
    }
    v_tl_ref_map = make_map(t0, t1);
    v_tl_ref_deep_map = Transitive_Closure(v_tl_ref_map, env);
    l1 = S_false;
    get_map_iter(m0, v_tl_ref_deep_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l3 = get_curr_key(m0);
      v_s = l3;
      b1 = true;
      if (b1)
      {
        l3 = get_curr_value(m0);
        v_es = l3;
        b1 = true;
        if (b1)
        {
          l3 = In(v_s, v_es, env);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l1 = S_true;
            goto block_929_end;
          }
        }
      }
      move_forward(m0);
    }
    block_929_end:;
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      release(v_tl_ref_map);
      release(v_tl_ref_deep_map);
      goto block_928_end;
    }
    l0 = S_false;
    get_map_iter(m0, v_typedefs);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_t = l2;
        b1 = true;
        if (b1)
        {
          Obj BK931 = env.n_typedefs;
          env.n_typedefs = v_typedefs;
          add_ref(env.n_typedefs);
          Obj (*BF932)(Obj, const Obj *, Env &) = env.n1_eval;
          const Obj *BD932 = env.C1_eval;
          env.n1_eval = cls_7;
          env.C1_eval = 0;
          Obj (*BF933)(Obj, const Obj *, Env &) = env.n1_condition;
          const Obj *BD933 = env.C1_condition;
          env.n1_condition = cls_19;
          env.C1_condition = 0;
          l3 = Select_Expr_Fn(v_s, env);
          env.n1_condition = BF933;
          env.C1_condition = BD933;
          env.n1_eval = BF932;
          env.C1_eval = BD932;
          l2 = Type_Is_Wf(v_t, l3, env);
          release(l3);
          release(env.n_typedefs);
          env.n_typedefs = BK931;
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l0 = S_true;
            goto block_930_end;
          }
        }
      }
      move_forward(m0);
    }
    block_930_end:;
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    release(v_tl_ref_map);
    release(v_tl_ref_deep_map);
    goto block_928_end;
    block_928_end:;
    return l0;
  }
  
  
  Obj Merge_Fns_Same_Name_And_Arity(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    SetIter s0;
    SetIter s1;
    MapIter m0;
    Obj v_m;
    Obj V0[2];
    Obj V1[2];
    Obj v_fd;
    Obj v_fns;
    Obj v_mult_map;
    Obj v_na;
    Obj v_fns_to_merge;
    Obj v_merged_fns;
    Obj v_new_fns;
  
    v_prg = p0;
    Obj (*BF935)(Obj, const Obj *, Env &) = env.n1_f;
    const Obj *BD935 = env.C1_f;
    env.n1_f = cls_28;
    env.C1_f = 0;
    l1 = ext_lookup(v_prg, S_fndefs);
    add_ref(l1);
    v_mult_map = Apply(l1, env);
    release(l1);
    env.n1_f = BF935;
    env.C1_f = BD935;
    init(t0);
    get_map_iter(m0, v_mult_map);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_na = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_m = l2;
        b1 = true;
        if (b1)
        {
          l2 = greater(v_m, to_obj(1), env);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            init(t1);
            l3 = ext_lookup(v_prg, S_fndefs);
            add_ref(l3);
            get_set_iter(s1, l3);
            for ( ; ; )
            {
              if (is_out_of_range(s1))
              {
                break;
              }
              l4 = get_curr_obj(s1);
              v_fd = l4;
              b1 = true;
              if (b1)
              {
                i0 = 0;
                V0[i0] = ext_lookup(v_fd, S_name);
                add_ref(V0[i0]);
                i0 = i0 + 1;
                V0[i0] = Arity(v_fd, env);
                i0 = i0 + 1;
                l5 = make_seq(V0, i0);
                l4 = to_obj(are_eq(l5, v_na));
                release(l5);
                if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                {
                  fail();
                }
                if (are_eq(l4, S_true))
                {
                  add_ref(v_fd);
                  append(t1, v_fd);
                }
              }
              move_forward(s1);
            }
            release(l3);
            l2 = make_set(t1);
            append(t0, l2);
          }
        }
      }
      move_forward(m0);
    }
    v_fns_to_merge = make_set(t0);
    init(t0);
    get_set_iter(s0, v_fns_to_merge);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fns = l2;
      b1 = true;
      if (b1)
      {
        l2 = Merge_Fns(v_fns, env);
        append(t0, l2);
      }
      move_forward(s0);
    }
    v_merged_fns = make_set(t0);
    l2 = ext_lookup(v_prg, S_fndefs);
    add_ref(l2);
    l3 = Union(v_fns_to_merge, env);
    l1 = minus(l2, l3, env);
    release(l3);
    release(l2);
    v_new_fns = amp(v_merged_fns, l1, env);
    release(l1);
    i0 = 0;
    V0[i0] = S_tdefs;
    V1[i0] = ext_lookup(v_prg, S_tdefs);
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_fndefs;
    V1[i0] = v_new_fns;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_program, l1);
    release(v_mult_map);
    release(v_fns_to_merge);
    release(v_merged_fns);
    release(v_new_fns);
    goto block_934_end;
    block_934_end:;
    return l0;
  }
  
  
  Obj Mergesort(Obj p0, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    int i0;
    int i1;
    SeqIter q0;
    Obj v_len;
    Obj v_idx;
    Obj v_seq;
    Obj v_ss;
    Obj v_nss;
    Obj V0[1];
  
    v_seq = p0;
    v_len = Length(v_seq, env);
    l1 = lower_eq(v_len, to_obj(1), env);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_seq;
      add_ref(l0);
      release(v_len);
      goto block_936_end;
    }
    v_ss = make_array(get_seq_len(v_seq), S_nil);
    get_seq_iter(q0, v_seq);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_x = get_curr_obj(q0);
      i1 = 0;
      V0[i1] = v_x;
      add_ref(V0[i1]);
      i1 = i1 + 1;
      l2 = make_seq(V0, i1);
      set_at(v_ss, i0, l2);
      move_forward(q0);
      i0 = i0 + 1;
    }
    for ( ; ; )
    {
      l1 = greater(v_len, to_obj(1), env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      v_nss = empty_seq;
      v_idx = to_obj(0);
      for ( ; ; )
      {
        l2 = plus(v_idx, to_obj(1), env);
        l1 = greater(v_len, l2, env);
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          break;
        }
        i0 = 0;
        l3 = brackets(v_ss, v_idx, env);
        l5 = plus(v_idx, to_obj(1), env);
        l4 = brackets(v_ss, l5, env);
        release(l5);
        V0[i0] = Mergesort__Merge(l3, l4, env);
        release(l4);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = join_seqs(l2, v_nss);
        release(l2);
        release(v_nss);
        v_nss = l1;
        l1 = plus(v_idx, to_obj(2), env);
        release(v_idx);
        v_idx = l1;
      }
      l2 = Length(v_ss, env);
      l1 = to_obj(are_eq(v_idx, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_false))
      {
        l3 = Length(v_ss, env);
        l2 = minus(l3, to_obj(1), env);
        release(l3);
        l1 = to_obj(are_eq(v_idx, l2));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      l2 = greater(v_len, v_idx, env);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        i0 = 0;
        V0[i0] = brackets(v_ss, v_idx, env);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = join_seqs(l2, v_nss);
        release(l2);
      }
      else
      {
        l1 = v_nss;
        add_ref(l1);
      }
      release(v_ss);
      v_ss = l1;
      release(v_len);
      v_len = Length(v_ss, env);
      release(v_idx);
      release(v_nss);
    }
    l0 = brackets(v_ss, to_obj(0), env);
    release(v_len);
    release(v_ss);
    goto block_936_end;
    block_936_end:;
    return l0;
  }
  
  
  Obj Scalar_Vars(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    Stream t0;
    Obj l8;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    Obj v_fn_def;
    Obj v_t;
    Obj v_i;
    Obj v_v;
    Obj v_p;
  
    v_fn_def = p0;
    init(t0);
    l4 = ext_lookup(v_fn_def, S_params);
    add_ref(l4);
    l3 = Set(l4, env);
    release(l4);
    get_set_iter(s0, l3);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_p = l4;
      b1 = true;
      if (b1)
      {
        l4 = ext_lookup(v_p, S_var, b1);
        l4 = to_obj(b1);
        if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
        {
          fail();
        }
        if (are_eq(l4, S_true))
        {
          l4 = ext_lookup(v_p, S_type, b1);
          l4 = to_obj(b1);
          if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
          {
            fail();
          }
          if (are_eq(l4, S_true))
          {
            l4 = S_false;
          }
          else
          {
            l4 = S_true;
          }
          if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
          {
            fail();
          }
          if (are_eq(l4, S_false))
          {
            l5 = ext_lookup(v_p, S_type);
            add_ref(l5);
            b1 = is_type(l5);
            l4 = to_obj(b1);
            release(l5);
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
        {
          fail();
        }
        if (are_eq(l4, S_true))
        {
          l4 = ext_lookup(v_p, S_var);
          add_ref(l4);
          append(t0, l4);
        }
      }
      move_forward(s0);
    }
    release(l3);
    l2 = make_set(t0);
    l5 = ext_lookup(v_fn_def, S_params);
    add_ref(l5);
    init(t0);
    get_seq_iter(q0, l5);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      v_i = to_obj(i0);
      l7 = ext_lookup(v_p, S_type, b1);
      l7 = to_obj(b1);
      if (!(are_eq(l7, S_true) | are_eq(l7, S_false)))
      {
        fail();
      }
      if (are_eq(l7, S_true))
      {
        l7 = S_false;
      }
      else
      {
        l7 = S_true;
      }
      if (!(are_eq(l7, S_true) | are_eq(l7, S_false)))
      {
        fail();
      }
      if (are_eq(l7, S_false))
      {
        l8 = ext_lookup(v_p, S_type);
        add_ref(l8);
        b1 = is_type(l8);
        l7 = to_obj(b1);
        release(l8);
        if (!(are_eq(l7, S_true) | are_eq(l7, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l7, S_true) | are_eq(l7, S_false)))
      {
        fail();
      }
      if (are_eq(l7, S_true))
      {
        add_ref(v_i);
        l6 = make_tagged_obj(S_fn_par, v_i);
        append(t0, l6);
      }
      move_forward(q0);
      i0 = i0 + 1;
    }
    l4 = make_seq(t0);
    release(l5);
    l3 = Set(l4, env);
    release(l4);
    l1 = amp(l2, l3, env);
    release(l3);
    release(l2);
    init(t0);
    l3 = ext_lookup(v_fn_def, S_named_params);
    add_ref(l3);
    get_map_iter(m0, l3);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l4 = get_curr_key(m0);
      v_v = l4;
      b1 = true;
      if (b1)
      {
        l4 = get_curr_value(m0);
        b1 = is_type(l4);
        if (b1)
        {
          v_t = l4;
        }
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
        }
      }
      move_forward(m0);
    }
    release(l3);
    l2 = make_set(t0);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    return l0;
  }
  
  
  Obj To_Str(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_neg;
    Obj v_str;
    Obj v_n;
    Obj v_e;
    Obj v_count;
    Obj v_m;
    Obj V0[1];
    Obj v_div;
    Obj v_divs;
    Obj v_d;
  
    b1 = is_int(p0);
    if (b1)
    {
      v_n = p0;
    }
    if (b1)
    {
      v_m = v_n;
      add_ref(v_m);
      v_neg = S_false;
      l1 = lower(v_m, to_obj(0), env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = minus(v_m, env);
        release(v_m);
        v_m = l1;
        release(v_neg);
        v_neg = S_true;
      }
      l1 = greater_eq(v_m, to_obj(0), env);
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      v_div = to_obj(10);
      i0 = 0;
      V0[i0] = to_obj(1);
      i0 = i0 + 1;
      v_divs = make_seq(V0, i0);
      for ( ; ; )
      {
        l1 = lower_eq(v_div, v_m, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          break;
        }
        i0 = 0;
        V0[i0] = v_div;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = join_seqs(l2, v_divs);
        release(l2);
        release(v_divs);
        v_divs = l1;
        l1 = star(to_obj(10), v_div, env);
        release(v_div);
        v_div = l1;
      }
      l1 = empty_seq;
      v_str = make_tagged_obj(S_string, l1);
      get_seq_iter(q0, v_divs);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_d = get_curr_obj(q0);
        v_count = to_obj(0);
        for ( ; ; )
        {
          l1 = greater_eq(v_m, v_d, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          l1 = minus(v_m, v_d, env);
          release(v_m);
          v_m = l1;
          l1 = plus(v_count, to_obj(1), env);
          release(v_count);
          v_count = l1;
        }
        i0 = 0;
        V0[i0] = plus(to_obj(48), v_count, env);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = String(l3, env);
        release(l3);
        l1 = amp(v_str, l2, env);
        release(l2);
        release(v_str);
        v_str = l1;
        release(v_count);
        move_forward(q0);
      }
      if (!(are_eq(v_neg, S_true) | are_eq(v_neg, S_false)))
      {
        fail();
      }
      if (are_eq(v_neg, S_true))
      {
        i0 = 0;
        V0[i0] = to_obj(45);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l0 = amp(l1, v_str, env);
        release(l1);
      }
      else
      {
        l0 = v_str;
        add_ref(l0);
      }
      release(v_neg);
      release(v_str);
      release(v_m);
      release(v_div);
      release(v_divs);
      goto block_938_end;
      block_938_end:;
      goto block_937_end;
    }
    b1 = is_objexpr(p0);
    if (b1)
    {
      v_e = p0;
    }
    if (b1)
    {
      add_ref(v_e);
      l0 = make_tagged_obj(S_to_str, v_e);
      goto block_937_end;
    }
    fail();
    block_937_end:;
    return l0;
  }
  
  
  Obj Merge_Fns(Obj p0, Env &env)
  {
    Obj v_name;
    Obj v_named_params;
    Obj v_cases;
    Obj v_case;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    int i1;
    SeqIter q0;
    SeqIter q1;
    Obj v_ptrns;
    Obj v_arity;
    Obj v_i;
    Obj V0[4];
    Obj V1[4];
    Obj v_fd;
    Obj v_p;
    Obj v_fds;
    Obj v_rand_fd;
    Obj v_new_expr;
  
    v_fds = p0;
    l2 = Size(v_fds, env);
    l1 = greater(l2, to_obj(1), env);
    release(l2);
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    v_cases = empty_seq;
    l1 = Rand_Sort(v_fds, env);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_fd = get_curr_obj(q0);
      l2 = ext_lookup(v_fd, S_params);
      add_ref(l2);
      v_ptrns = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q1, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q1))
        {
          break;
        }
        v_p = get_curr_obj(q1);
        l3 = Merge_Fns__Mk_Ptrn(v_p, env);
        set_at(v_ptrns, i0, l3);
        move_forward(q1);
        i0 = i0 + 1;
      }
      release(l2);
      i0 = 0;
      V0[i0] = S_ptrns;
      V1[i0] = v_ptrns;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_expr;
      V1[i0] = ext_lookup(v_fd, S_expr);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      v_case = make_map(V0, V1, i0);
      i0 = 0;
      V0[i0] = v_case;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = join_seqs(l3, v_cases);
      release(l3);
      release(v_cases);
      v_cases = l2;
      release(v_case);
      release(v_ptrns);
      move_forward(q0);
    }
    release(l1);
    v_rand_fd = Rand_Elem(v_fds, env);
    v_name = ext_lookup(v_rand_fd, S_name);
    add_ref(v_name);
    v_arity = Arity(v_rand_fd, env);
    v_named_params = ext_lookup(v_rand_fd, S_named_params);
    add_ref(v_named_params);
    i0 = 0;
    V0[i0] = S_cases;
    V1[i0] = v_cases;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_exprs;
    l2 = Inc_Seq(v_arity, env);
    V1[i0] = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i1 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_i = get_curr_obj(q0);
      l3 = Fn_Par(v_i, env);
      set_at(V1[i0], i1, l3);
      move_forward(q0);
      i1 = i1 + 1;
    }
    release(l2);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_new_expr = make_tagged_obj(S_match_expr, l1);
    i0 = 0;
    V0[i0] = S_name;
    V1[i0] = v_name;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_named_params;
    V1[i0] = v_named_params;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_expr;
    V1[i0] = v_new_expr;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_params;
    l2 = empty_map;
    V1[i0] = Rep_Seq(v_arity, l2, env);
    release(l2);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_fn_def, l1);
    release(v_name);
    release(v_named_params);
    release(v_cases);
    release(v_arity);
    release(v_rand_fd);
    release(v_new_expr);
    goto block_939_end;
    block_939_end:;
    return l0;
  }
  
  
  Obj lower(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    bool b1;
    Obj v_a;
    Obj v_b;
    Obj v_s1;
    Obj v_s2;
    Obj v_i;
    Obj v_str1;
    Obj v_str2;
    Obj v_len1;
    Obj v_len2;
    Obj v_min_len;
    Obj v_ch1;
    Obj v_ch2;
  
    b1 = is_string(p0);
    if (b1)
    {
      v_str1 = p0;
    }
    if (b1)
    {
      b1 = is_string(p1);
      if (b1)
      {
        v_str2 = p1;
      }
      if (b1)
      {
        v_len1 = Length(v_str1, env);
        v_len2 = Length(v_str2, env);
        v_min_len = Min(v_len1, v_len2, env);
        v_i = to_obj(0);
        for ( ; ; )
        {
          l1 = lower(v_i, v_min_len, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          v_ch1 = brackets(v_str1, v_i, env);
          v_ch2 = brackets(v_str2, v_i, env);
          l1 = lower(v_ch1, v_ch2, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l0 = S_true;
            release(v_i);
            release(v_len1);
            release(v_len2);
            release(v_min_len);
            release(v_ch1);
            release(v_ch2);
            goto block_941_end;
          }
          l1 = greater(v_ch1, v_ch2, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l0 = S_false;
            release(v_i);
            release(v_len1);
            release(v_len2);
            release(v_min_len);
            release(v_ch1);
            release(v_ch2);
            goto block_941_end;
          }
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
          release(v_ch1);
          release(v_ch2);
        }
        l0 = lower(v_len1, v_len2, env);
        release(v_i);
        release(v_len1);
        release(v_len2);
        release(v_min_len);
        goto block_941_end;
        block_941_end:;
        goto block_940_end;
      }
    }
    b1 = is_int(p0);
    if (b1)
    {
      v_a = p0;
    }
    if (b1)
    {
      b1 = is_int(p1);
      if (b1)
      {
        v_b = p1;
      }
      if (b1)
      {
        b1 = is_int(p0) && (get_int_val(p0) >= 0) && (get_int_val(p0) <= 0);
        if (b1)
        {
          b1 = is_int(p1) && (get_int_val(p1) >= 1);
          if (b1)
          {
            l0 = S_true;
            goto block_942_end;
          }
        }
        b1 = is_int(p0) && (get_int_val(p0) >= 0) && (get_int_val(p0) <= 0);
        if (b1)
        {
          b1 = true;
          if (b1)
          {
            l0 = S_false;
            goto block_942_end;
          }
        }
        b1 = true;
        if (b1)
        {
          b1 = true;
          if (b1)
          {
            l1 = minus(v_b, v_a, env);
            l0 = lower(to_obj(0), l1, env);
            release(l1);
            goto block_942_end;
          }
        }
        fail();
        block_942_end:;
        goto block_940_end;
      }
    }
    b1 = is_symbobj(p0);
    if (b1)
    {
      v_s1 = p0;
    }
    if (b1)
    {
      b1 = is_symbobj(p1);
      if (b1)
      {
        v_s2 = p1;
      }
      if (b1)
      {
        l1 = Untag(v_s1, env);
        l2 = Untag(v_s2, env);
        l0 = Lower_Than(l1, l2, env);
        release(l2);
        release(l1);
        goto block_940_end;
      }
    }
    fail();
    block_940_end:;
    return l0;
  }
  
  
  Obj Gen_Vector_Eval_Info__Gen_Vector_Eval_Code(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    int i1;
    SeqIter q0;
    Obj v_code;
    Obj v_count_var;
    Obj v_e;
    Obj V1[1];
    Obj V0[2];
    Obj v_elems_var;
    Obj v_curr_slot_var;
    Obj v_cond_var;
    Obj v_cond_eval_info;
    Obj v_expr_eval_code;
    Obj v_new_code;
  
    v_exprs = p0;
    v_elems_var = p1;
    v_count_var = p2;
    l1 = ext_lookup(v_elems_var, S_id);
    add_ref(l1);
    v_curr_slot_var = Evar(l1, v_count_var, env);
    release(l1);
    v_cond_var = Lvar(env.n_next_obj_var_id, env);
    i0 = 0;
    V0[i0] = Set_Ivar(v_count_var, to_obj(0), env);
    i0 = i0 + 1;
    v_code = make_seq(V0, i0);
    get_seq_iter(q0, v_exprs);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_e = get_curr_obj(q0);
      b1 = is_expr(v_e);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = Gen_Eval_Code(v_e, v_curr_slot_var, env);
        i0 = 0;
        V0[i0] = Increment(v_count_var, env);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        v_new_code = amp(l1, l2, env);
        release(l2);
        release(l1);
      }
      else
      {
        b1 = is_condexpr(v_e);
        l1 = to_obj(b1);
        if (!are_eq(l1, S_true))
        {
          fail();
        }
        l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
        Obj BK944 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = l1;
        add_ref(env.n_next_obj_var_id);
        l2 = ext_lookup(v_e, S_cond);
        add_ref(l2);
        v_cond_eval_info = Gen_Eval_Info(l2, v_cond_var, env);
        release(l2);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK944;
        release(l1);
        l1 = ext_lookup(v_e, S_expr);
        add_ref(l1);
        v_expr_eval_code = Gen_Eval_Code(l1, v_curr_slot_var, env);
        release(l1);
        l1 = ext_lookup(v_cond_eval_info, S_eval_code);
        add_ref(l1);
        i0 = 0;
        l4 = ext_lookup(v_cond_eval_info, S_expr);
        add_ref(l4);
        l3 = Is_Bool(l4, env);
        release(l4);
        V0[i0] = Check(l3, env);
        release(l3);
        i0 = i0 + 1;
        l4 = ext_lookup(v_cond_eval_info, S_expr);
        add_ref(l4);
        l3 = Is_True(l4, env);
        release(l4);
        i1 = 0;
        V1[i1] = Increment(v_count_var, env);
        i1 = i1 + 1;
        l5 = make_seq(V1, i1);
        l4 = amp(v_expr_eval_code, l5, env);
        release(l5);
        V0[i0] = Do_If(l3, l4, env);
        release(l4);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        v_new_code = amp(l1, l2, env);
        release(l2);
        release(l1);
        release(v_cond_eval_info);
        release(v_expr_eval_code);
      }
      l1 = amp(v_code, v_new_code, env);
      release(v_code);
      v_code = l1;
      release(v_new_code);
      move_forward(q0);
    }
    l0 = v_code;
    add_ref(l0);
    release(v_code);
    release(v_curr_slot_var);
    release(v_cond_var);
    goto block_943_end;
    block_943_end:;
    return l0;
  }
  
  
  Obj Case_Is_Wf(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_case;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    MapIter m0;
    Obj v_scalar_vars;
    Obj v_p;
    Obj v_vs;
    Obj v_pvs;
    Obj v_arg_count;
  
    v_case = p0;
    v_scalar_vars = p1;
    v_arg_count = p2;
    l3 = ext_lookup(v_case, S_ptrns);
    add_ref(l3);
    l2 = Length(l3, env);
    release(l3);
    l1 = to_obj(are_eq(l2, v_arg_count));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      goto block_945_end;
    }
    v_vs = v_scalar_vars;
    add_ref(v_vs);
    l1 = ext_lookup(v_case, S_ptrns);
    add_ref(l1);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      v_pvs = New_Vars(v_p, env);
      l2 = Disjoint(v_pvs, v_vs, env);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_false))
      {
        l3 = empty_set;
        l2 = Ptrn_Is_Wf(v_p, l3, env);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l0 = S_false;
        release(l1);
        release(v_vs);
        release(v_pvs);
        goto block_945_end;
      }
      if (!is_tag_obj(v_p))
      {
        b1 = false;
        goto block_946_end;
      }
      l3 = get_tag(v_p);
      b1 = are_eq(S_var_ptrn, l3);
      if (!b1)
      {
        goto block_946_end;
      }
      l3 = get_inner_obj(v_p);
      if (!is_ne_map(l3))
      {
        b1 = false;
        goto block_947_end;
      }
      i0 = get_map_size(l3);
      if (!((i0 >= 1) & (i0 <= 1)))
      {
        b1 = false;
        goto block_947_end;
      }
      get_map_iter(m0, l3);
      if (is_out_of_range(m0))
      {
        b1 = false;
        goto block_947_end;
      }
      l4 = get_curr_key(m0);
      if (!are_eq(l4, S_name))
      {
        b1 = false;
        goto block_947_end;
      }
      l4 = get_curr_value(m0);
      b1 = is_var(l4);
      if (!b1)
      {
        goto block_947_end;
      }
      move_forward(m0);
      b1 = is_out_of_range(m0);
      block_947_end:;
      block_946_end:;
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l0 = S_false;
        release(l1);
        release(v_vs);
        release(v_pvs);
        goto block_945_end;
      }
      l2 = amp(v_vs, v_pvs, env);
      release(v_vs);
      v_vs = l2;
      release(v_pvs);
      move_forward(q0);
    }
    release(l1);
    l1 = ext_lookup(v_case, S_expr);
    add_ref(l1);
    l0 = Expr_Is_Wf(l1, v_vs, env);
    release(l1);
    release(v_vs);
    goto block_945_end;
    block_945_end:;
    return l0;
  }
  
  
  Obj Gen_Type_Checking_Expr(Obj p0, Obj p1, Env &env)
  {
    Obj v_obj;
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Obj v_s;
    Obj V0[1];
    Obj v_ts;
  
    v_type = p0;
    v_obj = p1;
    b1 = are_eq(p0, S_type_any);
    if (b1)
    {
      l0 = S_true;
      goto block_948_end;
    }
    b1 = are_eq(p0, S_atom_type);
    if (b1)
    {
      l0 = Is_Symb(v_obj, env);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_949_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_symb_type);
    if (!b1)
    {
      goto block_949_end;
    }
    l1 = get_inner_obj(p0);
    v_s = l1;
    b1 = true;
    block_949_end:;
    if (b1)
    {
      l0 = Is_Eq(v_s, v_obj, env);
      goto block_948_end;
    }
    b1 = are_eq(p0, S_integer);
    if (b1)
    {
      l0 = Is_Int(v_obj, env);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_950_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_low_ints);
    if (!b1)
    {
      goto block_950_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_950_end:;
    if (b1)
    {
      l1 = Is_Int(v_obj, env);
      l3 = Get_Int_Val(v_obj, env);
      l4 = ext_lookup(v_type, S_max);
      add_ref(l4);
      l2 = Is_Le(l3, l4, env);
      release(l4);
      release(l3);
      l0 = And_Then(l1, l2, env);
      release(l2);
      release(l1);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_951_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_high_ints);
    if (!b1)
    {
      goto block_951_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_951_end:;
    if (b1)
    {
      l1 = Is_Int(v_obj, env);
      l3 = Get_Int_Val(v_obj, env);
      l4 = ext_lookup(v_type, S_min);
      add_ref(l4);
      l2 = Is_Ge(l3, l4, env);
      release(l4);
      release(l3);
      l0 = And_Then(l1, l2, env);
      release(l2);
      release(l1);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_952_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_int_range);
    if (!b1)
    {
      goto block_952_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_952_end:;
    if (b1)
    {
      l1 = Is_Int(v_obj, env);
      l3 = Get_Int_Val(v_obj, env);
      l4 = ext_lookup(v_type, S_min);
      add_ref(l4);
      l2 = Is_Ge(l3, l4, env);
      release(l4);
      release(l3);
      l4 = Get_Int_Val(v_obj, env);
      l5 = Max(v_type, env);
      l3 = Is_Le(l4, l5, env);
      release(l5);
      release(l4);
      l0 = And_Then(l1, l2, l3, env);
      release(l3);
      release(l2);
      release(l1);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_953_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ref);
    if (!b1)
    {
      goto block_953_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_953_end:;
    if (b1)
    {
      add_ref(v_ts);
      l1 = make_tagged_obj(S_memb_test, v_ts);
      i0 = 0;
      V0[i0] = v_obj;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = Eval_Bool_Fn(l1, l2, env);
      release(l2);
      release(l1);
      goto block_948_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_954_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_var);
    if (!b1)
    {
      goto block_954_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_954_end:;
    if (b1)
    {
      l0 = S_true;
      goto block_948_end;
    }
    b1 = are_eq(p0, S_empty_seq_type);
    if (b1)
    {
      l1 = Empty_Seq(env);
      l0 = Is_Eq(v_obj, l1, env);
      release(l1);
      goto block_948_end;
    }
    b1 = are_eq(p0, S_empty_set_type);
    if (b1)
    {
      l1 = Empty_Seq(env);
      l0 = Is_Eq(v_obj, l1, env);
      release(l1);
      goto block_948_end;
    }
    b1 = are_eq(p0, S_empty_map_type);
    if (b1)
    {
      l1 = Empty_Map(env);
      l0 = Is_Eq(v_obj, l1, env);
      release(l1);
      goto block_948_end;
    }
    fail();
    block_948_end:;
    return l0;
  }
  
  
  Obj Fndefs_Are_Wf(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    SetIter s0;
    SetIter s1;
    Obj v_fndefs;
    Obj v_s;
    Obj V0[2];
    Obj V1[2];
    Obj v_fd;
    Obj v_sgns;
    Obj v_grouped_fns;
    Obj v_g;
  
    v_fndefs = p0;
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_name;
        V1[i0] = ext_lookup(v_fd, S_name);
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_arity;
        V1[i0] = Arity(v_fd, env);
        i0 = i0 + 1;
        l2 = make_map(V0, V1, i0);
        append(t0, l2);
      }
      move_forward(s0);
    }
    v_sgns = make_set(t0);
    init(t0);
    get_set_iter(s0, v_sgns);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        init(t1);
        get_set_iter(s1, v_fndefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l4 = get_curr_obj(s1);
          v_fd = l4;
          b1 = true;
          if (b1)
          {
            l5 = ext_lookup(v_fd, S_name);
            add_ref(l5);
            l6 = ext_lookup(v_s, S_name);
            add_ref(l6);
            l4 = to_obj(are_eq(l5, l6));
            release(l6);
            release(l5);
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              l5 = Arity(v_fd, env);
              l6 = ext_lookup(v_s, S_arity);
              add_ref(l6);
              l4 = to_obj(are_eq(l5, l6));
              release(l6);
              release(l5);
              if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              add_ref(v_fd);
              append(t1, v_fd);
            }
          }
          move_forward(s1);
        }
        l2 = make_set(t1);
        append(t0, l2);
      }
      move_forward(s0);
    }
    v_grouped_fns = make_set(t0);
    l1 = S_false;
    get_set_iter(s0, v_grouped_fns);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_g = l3;
      b1 = true;
      if (b1)
      {
        l3 = Are_Compatible(v_g, env);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = S_false;
        }
        else
        {
          l3 = S_true;
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l1 = S_true;
          goto block_956_end;
        }
      }
      move_forward(s0);
    }
    block_956_end:;
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      release(v_sgns);
      release(v_grouped_fns);
      goto block_955_end;
    }
    l0 = S_false;
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_fd = l2;
      b1 = true;
      if (b1)
      {
        l2 = Fndef_Is_Wf(v_fd, v_fndefs, env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_true;
          goto block_957_end;
        }
      }
      move_forward(s0);
    }
    block_957_end:;
    if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
    {
      fail();
    }
    if (are_eq(l0, S_true))
    {
      l0 = S_false;
    }
    else
    {
      l0 = S_true;
    }
    release(v_sgns);
    release(v_grouped_fns);
    goto block_955_end;
    block_955_end:;
    return l0;
  }
  
  
  Obj Vars_To_Declare(Obj p0, Env &env)
  {
    Obj v_x;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    MapIter m0;
    Obj v_instrs;
    Obj v_vs;
  
    v_instrs = p0;
    init(t0);
    Obj (*BF959)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD959 = env.C1_eval;
    env.n1_eval = cls_29;
    env.C1_eval = 0;
    Obj (*BF960)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD960 = env.C1_condition;
    env.n1_condition = cls_31;
    env.C1_condition = 0;
    l1 = Select_Expr_Fn(v_instrs, env);
    env.n1_condition = BF960;
    env.C1_condition = BD960;
    env.n1_eval = BF959;
    env.C1_eval = BD959;
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_x = l2;
      b1 = true;
      if (b1)
      {
        b1 = is_clsdef(v_x);
        if (b1)
        {
          goto block_961_end;
        }
        if (!is_tag_obj(v_x))
        {
          b1 = false;
          goto block_962_end;
        }
        l3 = get_tag(v_x);
        b1 = are_eq(S_fn_par, l3);
        if (!b1)
        {
          goto block_962_end;
        }
        l3 = get_inner_obj(v_x);
        b1 = is_nat(l3);
        block_962_end:;
        if (b1)
        {
          goto block_961_end;
        }
        if (!is_tag_obj(v_x))
        {
          b1 = false;
          goto block_963_end;
        }
        l3 = get_tag(v_x);
        b1 = are_eq(S_named_par, l3);
        if (!b1)
        {
          goto block_963_end;
        }
        l3 = get_inner_obj(v_x);
        b1 = is_atom(l3);
        block_963_end:;
        if (b1)
        {
          goto block_961_end;
        }
        if (!is_tag_obj(v_x))
        {
          b1 = false;
          goto block_964_end;
        }
        l3 = get_tag(v_x);
        b1 = are_eq(S_cls_ext_par, l3);
        if (!b1)
        {
          goto block_964_end;
        }
        l3 = get_inner_obj(v_x);
        b1 = is_nat(l3);
        block_964_end:;
        if (b1)
        {
          goto block_961_end;
        }
        if (!is_tag_obj(v_x))
        {
          b1 = false;
          goto block_965_end;
        }
        l3 = get_tag(v_x);
        b1 = are_eq(S_evar, l3);
        if (!b1)
        {
          goto block_965_end;
        }
        l3 = get_inner_obj(v_x);
        if (!is_ne_map(l3))
        {
          b1 = false;
          goto block_966_end;
        }
        i0 = get_map_size(l3);
        if (!((i0 >= 2) & (i0 <= 2)))
        {
          b1 = false;
          goto block_966_end;
        }
        get_map_iter(m0, l3);
        if (is_out_of_range(m0))
        {
          b1 = false;
          goto block_966_end;
        }
        l4 = get_curr_key(m0);
        if (!are_eq(l4, S_id))
        {
          b1 = false;
          goto block_966_end;
        }
        l4 = get_curr_value(m0);
        b1 = is_nat(l4);
        if (!b1)
        {
          goto block_966_end;
        }
        move_forward(m0);
        if (is_out_of_range(m0))
        {
          b1 = false;
          goto block_966_end;
        }
        l4 = get_curr_key(m0);
        if (!are_eq(l4, S_idx))
        {
          b1 = false;
          goto block_966_end;
        }
        l4 = get_curr_value(m0);
        b1 = is_nat(l4);
        if (b1)
        {
          goto block_967_end;
        }
        b1 = is_intvar(l4);
        if (b1)
        {
          goto block_967_end;
        }
        block_967_end:;
        if (!b1)
        {
          goto block_966_end;
        }
        move_forward(m0);
        b1 = is_out_of_range(m0);
        block_966_end:;
        block_965_end:;
        if (b1)
        {
          goto block_961_end;
        }
        block_961_end:;
        l2 = to_obj(b1);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          add_ref(v_x);
          append(t0, v_x);
        }
      }
      move_forward(s0);
    }
    release(l1);
    v_vs = make_set(t0);
    l0 = v_vs;
    add_ref(l0);
    release(v_vs);
    goto block_958_end;
    block_958_end:;
    return l0;
  }
  
  
  Obj Gen_C_Decl(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    int i0;
    int i1;
    Obj v_id;
    Obj V0[8];
    Obj V1[11];
    Obj v_cd;
    Obj v_par_list;
  
    v_cd = p0;
    v_id = p1;
    l4 = ext_lookup(v_cd, S_arity);
    add_ref(l4);
    i0 = 0;
    V0[i0] = to_obj(79);
    i0 = i0 + 1;
    V0[i0] = to_obj(98);
    i0 = i0 + 1;
    V0[i0] = to_obj(106);
    i0 = i0 + 1;
    l6 = make_seq(V0, i0);
    l5 = make_tagged_obj(S_string, l6);
    l3 = Rep_Seq(l4, l5, env);
    release(l5);
    release(l4);
    i0 = 0;
    i1 = 0;
    V1[i1] = to_obj(99);
    i1 = i1 + 1;
    V1[i1] = to_obj(111);
    i1 = i1 + 1;
    V1[i1] = to_obj(110);
    i1 = i1 + 1;
    V1[i1] = to_obj(115);
    i1 = i1 + 1;
    V1[i1] = to_obj(116);
    i1 = i1 + 1;
    V1[i1] = to_obj(32);
    i1 = i1 + 1;
    V1[i1] = to_obj(79);
    i1 = i1 + 1;
    V1[i1] = to_obj(98);
    i1 = i1 + 1;
    V1[i1] = to_obj(106);
    i1 = i1 + 1;
    V1[i1] = to_obj(32);
    i1 = i1 + 1;
    V1[i1] = to_obj(42);
    i1 = i1 + 1;
    l5 = make_seq(V1, i1);
    V0[i0] = make_tagged_obj(S_string, l5);
    i0 = i0 + 1;
    i1 = 0;
    V1[i1] = to_obj(69);
    i1 = i1 + 1;
    V1[i1] = to_obj(110);
    i1 = i1 + 1;
    V1[i1] = to_obj(118);
    i1 = i1 + 1;
    V1[i1] = to_obj(32);
    i1 = i1 + 1;
    V1[i1] = to_obj(38);
    i1 = i1 + 1;
    l5 = make_seq(V1, i1);
    V0[i0] = make_tagged_obj(S_string, l5);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    i0 = 0;
    V0[i0] = to_obj(44);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    l4 = make_seq(V0, i0);
    l3 = make_tagged_obj(S_string, l4);
    l1 = Intermix(l2, l3, env);
    release(l3);
    release(l2);
    v_par_list = Append(l1, env);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(79);
    i0 = i0 + 1;
    V0[i0] = to_obj(98);
    i0 = i0 + 1;
    V0[i0] = to_obj(106);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(95);
    i0 = i0 + 1;
    l5 = make_seq(V0, i0);
    l4 = make_tagged_obj(S_string, l5);
    l5 = To_Str(v_id, env);
    l3 = amp(l4, l5, env);
    release(l5);
    release(l4);
    i0 = 0;
    V0[i0] = to_obj(40);
    i0 = i0 + 1;
    l5 = make_seq(V0, i0);
    l4 = make_tagged_obj(S_string, l5);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    l1 = amp(l2, v_par_list, env);
    release(l2);
    i0 = 0;
    V0[i0] = to_obj(41);
    i0 = i0 + 1;
    V0[i0] = to_obj(59);
    i0 = i0 + 1;
    l3 = make_seq(V0, i0);
    l2 = make_tagged_obj(S_string, l3);
    l0 = amp(l1, l2, env);
    release(l2);
    release(l1);
    release(v_par_list);
    goto block_968_end;
    block_968_end:;
    return l0;
  }
  
  
  Obj Are_Disjoint(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l2;
    Obj l3;
    bool b1;
    SetIter s0;
    Obj v_p;
    Obj v_ps;
    Obj v_ps1;
    Obj v_ps2;
  
    b1 = is_objpartset(p0);
    if (b1)
    {
      v_ps = p0;
    }
    if (b1)
    {
      b1 = are_eq(S_symbols, p1);
      if (b1)
      {
        goto block_970_end;
      }
      b1 = are_eq(S_tagged_objs, p1);
      if (b1)
      {
        goto block_970_end;
      }
      b1 = is_objpart(p1);
      if (b1)
      {
        goto block_970_end;
      }
      block_970_end:;
      if (b1)
      {
        v_p = p1;
      }
      if (b1)
      {
        b1 = true;
        if (b1)
        {
          b1 = are_eq(p1, S_symbols);
          if (b1)
          {
            l0 = S_false;
            get_set_iter(s0, v_ps);
            for ( ; ; )
            {
              if (is_out_of_range(s0))
              {
                break;
              }
              l2 = get_curr_obj(s0);
              b1 = are_eq(l2, S_symbols);
              if (b1)
              {
                l0 = S_true;
                goto block_972_end;
              }
              move_forward(s0);
            }
            get_set_iter(s0, v_ps);
            for ( ; ; )
            {
              if (is_out_of_range(s0))
              {
                break;
              }
              l2 = get_curr_obj(s0);
              if (!is_tag_obj(l2))
              {
                b1 = false;
                goto block_973_end;
              }
              l3 = get_tag(l2);
              b1 = are_eq(l3, S_symbol);
              if (!b1)
              {
                goto block_973_end;
              }
              l3 = get_inner_obj(l2);
              b1 = true;
              block_973_end:;
              if (b1)
              {
                l0 = S_true;
                goto block_972_end;
              }
              move_forward(s0);
            }
            block_972_end:;
            if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
            {
              fail();
            }
            if (are_eq(l0, S_true))
            {
              l0 = S_false;
            }
            else
            {
              l0 = S_true;
            }
            goto block_971_end;
          }
        }
        b1 = true;
        if (b1)
        {
          b1 = are_eq(p1, S_tagged_objs);
          if (b1)
          {
            l0 = S_false;
            get_set_iter(s0, v_ps);
            for ( ; ; )
            {
              if (is_out_of_range(s0))
              {
                break;
              }
              l2 = get_curr_obj(s0);
              b1 = are_eq(l2, S_tagged_objs);
              if (b1)
              {
                l0 = S_true;
                goto block_974_end;
              }
              move_forward(s0);
            }
            get_set_iter(s0, v_ps);
            for ( ; ; )
            {
              if (is_out_of_range(s0))
              {
                break;
              }
              l2 = get_curr_obj(s0);
              if (!is_tag_obj(l2))
              {
                b1 = false;
                goto block_975_end;
              }
              l3 = get_tag(l2);
              b1 = are_eq(l3, S_tagged_obj);
              if (!b1)
              {
                goto block_975_end;
              }
              l3 = get_inner_obj(l2);
              b1 = true;
              block_975_end:;
              if (b1)
              {
                l0 = S_true;
                goto block_974_end;
              }
              move_forward(s0);
            }
            block_974_end:;
            if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
            {
              fail();
            }
            if (are_eq(l0, S_true))
            {
              l0 = S_false;
            }
            else
            {
              l0 = S_true;
            }
            goto block_971_end;
          }
        }
        b1 = true;
        if (b1)
        {
          b1 = true;
          if (b1)
          {
            l0 = Includes(v_ps, v_p, env);
            if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
            {
              fail();
            }
            if (are_eq(l0, S_true))
            {
              l0 = S_false;
            }
            else
            {
              l0 = S_true;
            }
            goto block_971_end;
          }
        }
        fail();
        block_971_end:;
        goto block_969_end;
      }
    }
    b1 = is_objpartset(p0);
    if (b1)
    {
      v_ps1 = p0;
    }
    if (b1)
    {
      b1 = is_objpartset(p1);
      if (b1)
      {
        v_ps2 = p1;
      }
      if (b1)
      {
        l0 = S_false;
        get_set_iter(s0, v_ps1);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          v_p = l2;
          b1 = true;
          if (b1)
          {
            l2 = Are_Disjoint(v_ps2, v_p, env);
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l2 = S_false;
            }
            else
            {
              l2 = S_true;
            }
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_true;
              goto block_976_end;
            }
          }
          move_forward(s0);
        }
        block_976_end:;
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        goto block_969_end;
      }
    }
    fail();
    block_969_end:;
    return l0;
  }
  
  
  Obj Inst_Req_Par_Types(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l4;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    MapIter m0;
    Obj v_tdefs;
    Obj v_fndefs;
    Obj v_t;
    Obj v_s;
    Obj v_d;
    Obj v_decls;
    Obj v_par_tdefs;
    Obj v_ublocks;
    Obj v_symbs_to_inst;
    Obj v_inst_symbs_so_far;
    Obj v_inst_par_tdefs;
    Obj v_new_insts;
  
    v_prg = p0;
    l1 = Untag(v_prg, env);
    v_decls = Set(l1, env);
    release(l1);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_syntypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synpartypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_par_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synfndef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_fndefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synusingblock(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_ublocks = make_set(t0);
    l2 = amp(v_fndefs, v_ublocks, env);
    l1 = amp(l2, v_tdefs, env);
    release(l2);
    v_symbs_to_inst = Get_Type_Symbols_To_Instantiate(l1, env);
    release(l1);
    v_inst_symbs_so_far = empty_set;
    v_inst_par_tdefs = empty_map;
    for ( ; ; )
    {
      l2 = empty_set;
      l1 = to_obj(are_eq(v_symbs_to_inst, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      init(t0);
      init(t1);
      get_set_iter(s0, v_symbs_to_inst);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_s = l2;
        b1 = true;
        if (b1)
        {
          add_ref(v_s);
          append(t0, v_s);
          l2 = Inst_Par_Type(v_s, v_par_tdefs, env);
          append(t1, l2);
        }
        move_forward(s0);
      }
      v_new_insts = make_map(t0, t1);
      l1 = amp(v_inst_symbs_so_far, v_symbs_to_inst, env);
      release(v_inst_symbs_so_far);
      v_inst_symbs_so_far = l1;
      l1 = amp(v_inst_par_tdefs, v_new_insts, env);
      release(v_inst_par_tdefs);
      v_inst_par_tdefs = l1;
      release(v_symbs_to_inst);
      init(t0);
      get_map_iter(m0, v_new_insts);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l4 = get_curr_key(m0);
        v_s = l4;
        b1 = true;
        if (b1)
        {
          l4 = get_curr_value(m0);
          v_t = l4;
          b1 = true;
          if (b1)
          {
            add_ref(v_t);
            append(t0, v_t);
          }
        }
        move_forward(m0);
      }
      l2 = make_set(t0);
      l1 = Get_Type_Symbols_To_Instantiate(l2, env);
      release(l2);
      v_symbs_to_inst = minus(l1, v_inst_symbs_so_far, env);
      release(l1);
      release(v_new_insts);
    }
    l0 = v_inst_par_tdefs;
    add_ref(l0);
    release(v_tdefs);
    release(v_fndefs);
    release(v_decls);
    release(v_par_tdefs);
    release(v_ublocks);
    release(v_symbs_to_inst);
    release(v_inst_symbs_so_far);
    release(v_inst_par_tdefs);
    goto block_977_end;
    block_977_end:;
    return l0;
  }
  
  
  Obj Gen_Eval_Info(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj v_var;
    Obj v_exprs;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_eval_code;
    Obj v_cleanup_code;
    Obj v_add_ref_eval_code;
    Obj v_next_var_id;
    Obj v_e;
    Obj V0[5];
    Obj V1[5];
    Obj v_info;
    Obj v_res_exprs;
  
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_979_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_979_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_expr(l1);
      if (!b1)
      {
        goto block_979_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_979_end:;
    if (b1)
    {
      v_exprs = p0;
    }
    if (b1)
    {
      v_eval_code = empty_seq;
      v_cleanup_code = empty_seq;
      v_add_ref_eval_code = empty_seq;
      v_res_exprs = empty_seq;
      v_next_var_id = env.n_next_obj_var_id;
      add_ref(v_next_var_id);
      get_seq_iter(q0, v_exprs);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_e = get_curr_obj(q0);
        Obj BK981 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = v_next_var_id;
        add_ref(env.n_next_obj_var_id);
        v_info = Gen_Eval_Info(v_e, env);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK981;
        l2 = ext_lookup(v_info, S_eval_code);
        add_ref(l2);
        l1 = amp(v_eval_code, l2, env);
        release(l2);
        release(v_eval_code);
        v_eval_code = l1;
        l2 = ext_lookup(v_info, S_cleanup_code);
        add_ref(l2);
        l1 = amp(l2, v_cleanup_code, env);
        release(l2);
        release(v_cleanup_code);
        v_cleanup_code = l1;
        l2 = ext_lookup(v_info, S_add_ref_eval_code);
        add_ref(l2);
        l1 = amp(v_add_ref_eval_code, l2, env);
        release(l2);
        release(v_add_ref_eval_code);
        v_add_ref_eval_code = l1;
        i0 = 0;
        V0[i0] = ext_lookup(v_info, S_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = amp(v_res_exprs, l2, env);
        release(l2);
        release(v_res_exprs);
        v_res_exprs = l1;
        release(v_next_var_id);
        v_next_var_id = ext_lookup(v_info, S_next_var_id);
        add_ref(v_next_var_id);
        release(v_info);
        move_forward(q0);
      }
      i0 = 0;
      V0[i0] = S_eval_code;
      V1[i0] = v_eval_code;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_cleanup_code;
      V1[i0] = v_cleanup_code;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_add_ref_eval_code;
      V1[i0] = v_add_ref_eval_code;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_next_var_id;
      V1[i0] = v_next_var_id;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_exprs;
      V1[i0] = v_res_exprs;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      release(v_eval_code);
      release(v_cleanup_code);
      release(v_add_ref_eval_code);
      release(v_next_var_id);
      release(v_res_exprs);
      goto block_980_end;
      block_980_end:;
      goto block_978_end;
    }
    b1 = is_expr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      v_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK983 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      v_info = Gen_Eval_Info(v_expr, v_var, env);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK983;
      release(l1);
      i0 = 0;
      V0[i0] = S_next_var_id;
      l3 = ext_lookup(v_info, S_var_used);
      add_ref(l3);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l2 = to_obj(1);
      }
      else
      {
        l2 = to_obj(0);
      }
      V1[i0] = plus(env.n_next_obj_var_id, l2, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = amp(v_info, l1, env);
      release(l1);
      release(v_var);
      release(v_info);
      goto block_982_end;
      block_982_end:;
      goto block_978_end;
    }
    fail();
    block_978_end:;
    return l0;
  }
  
  
  Obj Special_Subexprs(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    bool b1;
    int i0;
    Obj V0[3];
  
    v_expr = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_985_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_985_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_985_end:;
    if (b1)
    {
      i0 = 0;
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_sel_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_986_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_986_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_986_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_sel_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_987_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_987_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_987_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_key_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_value_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_sel_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_988_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_comp);
    if (!b1)
    {
      goto block_988_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_988_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_sel_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_989_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_989_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_989_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_sel_expr);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_990_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_990_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_990_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_984_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = empty_set;
      goto block_984_end;
    }
    fail();
    block_984_end:;
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Tagged_Obj_Or_Symbol(Obj p0, Obj p1, Env &env)
  {
    Obj v_obj;
    Obj v_offset;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Obj v_res;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
    Obj v_is_tuple;
  
    v_tokens = p0;
    v_offset = p1;
    l2 = Length(v_tokens, env);
    l1 = lower(v_offset, l2, env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l2 = brackets(v_tokens, v_offset, env);
      if (!is_tag_obj(l2))
      {
        b1 = false;
        goto block_992_end;
      }
      l3 = get_tag(l2);
      b1 = are_eq(S_symbol, l3);
      if (!b1)
      {
        goto block_992_end;
      }
      l3 = get_inner_obj(l2);
      b1 = is_atom(l3);
      block_992_end:;
      l1 = to_obj(b1);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    l3 = plus(v_offset, to_obj(1), env);
    l2 = At(v_tokens, l3, S_nil, env);
    release(l3);
    l3 = Left_Parenthesis(env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      i0 = 0;
      V0[i0] = S_offset;
      V1[i0] = plus(v_offset, to_obj(1), env);
      i0 = i0 + 1;
      V0[i0] = S_obj;
      l1 = brackets(v_tokens, v_offset, env);
      V1[i0] = Untag(l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      goto block_991_end;
    }
    l1 = plus(v_offset, to_obj(1), env);
    v_res = Parse_Obj__Parse_Map_Or_Tuple(v_tokens, l1, env);
    release(l1);
    b1 = is_parseerror(v_res);
    v_is_tuple = to_obj(b1);
    if (!(are_eq(v_is_tuple, S_true) | are_eq(v_is_tuple, S_false)))
    {
      fail();
    }
    if (are_eq(v_is_tuple, S_true))
    {
      v_is_tuple = S_false;
    }
    else
    {
      v_is_tuple = S_true;
    }
    l1 = v_is_tuple;
    add_ref(l1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      release(v_res);
      l1 = plus(v_offset, to_obj(2), env);
      v_res = Parse_Obj__Parse_Obj(v_tokens, l1, env);
      release(l1);
      b1 = is_parseerror(v_res);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_res;
        add_ref(l0);
        release(v_res);
        release(v_is_tuple);
        goto block_991_end;
      }
      l3 = ext_lookup(v_res, S_offset);
      add_ref(l3);
      l2 = At(v_tokens, l3, S_nil, env);
      release(l3);
      l3 = Right_Parenthesis(env);
      l1 = to_obj(are_eq(l2, l3));
      release(l3);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = ext_lookup(v_res, S_offset);
        add_ref(l1);
        l0 = Parse_Obj__Error(l1, env);
        release(l1);
        release(v_res);
        release(v_is_tuple);
        goto block_991_end;
      }
    }
    l2 = brackets(v_tokens, v_offset, env);
    l1 = Untag(l2, env);
    release(l2);
    l2 = ext_lookup(v_res, S_obj);
    add_ref(l2);
    v_obj = make_tagged_obj(l1, l2);
    i0 = 0;
    V0[i0] = S_obj;
    V1[i0] = v_obj;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_offset;
    l1 = ext_lookup(v_res, S_offset);
    add_ref(l1);
    if (!(are_eq(v_is_tuple, S_true) | are_eq(v_is_tuple, S_false)))
    {
      fail();
    }
    if (are_eq(v_is_tuple, S_true))
    {
      l2 = to_obj(0);
    }
    else
    {
      l2 = to_obj(1);
    }
    V1[i0] = plus(l1, l2, env);
    release(l2);
    release(l1);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_obj);
    release(v_res);
    release(v_is_tuple);
    goto block_991_end;
    block_991_end:;
    return l0;
  }
  
  
  Obj amp(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    Stream t0;
    Stream t1;
    SetIter s0;
    SeqIter q0;
    MapIter m0;
    Obj v_map1;
    Obj v_map2;
    Obj v_s1;
    Obj v_s2;
    Obj v_k;
    Obj v_ks1;
    Obj v_ks2;
    Obj v_v;
  
    if (are_eq(p0, empty_map))
    {
      b1 = true;
      goto block_994_end;
    }
    if (!is_ne_map(p0))
    {
      b1 = false;
      goto block_994_end;
    }
    get_map_iter(m0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l1 = get_curr_key(m0);
      b1 = true;
      if (!b1)
      {
        goto block_994_end;
      }
      l1 = get_curr_value(m0);
      b1 = true;
      if (!b1)
      {
        goto block_994_end;
      }
      move_forward(m0);
    }
    b1 = true;
    block_994_end:;
    if (b1)
    {
      v_map1 = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_map))
      {
        b1 = true;
        goto block_995_end;
      }
      if (!is_ne_map(p1))
      {
        b1 = false;
        goto block_995_end;
      }
      get_map_iter(m0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l1 = get_curr_key(m0);
        b1 = true;
        if (!b1)
        {
          goto block_995_end;
        }
        l1 = get_curr_value(m0);
        b1 = true;
        if (!b1)
        {
          goto block_995_end;
        }
        move_forward(m0);
      }
      b1 = true;
      block_995_end:;
      if (b1)
      {
        v_map2 = p1;
      }
      if (b1)
      {
        v_ks1 = Keys(v_map1, env);
        v_ks2 = Keys(v_map2, env);
        l3 = Intersection(v_ks1, v_ks2, env);
        l2 = Rand_Sort(l3, env);
        release(l3);
        get_seq_iter(q0, l2);
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_k = get_curr_obj(q0);
          l4 = brackets(v_map1, v_k, env);
          l5 = brackets(v_map2, v_k, env);
          l3 = to_obj(are_eq(l4, l5));
          release(l5);
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l1 = S_false;
            release(l2);
            release(v_ks1);
            release(v_ks2);
            goto block_997_end;
          }
          move_forward(q0);
        }
        release(l2);
        l1 = S_true;
        release(v_ks1);
        release(v_ks2);
        goto block_997_end;
        block_997_end:;
        if (!are_eq(l1, S_true))
        {
          fail();
        }
        init(t0);
        init(t1);
        get_map_iter(m0, v_map1);
        for ( ; ; )
        {
          if (is_out_of_range(m0))
          {
            break;
          }
          l2 = get_curr_key(m0);
          v_k = l2;
          b1 = true;
          if (b1)
          {
            l2 = get_curr_value(m0);
            v_v = l2;
            b1 = true;
            if (b1)
            {
              add_ref(v_k);
              append(t0, v_k);
              add_ref(v_v);
              append(t1, v_v);
            }
          }
          move_forward(m0);
        }
        get_map_iter(m0, v_map2);
        for ( ; ; )
        {
          if (is_out_of_range(m0))
          {
            break;
          }
          l2 = get_curr_key(m0);
          v_k = l2;
          b1 = true;
          if (b1)
          {
            l2 = get_curr_value(m0);
            v_v = l2;
            b1 = true;
            if (b1)
            {
              add_ref(v_k);
              append(t0, v_k);
              add_ref(v_v);
              append(t1, v_v);
            }
          }
          move_forward(m0);
        }
        l0 = make_map(t0, t1);
        goto block_996_end;
        block_996_end:;
        goto block_993_end;
      }
    }
    if (are_eq(p0, empty_set))
    {
      b1 = true;
      goto block_998_end;
    }
    if (!is_ne_set(p0))
    {
      b1 = false;
      goto block_998_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b1 = true;
      if (!b1)
      {
        goto block_998_end;
      }
      move_forward(s0);
    }
    b1 = true;
    block_998_end:;
    if (b1)
    {
      v_s1 = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_999_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_999_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = true;
        if (!b1)
        {
          goto block_999_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_999_end:;
      if (b1)
      {
        v_s2 = p1;
      }
      if (b1)
      {
        l0 = Union(v_s1, v_s2, env);
        goto block_993_end;
      }
    }
    b1 = is_string(p0);
    if (b1)
    {
      v_s1 = p0;
    }
    if (b1)
    {
      b1 = is_string(p1);
      if (b1)
      {
        v_s2 = p1;
      }
      if (b1)
      {
        l2 = Untag(v_s1, env);
        l3 = Untag(v_s2, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l0 = String(l1, env);
        release(l1);
        goto block_993_end;
      }
    }
    b1 = is_seq(p0);
    if (b1)
    {
      v_s1 = p0;
    }
    if (b1)
    {
      b1 = is_seq(p1);
      if (b1)
      {
        v_s2 = p1;
      }
      if (b1)
      {
        l0 = join_seqs(v_s1, v_s2);
        goto block_993_end;
      }
    }
    fail();
    block_993_end:;
    return l0;
  }
  
  
  Obj Rem_Syntax(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SetIter s1;
    SetIter s2;
    Obj v_tdefs;
    Obj v_fndefs;
    Obj V0[2];
    Obj V1[2];
    Obj v_d;
    Obj v_fd;
    Obj v_sgns;
    Obj v_decls;
    Obj v_par_tdefs;
    Obj v_ublocks;
    Obj v_ub;
    Obj v_inst_tdefs;
    Obj v_norm_prg;
    Obj v_desugared_fndefs;
    Obj v_desugared_block_fndefs;
  
    v_prg = p0;
    Obj (*BF1001)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD1001 = env.C1_condition;
    env.n1_condition = cls_15;
    env.C1_condition = 0;
    Obj (*BF1002)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD1002 = env.C1_eval;
    env.n1_eval = cls_12;
    env.C1_eval = 0;
    v_norm_prg = Replace_Expr_Fn(v_prg, env);
    env.n1_eval = BF1002;
    env.C1_eval = BD1002;
    env.n1_condition = BF1001;
    env.C1_condition = BD1001;
    l1 = Untag(v_norm_prg, env);
    v_decls = Set(l1, env);
    release(l1);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_syntypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synpartypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_par_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synfndef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_fndefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synusingblock(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_ublocks = make_set(t0);
    v_inst_tdefs = Create_Type_Map(v_norm_prg, env);
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_fd = l3;
      b1 = true;
      if (b1)
      {
        l4 = empty_set;
        l3 = Syn_Fndef_To_Fndefs(v_fd, l4, env);
        release(l4);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    v_desugared_fndefs = Union(l1, env);
    release(l1);
    init(t0);
    get_set_iter(s0, v_ublocks);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_ub = l3;
      b1 = true;
      if (b1)
      {
        l4 = ext_lookup(v_ub, S_fn_defs);
        add_ref(l4);
        l3 = Set(l4, env);
        release(l4);
        get_set_iter(s1, l3);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l4 = get_curr_obj(s1);
          v_fd = l4;
          b1 = true;
          if (b1)
          {
            i0 = 0;
            l5 = ext_lookup(v_ub, S_signatures);
            add_ref(l5);
            V0[i0] = Set(l5, env);
            release(l5);
            i0 = i0 + 1;
            l4 = make_set(V0, i0);
            get_set_iter(s2, l4);
            for ( ; ; )
            {
              if (is_out_of_range(s2))
              {
                break;
              }
              l5 = get_curr_obj(s2);
              v_sgns = l5;
              b1 = true;
              if (b1)
              {
                l5 = Syn_Fndef_To_Fndefs(v_fd, v_sgns, env);
                append(t0, l5);
              }
              move_forward(s2);
            }
            release(l4);
          }
          move_forward(s1);
        }
        release(l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    v_desugared_block_fndefs = Union(l1, env);
    release(l1);
    i0 = 0;
    V0[i0] = S_tdefs;
    V1[i0] = v_inst_tdefs;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_fndefs;
    V1[i0] = amp(v_desugared_fndefs, v_desugared_block_fndefs, env);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_program, l1);
    release(v_tdefs);
    release(v_fndefs);
    release(v_decls);
    release(v_par_tdefs);
    release(v_ublocks);
    release(v_inst_tdefs);
    release(v_norm_prg);
    release(v_desugared_fndefs);
    release(v_desugared_block_fndefs);
    goto block_1000_end;
    block_1000_end:;
    return l0;
  }
  
  
  Obj Extern_Vars__Special_Cases(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SeqIter q0;
    SeqIter q1;
    MapIter m0;
    Obj v_e;
    Obj v_ss;
    Obj v_k;
    Obj V0[1];
    Obj v_p;
    Obj v_vs;
    Obj v_c;
    Obj v_pvs;
  
    v_expr = p0;
    b1 = is_var(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_expr;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1004_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fn_call);
    if (!b1)
    {
      goto block_1004_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1004_end:;
    if (b1)
    {
      init(t0);
      l2 = ext_lookup(v_expr, S_named_params);
      add_ref(l2);
      get_map_iter(m0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l3 = get_curr_key(m0);
        v_k = l3;
        b1 = true;
        if (b1)
        {
          l3 = get_curr_value(m0);
          v_e = l3;
          b1 = true;
          if (b1)
          {
            l3 = Extern_Vars(v_e, env);
            append(t0, l3);
          }
        }
        move_forward(m0);
      }
      release(l2);
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1005_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_1005_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1005_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Extern_Vars(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1006_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_1006_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1006_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Extern_Vars(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1007_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_1007_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1007_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Extern_Vars(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1008_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_do_expr);
    if (!b1)
    {
      goto block_1008_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1008_end:;
    if (b1)
    {
      l0 = Extern_Vars(v_ss, env);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1009_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_1009_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1009_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = Extern_Vars(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1010_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_1010_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1010_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = Extern_Vars(l1, env);
      release(l1);
      goto block_1003_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1011_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_match_expr);
    if (!b1)
    {
      goto block_1011_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1011_end:;
    if (b1)
    {
      v_vs = empty_set;
      l1 = ext_lookup(v_expr, S_cases);
      add_ref(l1);
      get_seq_iter(q0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_c = get_curr_obj(q0);
        l3 = ext_lookup(v_c, S_ptrns);
        add_ref(l3);
        l2 = make_array(get_seq_len(l3), S_nil);
        get_seq_iter(q1, l3);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q1))
          {
            break;
          }
          v_p = get_curr_obj(q1);
          l4 = New_Vars(v_p, env);
          set_at(l2, i0, l4);
          move_forward(q1);
          i0 = i0 + 1;
        }
        release(l3);
        v_pvs = Seq_Union(l2, env);
        release(l2);
        l5 = ext_lookup(v_c, S_expr);
        add_ref(l5);
        l4 = Extern_Vars(l5, env);
        release(l5);
        l3 = minus(l4, v_pvs, env);
        release(l4);
        l2 = amp(v_vs, l3, env);
        release(l3);
        release(v_vs);
        v_vs = l2;
        release(v_pvs);
        move_forward(q0);
      }
      release(l1);
      l0 = v_vs;
      add_ref(l0);
      release(v_vs);
      goto block_1012_end;
      block_1012_end:;
      goto block_1003_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = empty_set;
      goto block_1003_end;
    }
    fail();
    block_1003_end:;
    return l0;
  }
  
  
  Obj Simplify__Make(Obj p0, Obj p1, Obj p2, Obj p3, Obj p4, Env &env)
  {
    Obj v_expr;
    Obj v_src_expr;
    Obj v_sel_expr;
    Obj v_ptrn;
    Obj v_cond_expr;
    Obj l0;
    Obj l1;
    int i0;
    int i1;
    int i2;
    int i3;
    Obj V0[3];
    Obj V2[2];
    Obj V1[3];
    Obj V3[2];
    Obj V5[1];
    Obj V4[2];
    Obj v_nps;
    Obj v_fn_name;
    Obj v_cond_cls;
    Obj v_eval_expr;
    Obj v_eval_cls;
  
    v_fn_name = p0;
    v_src_expr = p1;
    v_ptrn = p2;
    v_sel_expr = p3;
    v_expr = p4;
    i0 = 0;
    V0[i0] = S_exprs;
    i1 = 0;
    V2[i1] = Fn_Par(to_obj(0), env);
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    V0[i0] = S_cases;
    i1 = 0;
    i2 = 0;
    V3[i2] = S_expr;
    V4[i2] = v_sel_expr;
    add_ref(V4[i2]);
    i2 = i2 + 1;
    V3[i2] = S_ptrns;
    i3 = 0;
    V5[i3] = v_ptrn;
    add_ref(V5[i3]);
    i3 = i3 + 1;
    V4[i2] = make_seq(V5, i3);
    i2 = i2 + 1;
    V2[i1] = make_map(V3, V4, i2);
    i1 = i1 + 1;
    i2 = 0;
    V3[i2] = S_ptrns;
    i3 = 0;
    V5[i3] = make_tagged_obj(S_type_ptrn, S_type_any);
    i3 = i3 + 1;
    V4[i2] = make_seq(V5, i3);
    i2 = i2 + 1;
    V3[i2] = S_expr;
    V4[i2] = Obj_False(env);
    i2 = i2 + 1;
    V2[i1] = make_map(V3, V4, i2);
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_cond_expr = make_tagged_obj(S_match_expr, l1);
    i0 = 0;
    V0[i0] = S_params;
    i1 = 0;
    V2[i1] = S_nil;
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    V0[i0] = S_expr;
    V1[i0] = v_cond_expr;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_cond_cls = make_tagged_obj(S_cls_expr, l1);
    i0 = 0;
    V0[i0] = S_exprs;
    i1 = 0;
    V2[i1] = Fn_Par(to_obj(0), env);
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    V0[i0] = S_cases;
    i1 = 0;
    i2 = 0;
    V3[i2] = S_expr;
    V4[i2] = v_expr;
    add_ref(V4[i2]);
    i2 = i2 + 1;
    V3[i2] = S_ptrns;
    i3 = 0;
    V5[i3] = v_ptrn;
    add_ref(V5[i3]);
    i3 = i3 + 1;
    V4[i2] = make_seq(V5, i3);
    i2 = i2 + 1;
    V2[i1] = make_map(V3, V4, i2);
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_eval_expr = make_tagged_obj(S_match_expr, l1);
    i0 = 0;
    V0[i0] = S_params;
    i1 = 0;
    V2[i1] = S_nil;
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    V0[i0] = S_expr;
    V1[i0] = v_eval_expr;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    v_eval_cls = make_tagged_obj(S_cls_expr, l1);
    i0 = 0;
    V0[i0] = make_tagged_obj(S_named_par, S_condition);
    V1[i0] = v_cond_cls;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = make_tagged_obj(S_named_par, S_eval);
    V1[i0] = v_eval_cls;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    v_nps = make_map(V0, V1, i0);
    i0 = 0;
    V0[i0] = S_params;
    i1 = 0;
    V2[i1] = v_src_expr;
    add_ref(V2[i1]);
    i1 = i1 + 1;
    V1[i0] = make_seq(V2, i1);
    i0 = i0 + 1;
    V0[i0] = S_named_params;
    V1[i0] = v_nps;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_name;
    add_ref(v_fn_name);
    V1[i0] = make_tagged_obj(S_fn_symbol, v_fn_name);
    i0 = i0 + 1;
    l1 = make_map(V0, V1, i0);
    l0 = make_tagged_obj(S_fn_call, l1);
    release(v_cond_expr);
    release(v_nps);
    release(v_cond_cls);
    release(v_eval_expr);
    release(v_eval_cls);
    goto block_1013_end;
    block_1013_end:;
    return l0;
  }
  
  
  Obj Flow_Control_Can_Jump_Out(Obj p0, Obj p1, Env &env)
  {
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l3;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_s;
    Obj v_ss;
    Obj v_stmt;
    Obj v_inside_loop;
  
    b1 = is_statement(p0);
    if (b1)
    {
      v_stmt = p0;
    }
    if (b1)
    {
      b1 = is_bool(p1);
      if (b1)
      {
        v_inside_loop = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1016_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_assignment_stmt);
        if (!b1)
        {
          goto block_1016_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1016_end:;
        if (b1)
        {
          l0 = S_false;
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1017_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_return_stmt);
        if (!b1)
        {
          goto block_1017_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1017_end:;
        if (b1)
        {
          l0 = S_true;
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1018_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_if_stmt);
        if (!b1)
        {
          goto block_1018_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1018_end:;
        if (b1)
        {
          l1 = ext_lookup(v_stmt, S_body);
          add_ref(l1);
          l0 = Flow_Control_Can_Jump_Out(l1, v_inside_loop, env);
          release(l1);
          if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
          {
            fail();
          }
          if (are_eq(l0, S_false))
          {
            l1 = ext_lookup(v_stmt, S_else);
            add_ref(l1);
            l0 = Flow_Control_Can_Jump_Out(l1, v_inside_loop, env);
            release(l1);
            if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
            {
              fail();
            }
          }
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1019_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_loop_stmt);
        if (!b1)
        {
          goto block_1019_end;
        }
        l1 = get_inner_obj(p0);
        v_ss = l1;
        b1 = true;
        block_1019_end:;
        if (b1)
        {
          l0 = Flow_Control_Can_Jump_Out(v_ss, S_true, env);
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1020_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_foreach_stmt);
        if (!b1)
        {
          goto block_1020_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1020_end:;
        if (b1)
        {
          l1 = ext_lookup(v_stmt, S_body);
          add_ref(l1);
          l0 = Flow_Control_Can_Jump_Out(l1, S_true, env);
          release(l1);
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1021_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_for_stmt);
        if (!b1)
        {
          goto block_1021_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1021_end:;
        if (b1)
        {
          l1 = ext_lookup(v_stmt, S_body);
          add_ref(l1);
          l0 = Flow_Control_Can_Jump_Out(l1, S_true, env);
          release(l1);
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1022_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_let_stmt);
        if (!b1)
        {
          goto block_1022_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1022_end:;
        if (b1)
        {
          l1 = ext_lookup(v_stmt, S_body);
          add_ref(l1);
          l0 = Flow_Control_Can_Jump_Out(l1, v_inside_loop, env);
          release(l1);
          goto block_1015_end;
        }
        b1 = are_eq(p0, S_break_stmt);
        if (b1)
        {
          l0 = v_inside_loop;
          add_ref(l0);
          if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
          {
            fail();
          }
          if (are_eq(l0, S_true))
          {
            l0 = S_false;
          }
          else
          {
            l0 = S_true;
          }
          goto block_1015_end;
        }
        b1 = are_eq(p0, S_fail_stmt);
        if (b1)
        {
          l0 = S_false;
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1023_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_assert_stmt);
        if (!b1)
        {
          goto block_1023_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1023_end:;
        if (b1)
        {
          l0 = S_false;
          goto block_1015_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1024_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_print_stmt);
        if (!b1)
        {
          goto block_1024_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1024_end:;
        if (b1)
        {
          l0 = S_false;
          goto block_1015_end;
        }
        fail();
        block_1015_end:;
        goto block_1014_end;
      }
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_1025_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_1025_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_statement(l1);
      if (!b1)
      {
        goto block_1025_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_1025_end:;
    if (b1)
    {
      v_stmts = p0;
    }
    if (b1)
    {
      b1 = is_bool(p1);
      if (b1)
      {
        v_inside_loop = p1;
      }
      if (b1)
      {
        l1 = make_array(get_seq_len(v_stmts), S_nil);
        get_seq_iter(q0, v_stmts);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          l3 = Flow_Control_Can_Jump_Out(v_s, v_inside_loop, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        l0 = At_Least_One(l1, env);
        release(l1);
        goto block_1014_end;
      }
    }
    fail();
    block_1014_end:;
    return l0;
  }
  
  
  Obj Untyped_Sgn(Obj p0, Obj p1, Env &env)
  {
    Obj v_type;
    Obj v_named_params;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj v_a;
    Obj v_e;
    Obj v_v;
    Obj V0[3];
    Obj V1[3];
    Obj v_fd;
    Obj v_p;
  
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1027_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(S_named_par, l1);
    if (!b1)
    {
      goto block_1027_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_atom(l1);
    block_1027_end:;
    if (b1)
    {
      v_var = p0;
    }
    if (b1)
    {
      b1 = is_exttype(p1);
      if (b1)
      {
        v_type = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1029_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_named_par);
        if (!b1)
        {
          goto block_1029_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1029_end:;
        if (b1)
        {
          b1 = is_type(p1);
          if (b1)
          {
            i0 = 0;
            V0[i0] = S_arity;
            V1[i0] = to_obj(0);
            i0 = i0 + 1;
            V0[i0] = S_name;
            add_ref(v_a);
            V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_untyped_sgn, l1);
            goto block_1028_end;
          }
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1030_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_named_par);
        if (!b1)
        {
          goto block_1030_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1030_end:;
        if (b1)
        {
          b1 = is_clstype(p1);
          if (b1)
          {
            i0 = 0;
            V0[i0] = S_name;
            add_ref(v_a);
            V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
            i0 = i0 + 1;
            V0[i0] = S_arity;
            l2 = ext_lookup(v_type, S_in_types);
            add_ref(l2);
            V1[i0] = Length(l2, env);
            release(l2);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_untyped_sgn, l1);
            goto block_1028_end;
          }
        }
        fail();
        block_1028_end:;
        goto block_1026_end;
      }
    }
    b1 = is_var(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      b1 = is_extexpr(p1);
      if (b1)
      {
        v_e = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1032_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_var);
        if (!b1)
        {
          goto block_1032_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1032_end:;
        if (b1)
        {
          b1 = is_expr(p1);
          if (b1)
          {
            i0 = 0;
            V0[i0] = S_arity;
            V1[i0] = to_obj(0);
            i0 = i0 + 1;
            V0[i0] = S_name;
            add_ref(v_a);
            V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_untyped_sgn, l1);
            goto block_1031_end;
          }
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1033_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_var);
        if (!b1)
        {
          goto block_1033_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1033_end:;
        if (b1)
        {
          b1 = is_clsexpr(p1);
          if (b1)
          {
            i0 = 0;
            V0[i0] = S_name;
            add_ref(v_a);
            V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
            i0 = i0 + 1;
            V0[i0] = S_arity;
            l2 = ext_lookup(v_e, S_params);
            add_ref(l2);
            V1[i0] = Length(l2, env);
            release(l2);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_untyped_sgn, l1);
            goto block_1031_end;
          }
        }
        fail();
        block_1031_end:;
        goto block_1026_end;
      }
    }
    b1 = is_synfndef(p0);
    if (b1)
    {
      v_fd = p0;
    }
    if (b1)
    {
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_1034_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = is_synsgn(l1);
        if (!b1)
        {
          goto block_1034_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1034_end:;
      if (b1)
      {
        v_named_params = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_name;
        V1[i0] = ext_lookup(v_fd, S_name);
        add_ref(V1[i0]);
        i0 = i0 + 1;
        V0[i0] = S_arity;
        V1[i0] = Arity(v_fd, env);
        i0 = i0 + 1;
        V0[i0] = S_named_params;
        init(t0);
        get_set_iter(s0, v_named_params);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l3 = get_curr_obj(s0);
          v_p = l3;
          b1 = true;
          if (b1)
          {
            l3 = Untyped_Sgn(v_p, env);
            append(t0, l3);
          }
          move_forward(s0);
        }
        V1[i0] = make_set(t0);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_untyped_sgn, l1);
        goto block_1026_end;
      }
    }
    fail();
    block_1026_end:;
    return l0;
  }
  
  
  Obj Fndef_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    Obj l7;
    Stream t0;
    SeqIter q0;
    MapIter m0;
    Obj v_fndefs;
    Obj v_v;
    Obj v_fndef;
    Obj v_p;
    Obj v_tvars;
  
    v_fndef = p0;
    v_fndefs = p1;
    Obj (*BF1036)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD1036 = env.C1_eval;
    env.n1_eval = cls_5;
    env.C1_eval = 0;
    Obj (*BF1037)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD1037 = env.C1_condition;
    env.n1_condition = cls_17;
    env.C1_condition = 0;
    l2 = ext_lookup(v_fndef, S_params);
    add_ref(l2);
    l1 = Select_Expr_Fn(l2, env);
    release(l2);
    env.n1_condition = BF1037;
    env.C1_condition = BD1037;
    env.n1_eval = BF1036;
    env.C1_eval = BD1036;
    Obj (*BF1038)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD1038 = env.C1_eval;
    env.n1_eval = cls_6;
    env.C1_eval = 0;
    Obj (*BF1039)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD1039 = env.C1_condition;
    env.n1_condition = cls_18;
    env.C1_condition = 0;
    l3 = ext_lookup(v_fndef, S_named_params);
    add_ref(l3);
    l2 = Select_Expr_Fn(l3, env);
    release(l3);
    env.n1_condition = BF1039;
    env.C1_condition = BD1039;
    env.n1_eval = BF1038;
    env.C1_eval = BD1038;
    v_tvars = amp(l1, l2, env);
    release(l2);
    release(l1);
    l1 = ext_lookup(v_fndef, S_params);
    add_ref(l1);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l2 = ext_lookup(v_p, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = ext_lookup(v_p, S_type);
        add_ref(l3);
        l2 = Type_Is_Wf(l3, v_tvars, env);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l0 = S_false;
        release(l1);
        release(v_tvars);
        goto block_1035_end;
      }
      move_forward(q0);
    }
    release(l1);
    l1 = ext_lookup(v_fndef, S_res_type, b1);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l2 = ext_lookup(v_fndef, S_res_type);
      add_ref(l2);
      l1 = Type_Is_Wf(l2, v_tvars, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      release(v_tvars);
      goto block_1035_end;
    }
    l4 = ext_lookup(v_fndef, S_params);
    add_ref(l4);
    init(t0);
    get_seq_iter(q0, l4);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l6 = ext_lookup(v_p, S_var, b1);
      l6 = to_obj(b1);
      if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
      {
        fail();
      }
      if (are_eq(l6, S_true))
      {
        l5 = ext_lookup(v_p, S_var);
        add_ref(l5);
        append(t0, l5);
      }
      move_forward(q0);
    }
    l3 = make_seq(t0);
    release(l4);
    init(t0);
    l6 = ext_lookup(v_fndef, S_named_params);
    add_ref(l6);
    get_map_iter(m0, l6);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l7 = get_curr_key(m0);
      v_v = l7;
      b1 = true;
      if (b1)
      {
        l7 = get_curr_value(m0);
        b1 = true;
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
        }
      }
      move_forward(m0);
    }
    release(l6);
    l5 = make_set(t0);
    l4 = Rand_Sort(l5, env);
    release(l5);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    l1 = Has_Duplicates(l2, env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      release(v_tvars);
      goto block_1035_end;
    }
    Obj BK1040 = env.n_fns_in_scope;
    env.n_fns_in_scope = v_fndefs;
    add_ref(env.n_fns_in_scope);
    Obj BK1041 = env.n_type_vars;
    env.n_type_vars = v_tvars;
    add_ref(env.n_type_vars);
    l1 = Cls_Vars(v_fndef, env);
    Obj BK1042 = env.n_cls_vars;
    env.n_cls_vars = l1;
    add_ref(env.n_cls_vars);
    l2 = ext_lookup(v_fndef, S_expr);
    add_ref(l2);
    l3 = Scalar_Vars(v_fndef, env);
    l0 = Expr_Is_Wf(l2, l3, env);
    release(l3);
    release(l2);
    release(env.n_cls_vars);
    env.n_cls_vars = BK1042;
    release(l1);
    release(env.n_type_vars);
    env.n_type_vars = BK1041;
    release(env.n_fns_in_scope);
    env.n_fns_in_scope = BK1040;
    release(v_tvars);
    goto block_1035_end;
    block_1035_end:;
    return l0;
  }
  
  
  Obj To_Text__To_Txt(Obj p0, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj v_tag;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    SeqIter q0;
    Obj v_str;
    Obj V0[4];
    Obj v_inner_obj;
  
    v_obj = p0;
    b1 = is_atom(p0);
    if (b1)
    {
      l0 = to_str(v_obj);
      goto block_1043_end;
    }
    b1 = is_int(p0);
    if (b1)
    {
      l0 = To_Str(v_obj, env);
      goto block_1043_end;
    }
    b1 = is_string(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(34);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_Text__Quote(v_obj, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(34);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1043_end;
    }
    b1 = is_seq(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(91);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l5 = make_array(get_seq_len(v_obj), S_nil);
      get_seq_iter(q0, v_obj);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_x = get_curr_obj(q0);
        l7 = To_Text__To_Txt(v_x, env);
        set_at(l5, i0, l7);
        move_forward(q0);
        i0 = i0 + 1;
      }
      i0 = 0;
      V0[i0] = to_obj(44);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l7 = make_seq(V0, i0);
      l6 = make_tagged_obj(S_string, l7);
      l4 = Intermix(l5, l6, env);
      release(l6);
      release(l5);
      l3 = Append(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(93);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1043_end;
    }
    b1 = is_set(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(123);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l6 = Rand_Sort(v_obj, env);
      l5 = make_array(get_seq_len(l6), S_nil);
      get_seq_iter(q0, l6);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_x = get_curr_obj(q0);
        l7 = To_Text__To_Txt(v_x, env);
        set_at(l5, i0, l7);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l6);
      i0 = 0;
      V0[i0] = to_obj(44);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l7 = make_seq(V0, i0);
      l6 = make_tagged_obj(S_string, l7);
      l4 = Intermix(l5, l6, env);
      release(l6);
      release(l5);
      l3 = Append(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(125);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1043_end;
    }
    b1 = is_tuple(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(58);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l0 = To_Text__To_Txt(v_obj, l1, env);
      release(l1);
      goto block_1043_end;
    }
    b1 = is_map(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      V0[i0] = to_obj(61);
      i0 = i0 + 1;
      V0[i0] = to_obj(62);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l0 = To_Text__To_Txt(v_obj, l1, env);
      release(l1);
      goto block_1043_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1044_end;
    }
    l1 = get_tag(p0);
    v_tag = l1;
    b1 = true;
    if (!b1)
    {
      goto block_1044_end;
    }
    l1 = get_inner_obj(p0);
    v_inner_obj = l1;
    b1 = true;
    block_1044_end:;
    if (b1)
    {
      v_str = To_Text__To_Txt(v_inner_obj, env);
      b1 = is_tuple(v_inner_obj);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l3 = make_tagged_obj(S_string, l4);
        l2 = amp(l3, v_str, env);
        release(l3);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l3 = make_tagged_obj(S_string, l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_str);
        v_str = l1;
      }
      l1 = to_str(v_tag);
      l0 = amp(l1, v_str, env);
      release(l1);
      release(v_str);
      goto block_1045_end;
      block_1045_end:;
      goto block_1043_end;
    }
    fail();
    block_1043_end:;
    return l0;
  }
  
  
  Obj Clause_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    Obj v_clause;
    Obj v_ext_vars;
  
    v_clause = p0;
    v_ext_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1047_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_in_clause);
    if (!b1)
    {
      goto block_1047_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1047_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_src);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1048_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_in_clause);
    if (!b1)
    {
      goto block_1048_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1048_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_src);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1049_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_in_clause);
    if (!b1)
    {
      goto block_1049_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1049_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l1);
        l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_src);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1050_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_not_in_clause);
    if (!b1)
    {
      goto block_1050_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1050_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l1);
        l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_src);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1051_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_clause);
    if (!b1)
    {
      goto block_1051_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1051_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_left);
      add_ref(l1);
      l0 = Clause_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_right);
        add_ref(l1);
        l4 = ext_lookup(v_clause, S_left);
        add_ref(l4);
        l3 = New_Vars(l4, env);
        release(l4);
        l2 = amp(v_ext_vars, l3, env);
        release(l3);
        l0 = Clause_Is_Wf(l1, l2, env);
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1052_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_clause);
    if (!b1)
    {
      goto block_1052_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1052_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_left);
      add_ref(l1);
      l0 = Clause_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_clause, S_right);
        add_ref(l1);
        l0 = Clause_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1046_end;
    }
    fail();
    block_1046_end:;
    return l0;
  }
  
  
  Obj Fndef_Wf_Errors(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    Obj v_fn_def;
    Obj v_i;
    Obj V0[1];
    Obj v_p;
    Obj v_ts;
    Obj v_vs;
    Obj v_global_fns;
    Obj v_impl_pars;
    Obj v_all_fns;
    Obj v_type_vars;
    Obj v_lfd;
    Obj v_sgn_errs;
    Obj v_ret_type_errs;
    Obj v_fn;
    Obj v_loc_fns_errs;
    Obj v_expr_errs;
  
    v_fn_def = p0;
    v_global_fns = p1;
    v_type_vars = p2;
    v_impl_pars = p3;
    l6 = ext_lookup(v_fn_def, S_params);
    add_ref(l6);
    l5 = Length(l6, env);
    release(l6);
    l2 = Inc_Seq(l5, env);
    release(l5);
    l1 = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_i = get_curr_obj(q0);
      add_ref(v_i);
      l3 = make_tagged_obj(S_fn_par, v_i);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l2);
    v_vs = Set(l1, env);
    release(l1);
    init(t0);
    l3 = ext_lookup(v_fn_def, S_local_fns);
    add_ref(l3);
    l2 = Set(l3, env);
    release(l3);
    get_set_iter(s0, l2);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_lfd = l3;
      b1 = true;
      if (b1)
      {
        l3 = Untyped_Sgn(v_lfd, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    release(l2);
    l1 = make_set(t0);
    v_all_fns = Merge_And_Override(v_global_fns, l1, env);
    release(l1);
    Obj (*BF1054)(Obj, const Obj *, Env &) = env.n1_eval;
    const Obj *BD1054 = env.C1_eval;
    env.n1_eval = cls_5;
    env.C1_eval = 0;
    Obj (*BF1055)(Obj, const Obj *, Env &) = env.n1_condition;
    const Obj *BD1055 = env.C1_condition;
    env.n1_condition = cls_17;
    env.C1_condition = 0;
    l2 = ext_lookup(v_fn_def, S_params);
    add_ref(l2);
    l1 = Select_Expr_Fn(l2, env);
    release(l2);
    env.n1_condition = BF1055;
    env.C1_condition = BD1055;
    env.n1_eval = BF1054;
    env.C1_eval = BD1054;
    v_ts = amp(v_type_vars, l1, env);
    release(l1);
    v_sgn_errs = empty_set;
    l1 = ext_lookup(v_fn_def, S_params);
    add_ref(l1);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_p = get_curr_obj(q0);
      l2 = ext_lookup(v_p, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        Obj BK1056 = env.n_type_vars_in_scope;
        env.n_type_vars_in_scope = v_ts;
        add_ref(env.n_type_vars_in_scope);
        l4 = ext_lookup(v_p, S_type);
        add_ref(l4);
        l3 = Type_Wf_Errors(l4, env);
        release(l4);
        release(env.n_type_vars_in_scope);
        env.n_type_vars_in_scope = BK1056;
        l2 = amp(v_sgn_errs, l3, env);
        release(l3);
        release(v_sgn_errs);
        v_sgn_errs = l2;
      }
      l2 = ext_lookup(v_p, S_var, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = ext_lookup(v_p, S_var);
        add_ref(l3);
        l2 = In(l3, v_vs, env);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          i0 = 0;
          l4 = ext_lookup(v_p, S_var);
          add_ref(l4);
          V0[i0] = make_tagged_obj(S_var_redef, l4);
          i0 = i0 + 1;
          l3 = make_set(V0, i0);
          l2 = amp(v_sgn_errs, l3, env);
          release(l3);
          release(v_sgn_errs);
          v_sgn_errs = l2;
        }
        i0 = 0;
        V0[i0] = ext_lookup(v_p, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l3 = make_set(V0, i0);
        l2 = amp(v_vs, l3, env);
        release(l3);
        release(v_vs);
        v_vs = l2;
      }
      move_forward(q0);
    }
    release(l1);
    l1 = ext_lookup(v_fn_def, S_res_type, b1);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      Obj BK1057 = env.n_type_vars_in_scope;
      env.n_type_vars_in_scope = v_ts;
      add_ref(env.n_type_vars_in_scope);
      l1 = ext_lookup(v_fn_def, S_res_type);
      add_ref(l1);
      v_ret_type_errs = Type_Wf_Errors(l1, env);
      release(l1);
      release(env.n_type_vars_in_scope);
      env.n_type_vars_in_scope = BK1057;
    }
    else
    {
      v_ret_type_errs = empty_set;
    }
    l2 = ext_lookup(v_fn_def, S_local_fns);
    add_ref(l2);
    l1 = make_array(get_seq_len(l2), S_nil);
    get_seq_iter(q0, l2);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_fn = get_curr_obj(q0);
      l3 = Fndef_Wf_Errors(v_fn, v_all_fns, v_ts, v_impl_pars, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    release(l2);
    v_loc_fns_errs = Seq_Union(l1, env);
    release(l1);
    Obj BK1058 = env.n_type_vars_in_scope;
    env.n_type_vars_in_scope = v_ts;
    add_ref(env.n_type_vars_in_scope);
    Obj BK1059 = env.n_fns_in_scope;
    env.n_fns_in_scope = v_all_fns;
    add_ref(env.n_fns_in_scope);
    Obj BK1060 = env.n_impl_params;
    env.n_impl_params = v_impl_pars;
    add_ref(env.n_impl_params);
    l1 = ext_lookup(v_fn_def, S_expr);
    add_ref(l1);
    v_expr_errs = Expr_Wf_Errors(l1, v_vs, env);
    release(l1);
    release(env.n_impl_params);
    env.n_impl_params = BK1060;
    release(env.n_fns_in_scope);
    env.n_fns_in_scope = BK1059;
    release(env.n_type_vars_in_scope);
    env.n_type_vars_in_scope = BK1058;
    l2 = amp(v_sgn_errs, v_ret_type_errs, env);
    l1 = amp(l2, v_loc_fns_errs, env);
    release(l2);
    l0 = amp(l1, v_expr_errs, env);
    release(l1);
    release(v_ts);
    release(v_vs);
    release(v_all_fns);
    release(v_sgn_errs);
    release(v_ret_type_errs);
    release(v_loc_fns_errs);
    release(v_expr_errs);
    goto block_1053_end;
    block_1053_end:;
    return l0;
  }
  
  
  Obj To_Text__Wrap(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    int i0;
    Obj v_str;
    Obj v_len;
    Obj v_i;
    Obj V0[2];
    Obj v_ch;
    Obj v_line_len;
    Obj v_midxs;
    Obj v_wstr;
    Obj v_ind_lev;
    Obj v_blk_len;
  
    v_str = p0;
    v_line_len = p1;
    v_len = Length(v_str, env);
    v_midxs = To_Text__Match_Idxs(v_str, env);
    v_i = to_obj(0);
    l1 = empty_seq;
    v_wstr = make_tagged_obj(S_string, l1);
    v_ind_lev = to_obj(0);
    for ( ; ; )
    {
      l1 = lower(v_i, v_len, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      v_ch = brackets(v_str, v_i, env);
      l2 = Ascii_Comma(env);
      l1 = to_obj(are_eq(v_ch, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = to_obj(44);
        i0 = i0 + 1;
        V0[i0] = to_obj(10);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l3 = make_tagged_obj(S_string, l4);
        l2 = amp(v_wstr, l3, env);
        release(l3);
        l4 = star(to_obj(2), v_ind_lev, env);
        l5 = Ascii_Space(env);
        l3 = Rep_Str(l4, l5, env);
        release(l5);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_wstr);
        v_wstr = l1;
        for ( ; ; )
        {
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
          l2 = At(v_str, v_i, env);
          l3 = Ascii_Space(env);
          l1 = to_obj(are_eq(l2, l3));
          release(l3);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
        }
      }
      else
      {
        l1 = To_Text__Is_Right_Par(v_ch, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = greater(v_ind_lev, to_obj(0), env);
          if (!are_eq(l1, S_true))
          {
            fail();
          }
          l1 = minus(v_ind_lev, to_obj(1), env);
          release(v_ind_lev);
          v_ind_lev = l1;
          i0 = 0;
          V0[i0] = to_obj(10);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l4 = make_tagged_obj(S_string, l5);
          l3 = amp(v_wstr, l4, env);
          release(l4);
          l5 = star(to_obj(2), v_ind_lev, env);
          l6 = Ascii_Space(env);
          l4 = Rep_Str(l5, l6, env);
          release(l6);
          release(l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = 0;
          V0[i0] = v_ch;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l3 = String(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          release(v_wstr);
          v_wstr = l1;
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
        }
        else
        {
          l2 = brackets(v_midxs, v_i, env);
          l1 = to_obj(are_eq(l2, S_nil));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            V0[i0] = v_ch;
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = String(l3, env);
            release(l3);
            l1 = amp(v_wstr, l2, env);
            release(l2);
            release(v_wstr);
            v_wstr = l1;
            l1 = plus(v_i, to_obj(1), env);
            release(v_i);
            v_i = l1;
          }
          else
          {
            l2 = brackets(v_midxs, v_i, env);
            l1 = minus(l2, v_i, env);
            release(l2);
            v_blk_len = minus(l1, to_obj(1), env);
            release(l1);
            l1 = lower(v_blk_len, v_line_len, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l3 = plus(v_blk_len, to_obj(2), env);
              l2 = Substr(v_str, v_i, l3, env);
              release(l3);
              l1 = amp(v_wstr, l2, env);
              release(l2);
              release(v_wstr);
              v_wstr = l1;
              l2 = plus(v_i, v_blk_len, env);
              l1 = plus(l2, to_obj(2), env);
              release(l2);
              release(v_i);
              v_i = l1;
            }
            else
            {
              l1 = plus(v_ind_lev, to_obj(1), env);
              release(v_ind_lev);
              v_ind_lev = l1;
              i0 = 0;
              V0[i0] = v_ch;
              add_ref(V0[i0]);
              i0 = i0 + 1;
              l5 = make_seq(V0, i0);
              l4 = String(l5, env);
              release(l5);
              l3 = amp(v_wstr, l4, env);
              release(l4);
              i0 = 0;
              V0[i0] = to_obj(10);
              i0 = i0 + 1;
              l5 = make_seq(V0, i0);
              l4 = make_tagged_obj(S_string, l5);
              l2 = amp(l3, l4, env);
              release(l4);
              release(l3);
              l4 = star(to_obj(2), v_ind_lev, env);
              l5 = Ascii_Space(env);
              l3 = Rep_Str(l4, l5, env);
              release(l5);
              release(l4);
              l1 = amp(l2, l3, env);
              release(l3);
              release(l2);
              release(v_wstr);
              v_wstr = l1;
              l1 = plus(v_i, to_obj(1), env);
              release(v_i);
              v_i = l1;
            }
            release(v_blk_len);
          }
        }
      }
      release(v_ch);
    }
    l0 = v_wstr;
    add_ref(l0);
    release(v_len);
    release(v_i);
    release(v_midxs);
    release(v_wstr);
    release(v_ind_lev);
    goto block_1061_end;
    block_1061_end:;
    return l0;
  }
  
  
  Obj Fn_Call_Is_Wf__Could_Match(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_fn_call;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    SeqIter q0;
    Obj v_i;
    Obj v_v;
    Obj v_fndef;
    Obj v_scalar_vars;
    Obj v_actual_par;
    Obj v_formal_par;
    Obj v_par_arity;
  
    v_fn_call = p0;
    v_fndef = p1;
    v_scalar_vars = p2;
    l2 = ext_lookup(v_fn_call, S_name);
    add_ref(l2);
    l3 = ext_lookup(v_fndef, S_name);
    add_ref(l3);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      goto block_1062_end;
    }
    l3 = ext_lookup(v_fn_call, S_params);
    add_ref(l3);
    l2 = Length(l3, env);
    release(l3);
    l3 = Arity(v_fndef, env);
    l1 = to_obj(are_eq(l2, l3));
    release(l3);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = S_false;
      goto block_1062_end;
    }
    l2 = ext_lookup(v_fn_call, S_params);
    add_ref(l2);
    l1 = Indexes(l2, env);
    release(l2);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_i = get_curr_obj(q0);
      l2 = ext_lookup(v_fn_call, S_params);
      add_ref(l2);
      v_actual_par = brackets(l2, v_i, env);
      release(l2);
      l2 = ext_lookup(v_fndef, S_params);
      add_ref(l2);
      v_formal_par = brackets(l2, v_i, env);
      release(l2);
      l2 = ext_lookup(v_formal_par, S_type, b1);
      l2 = to_obj(b1);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l3 = Arity(v_actual_par, env);
        l5 = ext_lookup(v_formal_par, S_type);
        add_ref(l5);
        l4 = Arity(l5, env);
        release(l5);
        l2 = to_obj(are_eq(l3, l4));
        release(l4);
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_false;
          release(l1);
          release(v_actual_par);
          release(v_formal_par);
          goto block_1062_end;
        }
      }
      else
      {
        l3 = Arity(v_actual_par, env);
        l2 = to_obj(are_eq(l3, to_obj(0)));
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_false;
          release(l1);
          release(v_actual_par);
          release(v_formal_par);
          goto block_1062_end;
        }
      }
      release(v_actual_par);
      release(v_formal_par);
      move_forward(q0);
    }
    release(l1);
    l2 = ext_lookup(v_fndef, S_named_params);
    add_ref(l2);
    l1 = Keys(l2, env);
    release(l2);
    get_seq_iter(q0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_v = get_curr_obj(q0);
      l3 = ext_lookup(v_fndef, S_named_params);
      add_ref(l3);
      l2 = brackets(l3, v_v, env);
      release(l3);
      v_par_arity = Arity(l2, env);
      release(l2);
      l3 = ext_lookup(v_fn_call, S_named_params);
      add_ref(l3);
      l2 = Has_Key(l3, v_v, env);
      release(l3);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l5 = ext_lookup(v_fn_call, S_named_params);
        add_ref(l5);
        l4 = brackets(l5, v_v, env);
        release(l5);
        l3 = Arity(l4, env);
        release(l4);
        l2 = to_obj(are_eq(l3, v_par_arity));
        release(l3);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = S_false;
        }
        else
        {
          l2 = S_true;
        }
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l0 = S_false;
          release(l1);
          release(v_par_arity);
          goto block_1062_end;
        }
      }
      else
      {
        l2 = Has_Key(env.n_cls_vars, v_v, env);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l3 = brackets(env.n_cls_vars, v_v, env);
          l2 = to_obj(are_eq(l3, v_par_arity));
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l0 = S_false;
            release(l1);
            release(v_par_arity);
            goto block_1062_end;
          }
        }
        else
        {
          l2 = In(v_v, v_scalar_vars, env);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = to_obj(are_eq(v_par_arity, to_obj(0)));
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l2 = S_false;
            }
            else
            {
              l2 = S_true;
            }
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_false;
              release(l1);
              release(v_par_arity);
              goto block_1062_end;
            }
          }
          else
          {
            l0 = S_false;
            release(l1);
            release(v_par_arity);
            goto block_1062_end;
          }
        }
      }
      release(v_par_arity);
      move_forward(q0);
    }
    release(l1);
    l0 = S_true;
    goto block_1062_end;
    block_1062_end:;
    return l0;
  }
  
  
  Obj Gen_Code(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj v_action;
    Obj V0[2];
    Obj v_info;
    Obj v_cond_var;
    Obj v_cond_info;
    Obj v_tmp_var;
    Obj v_action_code;
    Obj v_key_info;
    Obj v_value_info;
  
    v_action = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1064_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_match_action);
    if (!b1)
    {
      goto block_1064_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1064_end:;
    if (b1)
    {
      l1 = ext_lookup(v_action, S_clause);
      add_ref(l1);
      l2 = ext_lookup(v_action, S_action);
      add_ref(l2);
      l0 = Gen_Iter_Code(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1063_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1065_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_cond_match_action);
    if (!b1)
    {
      goto block_1065_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1065_end:;
    if (b1)
    {
      v_cond_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1067 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_action, S_cond);
      add_ref(l2);
      v_cond_info = Gen_Eval_Info(l2, v_cond_var, env);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1067;
      release(l1);
      l1 = ext_lookup(v_action, S_action);
      add_ref(l1);
      v_action_code = Gen_Code(l1, env);
      release(l1);
      l1 = ext_lookup(v_cond_info, S_eval_code);
      add_ref(l1);
      i0 = 0;
      l4 = ext_lookup(v_cond_info, S_expr);
      add_ref(l4);
      l3 = Is_Bool(l4, env);
      release(l4);
      V0[i0] = Check(l3, env);
      release(l3);
      i0 = i0 + 1;
      l4 = ext_lookup(v_cond_info, S_expr);
      add_ref(l4);
      l3 = Is_True(l4, env);
      release(l4);
      V0[i0] = Do_If(l3, v_action_code, env);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_cond_var);
      release(v_cond_info);
      release(v_action_code);
      goto block_1066_end;
      block_1066_end:;
      goto block_1063_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1068_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_found_var_and_leave);
    if (!b1)
    {
      goto block_1068_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1068_end:;
    if (b1)
    {
      i0 = 0;
      l1 = ext_lookup(v_action, S_var);
      add_ref(l1);
      l2 = Obj_True(env);
      V0[i0] = Set_Var(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Exit_Block(env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1063_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1069_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eval_expr_and_add_to_set);
    if (!b1)
    {
      goto block_1069_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1069_end:;
    if (b1)
    {
      v_tmp_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1071 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_action, S_expr);
      add_ref(l2);
      v_info = Gen_Eval_Info(l2, v_tmp_var, env);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1071;
      release(l1);
      l1 = ext_lookup(v_info, S_add_ref_eval_code);
      add_ref(l1);
      i0 = 0;
      l3 = ext_lookup(v_action, S_stream_var);
      add_ref(l3);
      l4 = ext_lookup(v_info, S_expr);
      add_ref(l4);
      V0[i0] = Append(l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      release(v_tmp_var);
      goto block_1070_end;
      block_1070_end:;
      goto block_1063_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1072_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eval_exprs_and_add_to_map);
    if (!b1)
    {
      goto block_1072_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1072_end:;
    if (b1)
    {
      v_tmp_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1074 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_action, S_key_expr);
      add_ref(l2);
      v_key_info = Gen_Eval_Info(l2, v_tmp_var, env);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1074;
      release(l1);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1075 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_action, S_value_expr);
      add_ref(l2);
      v_value_info = Gen_Eval_Info(l2, v_tmp_var, env);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1075;
      release(l1);
      l3 = ext_lookup(v_key_info, S_add_ref_eval_code);
      add_ref(l3);
      i0 = 0;
      l5 = ext_lookup(v_action, S_key_stream_var);
      add_ref(l5);
      l6 = ext_lookup(v_key_info, S_expr);
      add_ref(l6);
      V0[i0] = Append(l5, l6, env);
      release(l6);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      l3 = ext_lookup(v_value_info, S_add_ref_eval_code);
      add_ref(l3);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      l3 = ext_lookup(v_action, S_value_stream_var);
      add_ref(l3);
      l4 = ext_lookup(v_value_info, S_expr);
      add_ref(l4);
      V0[i0] = Append(l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_tmp_var);
      release(v_key_info);
      release(v_value_info);
      goto block_1073_end;
      block_1073_end:;
      goto block_1063_end;
    }
    fail();
    block_1063_end:;
    return l0;
  }
  
  
  Obj Desugar_Clause(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    int i1;
    Obj v_clause;
    Obj V2[1];
    Obj V0[3];
    Obj V3[1];
    Obj V1[3];
    Obj v_cs;
    Obj v_def_vars;
  
    v_clause = p0;
    v_def_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1077_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_in_clause);
    if (!b1)
    {
      goto block_1077_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1077_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_src;
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      V1[i0] = Desugar_Expr(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_ptrn;
      l2 = ext_lookup(v_clause, S_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_in_clause, l1);
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1078_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_in_clause);
    if (!b1)
    {
      goto block_1078_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1078_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_src;
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      V1[i0] = Desugar_Expr(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_ptrn;
      l2 = ext_lookup(v_clause, S_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_not_in_clause, l1);
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1079_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_in_clause);
    if (!b1)
    {
      goto block_1079_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1079_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_src;
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      V1[i0] = Desugar_Expr(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_key_ptrn;
      l2 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_value_ptrn;
      l2 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_map_in_clause, l1);
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1080_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_not_in_clause);
    if (!b1)
    {
      goto block_1080_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1080_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_src;
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      V1[i0] = Desugar_Expr(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_key_ptrn;
      l2 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_value_ptrn;
      l2 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l2);
      V1[i0] = Replace_Bound_Vars(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_map_not_in_clause, l1);
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1081_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eq_clause);
    if (!b1)
    {
      goto block_1081_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1081_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_var);
      add_ref(l2);
      l1 = In(l2, v_def_vars, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      i0 = 0;
      V0[i0] = S_ptrn;
      i1 = 0;
      V2[i1] = S_name;
      V3[i1] = ext_lookup(v_clause, S_var);
      add_ref(V3[i1]);
      i1 = i1 + 1;
      l2 = make_map(V2, V3, i1);
      V1[i0] = make_tagged_obj(S_var_ptrn, l2);
      i0 = i0 + 1;
      V0[i0] = S_src;
      i1 = 0;
      l3 = ext_lookup(v_clause, S_expr);
      add_ref(l3);
      V2[i1] = Desugar_Expr(l3, v_def_vars, env);
      release(l3);
      i1 = i1 + 1;
      l2 = make_set(V2, i1);
      V1[i0] = make_tagged_obj(S_set_expr, l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_in_clause, l1);
      goto block_1082_end;
      block_1082_end:;
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1083_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_clause);
    if (!b1)
    {
      goto block_1083_end;
    }
    l1 = get_inner_obj(p0);
    v_cs = l1;
    b1 = true;
    block_1083_end:;
    if (b1)
    {
      l0 = Mk_And_Clause(v_cs, v_def_vars, env);
      goto block_1076_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1084_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_clause);
    if (!b1)
    {
      goto block_1084_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1084_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_left;
      l2 = ext_lookup(v_clause, S_left);
      add_ref(l2);
      V1[i0] = Desugar_Clause(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      V0[i0] = S_right;
      l2 = ext_lookup(v_clause, S_right);
      add_ref(l2);
      V1[i0] = Desugar_Clause(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_or_clause, l1);
      goto block_1076_end;
    }
    fail();
    block_1076_end:;
    return l0;
  }
  
  
  Obj Expr_Is_Wf__Rest_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_ss;
    Obj v_scalar_vars;
    Obj v_c;
  
    v_expr = p0;
    v_scalar_vars = p1;
    b1 = is_var(p0);
    if (b1)
    {
      l0 = In(v_expr, v_scalar_vars, env);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1086_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fn_call);
    if (!b1)
    {
      goto block_1086_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1086_end:;
    if (b1)
    {
      l0 = Fn_Call_Is_Wf(v_expr, env.n_fns_in_scope, v_scalar_vars, env);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1087_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_cls_call);
    if (!b1)
    {
      goto block_1087_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1087_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_name);
      add_ref(l1);
      l0 = Has_Key(env.n_cls_vars, l1, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l2 = ext_lookup(v_expr, S_name);
        add_ref(l2);
        l1 = brackets(env.n_cls_vars, l2, env);
        release(l2);
        l3 = ext_lookup(v_expr, S_params);
        add_ref(l3);
        l2 = Length(l3, env);
        release(l3);
        l0 = to_obj(are_eq(l1, l2));
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1088_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_builtin_call);
    if (!b1)
    {
      goto block_1088_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1088_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_name);
      add_ref(l1);
      l3 = ext_lookup(v_expr, S_params);
      add_ref(l3);
      l2 = Length(l3, env);
      release(l3);
      l0 = Arity_Is_Correct(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1089_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_membership);
    if (!b1)
    {
      goto block_1089_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1089_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_type);
      add_ref(l1);
      l0 = Type_Is_Wf(l1, env.n_type_vars, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1090_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_1090_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1090_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Clause_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1091_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_1091_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1091_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Clause_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1092_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_1092_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1092_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      l0 = Clause_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1093_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_comp);
    if (!b1)
    {
      goto block_1093_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1093_end:;
    if (b1)
    {
      l0 = ext_lookup(v_expr, S_idx_var, b1);
      l0 = to_obj(b1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_false))
      {
        l1 = ext_lookup(v_expr, S_var);
        add_ref(l1);
        l2 = ext_lookup(v_expr, S_idx_var);
        add_ref(l2);
        l0 = to_obj(are_eq(l1, l2));
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = Gen_Vars(v_expr, env);
        l0 = Disjoint(l1, v_scalar_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1094_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_match_expr);
    if (!b1)
    {
      goto block_1094_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1094_end:;
    if (b1)
    {
      l2 = ext_lookup(v_expr, S_cases);
      add_ref(l2);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_c = get_curr_obj(q0);
        l6 = ext_lookup(v_expr, S_exprs);
        add_ref(l6);
        l5 = Length(l6, env);
        release(l6);
        l3 = Case_Is_Wf(v_c, v_scalar_vars, l5, env);
        release(l5);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l0 = All(l1, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1095_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_do_expr);
    if (!b1)
    {
      goto block_1095_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1095_end:;
    if (b1)
    {
      l0 = Stmts_Are_Wf(v_ss, v_scalar_vars, env);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1096_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_1096_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1096_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1085_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1097_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_1097_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1097_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_ptrn);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1085_end;
    }
    b1 = true;
    if (b1)
    {
      l0 = S_true;
      goto block_1085_end;
    }
    fail();
    block_1085_end:;
    return l0;
  }
  
  
  Obj Compile(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    SeqIter q0;
    Obj v_errs;
    Obj v_code;
    Obj v_f;
    Obj V0[16];
    Obj v_c_code;
    Obj v_ast_files;
    Obj v_syn_prg;
  
    v_ast_files = p0;
    i0 = 0;
    V0[i0] = to_obj(65);
    i0 = i0 + 1;
    V0[i0] = to_obj(83);
    i0 = i0 + 1;
    V0[i0] = to_obj(84);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(102);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l1 = make_array(get_seq_len(v_ast_files), S_nil);
    get_seq_iter(q0, v_ast_files);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_f = get_curr_obj(q0);
      l3 = Parse_Prg_Decl(v_f, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    v_syn_prg = make_tagged_obj(S_prg, l1);
    i0 = 0;
    V0[i0] = to_obj(65);
    i0 = i0 + 1;
    V0[i0] = to_obj(83);
    i0 = i0 + 1;
    V0[i0] = to_obj(84);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(102);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(112);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    v_errs = Wf_Errors(v_syn_prg, env);
    print(v_errs);
    v_prg = Rem_Syntax(v_syn_prg, env);
    i0 = 0;
    V0[i0] = to_obj(83);
    i0 = i0 + 1;
    V0[i0] = to_obj(121);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(120);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(109);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(118);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    v_code = Gen_Prg_Code(v_prg, env);
    i0 = 0;
    V0[i0] = to_obj(67);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    v_c_code = Compile_To_C(v_code, env);
    i0 = 0;
    V0[i0] = to_obj(67);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l0 = v_c_code;
    add_ref(l0);
    release(v_prg);
    release(v_errs);
    release(v_code);
    release(v_c_code);
    release(v_syn_prg);
    goto block_1098_end;
    block_1098_end:;
    return l0;
  }
  
  
  Obj Make_Scopes(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj v_var;
    Obj v_body;
    Obj v_asgnms;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    Stream t0;
    SeqIter q0;
    Obj v_arity;
    Obj v_res_var;
    Obj v_i;
    Obj v_v;
    Obj V0[1];
    Obj v_cls_body;
    Obj v_ext_vs;
    Obj v_info;
    Obj v_pars_info;
    Obj v_call_code;
    Obj v_body_gen_info;
    Obj v_rem_asgnms;
    Obj v_loc_vs;
  
    v_asgnms = p0;
    v_body_gen_info = p1;
    l2 = empty_seq;
    l1 = to_obj(are_eq(v_asgnms, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = ext_lookup(v_body_gen_info, S_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_expr = ext_lookup(v_body_gen_info, S_expr);
        add_ref(v_expr);
        v_res_var = ext_lookup(v_body_gen_info, S_res_var);
        add_ref(v_res_var);
        l1 = ext_lookup(v_expr, S_params);
        add_ref(l1);
        v_pars_info = Gen_Eval_Info(l1, env);
        release(l1);
        i0 = 0;
        l1 = ext_lookup(v_expr, S_name);
        add_ref(l1);
        l2 = ext_lookup(v_pars_info, S_exprs);
        add_ref(l2);
        V0[i0] = Call_Proc(v_res_var, l1, l2, env);
        release(l2);
        release(l1);
        i0 = i0 + 1;
        v_call_code = make_seq(V0, i0);
        l2 = ext_lookup(v_pars_info, S_eval_code);
        add_ref(l2);
        l1 = amp(l2, v_call_code, env);
        release(l2);
        l2 = ext_lookup(v_pars_info, S_cleanup_code);
        add_ref(l2);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        release(v_expr);
        release(v_res_var);
        release(v_pars_info);
        release(v_call_code);
        goto block_1099_end;
      }
      else
      {
        l1 = ext_lookup(v_body_gen_info, S_body);
        add_ref(l1);
        l2 = ext_lookup(v_body_gen_info, S_res_var);
        add_ref(l2);
        l3 = ext_lookup(v_body_gen_info, S_all_rel_vars);
        add_ref(l3);
        l4 = ext_lookup(v_body_gen_info, S_break_vars);
        add_ref(l4);
        l5 = ext_lookup(v_body_gen_info, S_surv_vars);
        add_ref(l5);
        l0 = Gen_Code(l1, l2, l3, l4, l5, env);
        release(l5);
        release(l4);
        release(l3);
        release(l2);
        release(l1);
        goto block_1099_end;
      }
    }
    l1 = brackets(v_asgnms, to_obj(0), env);
    v_var = Left(l1, env);
    release(l1);
    l1 = brackets(v_asgnms, to_obj(0), env);
    v_expr = Right(l1, env);
    release(l1);
    l2 = Length(v_asgnms, env);
    l1 = minus(l2, to_obj(1), env);
    release(l2);
    v_rem_asgnms = Subseq(v_asgnms, to_obj(1), l1, env);
    release(l1);
    b1 = is_expr(v_expr);
    l1 = to_obj(b1);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      v_info = Gen_Eval_Info(v_expr, env);
      l1 = ext_lookup(v_info, S_next_var_id);
      add_ref(l1);
      Obj BK1100 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      v_body = Make_Scopes(v_rem_asgnms, v_body_gen_info, env);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1100;
      release(l1);
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      i0 = 0;
      l4 = ext_lookup(v_info, S_expr);
      add_ref(l4);
      V0[i0] = Var_Scope(v_var, l4, v_body, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_expr);
      release(v_var);
      release(v_body);
      release(v_info);
      release(v_rem_asgnms);
      goto block_1099_end;
    }
    else
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      v_arity = Length(l1, env);
      release(l1);
      l3 = ext_lookup(v_expr, S_params);
      add_ref(l3);
      init(t0);
      get_seq_iter(q0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        l5 = to_obj(are_eq(v_v, S_nil));
        if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
        {
          fail();
        }
        if (are_eq(l5, S_true))
        {
          l5 = S_false;
        }
        else
        {
          l5 = S_true;
        }
        if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
        {
          fail();
        }
        if (are_eq(l5, S_true))
        {
          add_ref(v_v);
          append(t0, v_v);
        }
        move_forward(q0);
      }
      l2 = make_seq(t0);
      release(l3);
      l7 = ext_lookup(v_expr, S_params);
      add_ref(l7);
      l4 = Indexes(l7, env);
      release(l7);
      l3 = make_array(get_seq_len(l4), S_nil);
      get_seq_iter(q0, l4);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_i = get_curr_obj(q0);
        add_ref(v_i);
        l5 = make_tagged_obj(S_fn_par, v_i);
        set_at(l3, i0, l5);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      v_loc_vs = Set(l1, env);
      release(l1);
      l3 = ext_lookup(v_expr, S_expr);
      add_ref(l3);
      l2 = Extern_Vars(l3, env);
      release(l3);
      l1 = minus(l2, v_loc_vs, env);
      release(l2);
      v_ext_vs = Rand_Sort(l1, env);
      release(l1);
      l3 = ext_lookup(v_expr, S_params);
      add_ref(l3);
      init(t0);
      get_seq_iter(q0, l3);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        v_i = to_obj(i0);
        l5 = to_obj(are_eq(v_v, S_nil));
        if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
        {
          fail();
        }
        if (are_eq(l5, S_true))
        {
          l5 = S_false;
        }
        else
        {
          l5 = S_true;
        }
        if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
        {
          fail();
        }
        if (are_eq(l5, S_true))
        {
          l6 = Fn_Par(v_i, env);
          l4 = Set_Var(v_v, l6, env);
          release(l6);
          append(t0, l4);
        }
        move_forward(q0);
        i0 = i0 + 1;
      }
      l2 = make_seq(t0);
      release(l3);
      l3 = make_array(get_seq_len(v_ext_vs), S_nil);
      get_seq_iter(q0, v_ext_vs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        v_i = to_obj(i0);
        l7 = Cls_Ext_Par(v_i, env);
        l5 = Set_Var(v_v, l7, env);
        release(l7);
        set_at(l3, i0, l5);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l3 = ext_lookup(v_expr, S_expr);
      add_ref(l3);
      l2 = Gen_Fn_Body(l3, env);
      release(l3);
      v_cls_body = amp(l1, l2, env);
      release(l2);
      release(l1);
      v_body = Make_Scopes(v_rem_asgnms, v_body_gen_info, env);
      i0 = 0;
      V0[i0] = Cls_Scope(v_var, v_arity, v_ext_vs, v_cls_body, v_body, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_expr);
      release(v_var);
      release(v_body);
      release(v_arity);
      release(v_cls_body);
      release(v_ext_vs);
      release(v_rem_asgnms);
      release(v_loc_vs);
      goto block_1099_end;
    }
    block_1099_end:;
    return l0;
  }
  
  
  Obj Parse_Obj__Parse_Map_Or_Tuple(Obj p0, Obj p1, Env &env)
  {
    Obj v_key;
    Obj v_obj;
    Obj v_offset;
    Obj v_head;
    Obj v_values;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    SetIter s0;
    Obj v_len;
    Obj v_keys;
    Obj v_res;
    Obj v_k;
    Obj V0[2];
    Obj V1[2];
    Obj v_tokens;
    Obj v_is_tuple;
    Obj v_os;
    Obj v_val_os;
  
    v_tokens = p0;
    v_offset = p1;
    l2 = Length(v_tokens, env);
    l1 = lower(v_offset, l2, env);
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l2 = brackets(v_tokens, v_offset, env);
      l3 = Left_Parenthesis(env);
      l1 = to_obj(are_eq(l2, l3));
      release(l3);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
    }
    if (!are_eq(l1, S_true))
    {
      fail();
    }
    v_len = Length(v_tokens, env);
    v_os = plus(v_offset, to_obj(1), env);
    l1 = At(v_tokens, v_os, S_nil, env);
    if (!is_tag_obj(l1))
    {
      b1 = false;
      goto block_1102_end;
    }
    l2 = get_tag(l1);
    b1 = are_eq(S_label, l2);
    if (!b1)
    {
      goto block_1102_end;
    }
    l2 = get_inner_obj(l1);
    b1 = is_atom(l2);
    block_1102_end:;
    v_is_tuple = to_obj(b1);
    release(l1);
    v_keys = empty_seq;
    v_values = empty_seq;
    for ( ; ; )
    {
      l1 = greater_eq(v_os, v_len, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = Parse_Obj__Error(v_os, env);
        release(v_values);
        release(v_len);
        release(v_keys);
        release(v_is_tuple);
        release(v_os);
        goto block_1101_end;
      }
      v_head = brackets(v_tokens, v_os, env);
      l2 = Right_Parenthesis(env);
      l1 = to_obj(are_eq(v_head, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        release(v_head);
        break;
      }
      if (!(are_eq(v_is_tuple, S_true) | are_eq(v_is_tuple, S_false)))
      {
        fail();
      }
      if (are_eq(v_is_tuple, S_true))
      {
        if (!is_tag_obj(v_head))
        {
          b1 = false;
          goto block_1103_end;
        }
        l2 = get_tag(v_head);
        b1 = are_eq(S_label, l2);
        if (!b1)
        {
          goto block_1103_end;
        }
        l2 = get_inner_obj(v_head);
        b1 = is_atom(l2);
        block_1103_end:;
        l1 = to_obj(b1);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = Parse_Obj__Error(v_os, env);
          release(v_head);
          release(v_values);
          release(v_len);
          release(v_keys);
          release(v_is_tuple);
          release(v_os);
          goto block_1101_end;
        }
        v_key = Untag(v_head, env);
        v_val_os = plus(v_os, to_obj(1), env);
      }
      else
      {
        v_res = Parse_Obj__Parse_Obj(v_tokens, v_os, env);
        b1 = is_parseerror(v_res);
        l1 = to_obj(b1);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = v_res;
          add_ref(l0);
          release(v_head);
          release(v_values);
          release(v_len);
          release(v_keys);
          release(v_res);
          release(v_is_tuple);
          release(v_os);
          goto block_1101_end;
        }
        l3 = ext_lookup(v_res, S_offset);
        add_ref(l3);
        l2 = At(v_tokens, l3, S_nil, env);
        release(l3);
        l1 = to_obj(are_eq(l2, S_right_arrow));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = ext_lookup(v_res, S_offset);
          add_ref(l1);
          l0 = Parse_Obj__Error(l1, env);
          release(l1);
          release(v_head);
          release(v_values);
          release(v_len);
          release(v_keys);
          release(v_res);
          release(v_is_tuple);
          release(v_os);
          goto block_1101_end;
        }
        v_key = ext_lookup(v_res, S_obj);
        add_ref(v_key);
        l1 = ext_lookup(v_res, S_offset);
        add_ref(l1);
        v_val_os = plus(l1, to_obj(1), env);
        release(l1);
        release(v_res);
      }
      l1 = In(v_key, v_keys, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = Parse_Obj__Error(v_os, env);
        release(v_key);
        release(v_head);
        release(v_values);
        release(v_len);
        release(v_keys);
        release(v_is_tuple);
        release(v_os);
        release(v_val_os);
        goto block_1101_end;
      }
      v_res = Parse_Obj__Parse_Obj(v_tokens, v_val_os, env);
      b1 = is_parseerror(v_res);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_res;
        add_ref(l0);
        release(v_key);
        release(v_head);
        release(v_values);
        release(v_len);
        release(v_keys);
        release(v_res);
        release(v_is_tuple);
        release(v_os);
        release(v_val_os);
        goto block_1101_end;
      }
      i0 = 0;
      V0[i0] = v_key;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = join_seqs(l2, v_keys);
      release(l2);
      release(v_keys);
      v_keys = l1;
      i0 = 0;
      V0[i0] = ext_lookup(v_res, S_obj);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = join_seqs(l2, v_values);
      release(l2);
      release(v_values);
      v_values = l1;
      release(v_os);
      v_os = ext_lookup(v_res, S_offset);
      add_ref(v_os);
      release(v_head);
      v_head = At(v_tokens, v_os, S_nil, env);
      l1 = to_obj(are_eq(v_head, S_comma));
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = plus(v_os, to_obj(1), env);
        release(v_os);
        v_os = l1;
      }
      else
      {
        l2 = Right_Parenthesis(env);
        l1 = to_obj(are_eq(v_head, l2));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l1 = S_false;
        }
        else
        {
          l1 = S_true;
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = Parse_Obj__Error(v_os, env);
          release(v_key);
          release(v_head);
          release(v_values);
          release(v_len);
          release(v_keys);
          release(v_res);
          release(v_is_tuple);
          release(v_os);
          release(v_val_os);
          goto block_1101_end;
        }
      }
      release(v_key);
      release(v_head);
      release(v_res);
      release(v_val_os);
    }
    init(t0);
    init(t1);
    l1 = Set(v_keys, env);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_k = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_k);
        append(t0, v_k);
        l3 = Index_First(v_k, v_keys, env);
        l2 = brackets(v_values, l3, env);
        release(l3);
        append(t1, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_obj = make_map(t0, t1);
    i0 = 0;
    V0[i0] = S_obj;
    V1[i0] = v_obj;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_offset;
    V1[i0] = plus(v_os, to_obj(1), env);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_obj);
    release(v_values);
    release(v_len);
    release(v_keys);
    release(v_is_tuple);
    release(v_os);
    goto block_1101_end;
    block_1101_end:;
    return l0;
  }
  
  
  Obj Syn_New_Vars(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj v_objs;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    Obj v_clause;
    Obj v_b;
    Obj V0[2];
    Obj v_c;
    Obj v_stmt;
    Obj v_cs;
    Obj v_iter;
  
    b1 = is_synclause(p0);
    if (b1)
    {
      v_clause = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1106_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_in_clause);
      if (!b1)
      {
        goto block_1106_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1106_end:;
      if (b1)
      {
        l1 = ext_lookup(v_clause, S_ptrn);
        add_ref(l1);
        l0 = New_Vars(l1, env);
        release(l1);
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1107_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_not_in_clause);
      if (!b1)
      {
        goto block_1107_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1107_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1108_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_in_clause);
      if (!b1)
      {
        goto block_1108_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1108_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_key_ptrn);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1109_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_not_in_clause);
      if (!b1)
      {
        goto block_1109_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1109_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1110_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_eq_clause);
      if (!b1)
      {
        goto block_1110_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1110_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_clause, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1111_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_and_clause);
      if (!b1)
      {
        goto block_1111_end;
      }
      l1 = get_inner_obj(p0);
      v_cs = l1;
      b1 = true;
      block_1111_end:;
      if (b1)
      {
        l1 = make_array(get_seq_len(v_cs), S_nil);
        get_seq_iter(q0, v_cs);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_c = get_curr_obj(q0);
          l3 = Syn_New_Vars(v_c, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        l0 = Seq_Union(l1, env);
        release(l1);
        goto block_1105_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1112_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_or_clause);
      if (!b1)
      {
        goto block_1112_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1112_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_left);
        add_ref(l2);
        l1 = Syn_New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_right);
        add_ref(l3);
        l2 = Syn_New_Vars(l3, env);
        release(l3);
        l0 = Intersection(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1105_end;
      }
      fail();
      block_1105_end:;
      goto block_1104_end;
    }
    b1 = is_synstmt(p0);
    if (b1)
    {
      v_stmt = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1114_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_assignment_stmt);
      if (!b1)
      {
        goto block_1114_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1114_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_stmt, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1113_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1115_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_if_stmt);
      if (!b1)
      {
        goto block_1115_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1115_end:;
      if (b1)
      {
        init(t0);
        l4 = ext_lookup(v_stmt, S_branches);
        add_ref(l4);
        l3 = Set(l4, env);
        release(l4);
        get_set_iter(s0, l3);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l4 = get_curr_obj(s0);
          v_b = l4;
          b1 = true;
          if (b1)
          {
            l5 = ext_lookup(v_b, S_body);
            add_ref(l5);
            l4 = Syn_New_Vars(l5, env);
            release(l5);
            append(t0, l4);
          }
          move_forward(s0);
        }
        release(l3);
        l2 = make_set(t0);
        i0 = 0;
        l4 = ext_lookup(v_stmt, S_else);
        add_ref(l4);
        V0[i0] = Syn_New_Vars(l4, env);
        release(l4);
        i0 = i0 + 1;
        l3 = make_set(V0, i0);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l0 = Intersection(l1, env);
        release(l1);
        goto block_1113_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1116_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_let_stmt);
      if (!b1)
      {
        goto block_1116_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1116_end:;
      if (b1)
      {
        l1 = ext_lookup(v_stmt, S_body);
        add_ref(l1);
        l0 = Syn_New_Vars(l1, env);
        release(l1);
        goto block_1113_end;
      }
      b1 = true;
      if (b1)
      {
        l0 = empty_set;
        goto block_1113_end;
      }
      fail();
      block_1113_end:;
      goto block_1104_end;
    }
    b1 = is_syniter(p0);
    if (b1)
    {
      v_iter = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1118_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_seq_iter);
      if (!b1)
      {
        goto block_1118_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1118_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_iter, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l1 = ext_lookup(v_iter, S_idx_var, b1);
        l1 = to_obj(b1);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          V0[i0] = ext_lookup(v_iter, S_idx_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
        }
        l0 = make_set(V0, i0);
        goto block_1117_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1119_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_range_iter);
      if (!b1)
      {
        goto block_1119_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1119_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_iter, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1117_end;
      }
      fail();
      block_1117_end:;
      goto block_1104_end;
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_1120_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_1120_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_synstmt(l1);
      if (b1)
      {
        goto block_1121_end;
      }
      b1 = is_synclause(l1);
      if (b1)
      {
        goto block_1121_end;
      }
      block_1121_end:;
      if (!b1)
      {
        goto block_1120_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_1120_end:;
    if (b1)
    {
      v_objs = p0;
    }
    if (b1)
    {
      l1 = make_array(get_seq_len(v_objs), S_nil);
      get_seq_iter(q0, v_objs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_obj = get_curr_obj(q0);
        l3 = Syn_New_Vars(v_obj, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l0 = Seq_Union(l1, env);
      release(l1);
      goto block_1104_end;
    }
    fail();
    block_1104_end:;
    return l0;
  }
  
  
  Obj Var_Decl(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Obj v_v;
    Obj V0[8];
  
    v_v = p0;
    b1 = is_objvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(79);
      i0 = i0 + 1;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(106);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_vecvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(79);
      i0 = i0 + 1;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(106);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l5 = make_seq(V0, i0);
      l4 = make_tagged_obj(S_string, l5);
      l5 = To_C_Var_Name(v_v, env);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = 0;
      V0[i0] = to_obj(91);
      i0 = i0 + 1;
      l5 = make_seq(V0, i0);
      l4 = make_tagged_obj(S_string, l5);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      l4 = ext_lookup(v_v, S_size);
      add_ref(l4);
      l3 = To_Str(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(93);
      i0 = i0 + 1;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_boolvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(108);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_intvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(105);
      i0 = i0 + 1;
      V0[i0] = to_obj(110);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_setitvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(83);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(73);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_seqitvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(83);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(113);
      i0 = i0 + 1;
      V0[i0] = to_obj(73);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_mapitvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(77);
      i0 = i0 + 1;
      V0[i0] = to_obj(97);
      i0 = i0 + 1;
      V0[i0] = to_obj(112);
      i0 = i0 + 1;
      V0[i0] = to_obj(73);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    b1 = is_streamvar(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(83);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(97);
      i0 = i0 + 1;
      V0[i0] = to_obj(109);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l3 = To_C_Var_Name(v_v, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(59);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1122_end;
    }
    fail();
    block_1122_end:;
    return l0;
  }
  
  
  Obj Clause_Wf_Errors(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_errs;
    Obj v_clause;
    Obj V0[1];
    Obj v_vs;
    Obj v_c;
    Obj v_cs;
    Obj v_expr_errs;
    Obj v_ext_vars;
    Obj v_loc_vars;
    Obj v_ptrn_errs;
  
    v_clause = p0;
    v_loc_vars = p1;
    v_ext_vars = p2;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1124_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_in_clause);
    if (!b1)
    {
      goto block_1124_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1124_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_ptrn);
      add_ref(l2);
      l1 = Ptrn_Wf_Errors(l2, v_ext_vars, env);
      release(l2);
      l3 = ext_lookup(v_clause, S_src);
      add_ref(l3);
      l4 = amp(v_loc_vars, v_ext_vars, env);
      l2 = Expr_Wf_Errors(l3, l4, env);
      release(l4);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1125_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_in_clause);
    if (!b1)
    {
      goto block_1125_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1125_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_ptrn);
      add_ref(l1);
      v_ptrn_errs = Ptrn_Wf_Errors(l1, v_ext_vars, env);
      release(l1);
      l2 = ext_lookup(v_clause, S_ptrn);
      add_ref(l2);
      l1 = New_Vars(l2, env);
      release(l2);
      v_vs = minus(l1, v_loc_vars, env);
      release(l1);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_vs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        add_ref(v_vs);
        V0[i0] = make_tagged_obj(S_unbound_vars_in_excl_clause, v_vs);
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        l1 = amp(v_ptrn_errs, l2, env);
        release(l2);
        release(v_ptrn_errs);
        v_ptrn_errs = l1;
      }
      l1 = ext_lookup(v_clause, S_src);
      add_ref(l1);
      v_expr_errs = Expr_Wf_Errors(l1, v_ext_vars, env);
      release(l1);
      l0 = amp(v_ptrn_errs, v_expr_errs, env);
      release(v_vs);
      release(v_expr_errs);
      release(v_ptrn_errs);
      goto block_1126_end;
      block_1126_end:;
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1127_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_in_clause);
    if (!b1)
    {
      goto block_1127_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1127_end:;
    if (b1)
    {
      l3 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l3);
      l2 = Ptrn_Wf_Errors(l3, v_ext_vars, env);
      release(l3);
      l4 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l4);
      l3 = Ptrn_Wf_Errors(l4, v_ext_vars, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l3 = ext_lookup(v_clause, S_src);
      add_ref(l3);
      l4 = amp(v_loc_vars, v_ext_vars, env);
      l2 = Expr_Wf_Errors(l3, l4, env);
      release(l4);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1128_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_not_in_clause);
    if (!b1)
    {
      goto block_1128_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1128_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l2);
      l1 = Ptrn_Wf_Errors(l2, v_ext_vars, env);
      release(l2);
      l3 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l3);
      l2 = Ptrn_Wf_Errors(l3, v_ext_vars, env);
      release(l3);
      v_ptrn_errs = amp(l1, l2, env);
      release(l2);
      release(l1);
      l3 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l3);
      l2 = New_Vars(l3, env);
      release(l3);
      l4 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l4);
      l3 = New_Vars(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      v_vs = minus(l1, v_loc_vars, env);
      release(l1);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_vs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        add_ref(v_vs);
        V0[i0] = make_tagged_obj(S_unbound_vars_in_excl_clause, v_vs);
        i0 = i0 + 1;
        l2 = make_set(V0, i0);
        l1 = amp(v_ptrn_errs, l2, env);
        release(l2);
        release(v_ptrn_errs);
        v_ptrn_errs = l1;
      }
      l1 = ext_lookup(v_clause, S_src);
      add_ref(l1);
      v_expr_errs = Expr_Wf_Errors(l1, v_ext_vars, env);
      release(l1);
      l0 = amp(v_ptrn_errs, v_expr_errs, env);
      release(v_vs);
      release(v_expr_errs);
      release(v_ptrn_errs);
      goto block_1129_end;
      block_1129_end:;
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1130_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eq_clause);
    if (!b1)
    {
      goto block_1130_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1130_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_expr);
      add_ref(l2);
      l3 = amp(v_loc_vars, v_ext_vars, env);
      l1 = Expr_Wf_Errors(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      l4 = ext_lookup(v_clause, S_var);
      add_ref(l4);
      l5 = amp(v_loc_vars, v_ext_vars, env);
      l3 = In(l4, l5, env);
      release(l5);
      release(l4);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = ext_lookup(v_clause, S_var);
        add_ref(l3);
        V0[i0] = make_tagged_obj(S_already_def_ptrn_var, l3);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1131_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_clause);
    if (!b1)
    {
      goto block_1131_end;
    }
    l1 = get_inner_obj(p0);
    v_cs = l1;
    b1 = true;
    block_1131_end:;
    if (b1)
    {
      v_vs = v_loc_vars;
      add_ref(v_vs);
      v_errs = empty_set;
      get_seq_iter(q0, v_cs);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_c = get_curr_obj(q0);
        l2 = Clause_Wf_Errors(v_c, v_vs, v_ext_vars, env);
        l1 = amp(v_errs, l2, env);
        release(l2);
        release(v_errs);
        v_errs = l1;
        l2 = Syn_New_Vars(v_c, env);
        l1 = amp(v_vs, l2, env);
        release(l2);
        release(v_vs);
        v_vs = l1;
        move_forward(q0);
      }
      l0 = v_errs;
      add_ref(l0);
      release(v_errs);
      release(v_vs);
      goto block_1132_end;
      block_1132_end:;
      goto block_1123_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1133_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_clause);
    if (!b1)
    {
      goto block_1133_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1133_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_left);
      add_ref(l2);
      l1 = Clause_Wf_Errors(l2, v_loc_vars, v_ext_vars, env);
      release(l2);
      l3 = ext_lookup(v_clause, S_right);
      add_ref(l3);
      l2 = Clause_Wf_Errors(l3, v_loc_vars, v_ext_vars, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1123_end;
    }
    fail();
    block_1123_end:;
    return l0;
  }
  
  
  Obj New_Vars(Obj p0, Env &env)
  {
    Obj v_ptrn;
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    Obj v_clause;
    Obj v_s;
    Obj V0[1];
    Obj v_f;
    Obj v_stmt;
  
    b1 = is_clause(p0);
    if (b1)
    {
      v_clause = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1136_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_in_clause);
      if (!b1)
      {
        goto block_1136_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1136_end:;
      if (b1)
      {
        l1 = ext_lookup(v_clause, S_ptrn);
        add_ref(l1);
        l0 = New_Vars(l1, env);
        release(l1);
        goto block_1135_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1137_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_not_in_clause);
      if (!b1)
      {
        goto block_1137_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1137_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1135_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1138_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_in_clause);
      if (!b1)
      {
        goto block_1138_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1138_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_key_ptrn);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1135_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1139_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_not_in_clause);
      if (!b1)
      {
        goto block_1139_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1139_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1135_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1140_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_and_clause);
      if (!b1)
      {
        goto block_1140_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1140_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_left);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_right);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1135_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1141_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_or_clause);
      if (!b1)
      {
        goto block_1141_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1141_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_left);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_right);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = Intersection(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1135_end;
      }
      fail();
      block_1135_end:;
      goto block_1134_end;
    }
    b1 = is_pattern(p0);
    if (b1)
    {
      v_ptrn = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1143_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_obj_ptrn);
      if (!b1)
      {
        goto block_1143_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1143_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1142_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1144_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_type_ptrn);
      if (!b1)
      {
        goto block_1144_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1144_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1142_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1145_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_ext_var_ptrn);
      if (!b1)
      {
        goto block_1145_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1145_end:;
      if (b1)
      {
        l0 = empty_set;
        goto block_1142_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1146_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_var_ptrn);
      if (!b1)
      {
        goto block_1146_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1146_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_ptrn, S_name);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l1 = make_set(V0, i0);
        l3 = ext_lookup(v_ptrn, S_ptrn, b1);
        l3 = to_obj(b1);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = ext_lookup(v_ptrn, S_ptrn);
          add_ref(l3);
          l2 = New_Vars(l3, env);
          release(l3);
        }
        else
        {
          l2 = empty_set;
        }
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1142_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1147_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tuple_ptrn);
      if (!b1)
      {
        goto block_1147_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1147_end:;
      if (b1)
      {
        init(t0);
        l2 = ext_lookup(v_ptrn, S_fields);
        add_ref(l2);
        get_set_iter(s0, l2);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l3 = get_curr_obj(s0);
          v_f = l3;
          b1 = true;
          if (b1)
          {
            l4 = ext_lookup(v_f, S_ptrn);
            add_ref(l4);
            l3 = New_Vars(l4, env);
            release(l4);
            append(t0, l3);
          }
          move_forward(s0);
        }
        release(l2);
        l1 = make_set(t0);
        l0 = Union(l1, env);
        release(l1);
        goto block_1142_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1148_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tag_ptrn);
      if (!b1)
      {
        goto block_1148_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1148_end:;
      if (b1)
      {
        l2 = ext_lookup(v_ptrn, S_tag);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_ptrn, S_obj);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1142_end;
      }
      fail();
      block_1142_end:;
      goto block_1134_end;
    }
    b1 = is_statement(p0);
    if (b1)
    {
      v_stmt = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1150_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_assignment_stmt);
      if (!b1)
      {
        goto block_1150_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1150_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_stmt, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1149_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1151_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_if_stmt);
      if (!b1)
      {
        goto block_1151_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1151_end:;
      if (b1)
      {
        l2 = ext_lookup(v_stmt, S_body);
        add_ref(l2);
        l1 = New_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_stmt, S_else);
        add_ref(l3);
        l2 = New_Vars(l3, env);
        release(l3);
        l0 = Intersection(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1149_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1152_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_let_stmt);
      if (!b1)
      {
        goto block_1152_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1152_end:;
      if (b1)
      {
        l1 = ext_lookup(v_stmt, S_body);
        add_ref(l1);
        l0 = New_Vars(l1, env);
        release(l1);
        goto block_1149_end;
      }
      b1 = true;
      if (b1)
      {
        l0 = empty_set;
        goto block_1149_end;
      }
      fail();
      block_1149_end:;
      goto block_1134_end;
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_1153_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_1153_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_statement(l1);
      if (!b1)
      {
        goto block_1153_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_1153_end:;
    if (b1)
    {
      v_stmts = p0;
    }
    if (b1)
    {
      l1 = make_array(get_seq_len(v_stmts), S_nil);
      get_seq_iter(q0, v_stmts);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = New_Vars(v_s, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l0 = Seq_Union(l1, env);
      release(l1);
      goto block_1134_end;
    }
    fail();
    block_1134_end:;
    return l0;
  }
  
  
  Obj Ptrn_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj v_ptrn;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    SetIter s0;
    SetIter s1;
    MapIter m0;
    Obj v_t;
    Obj v_b;
    Obj v_l;
    Obj v_v;
    Obj v_c;
    Obj v_fs;
    Obj v_ext_vars;
    Obj v_ls;
    Obj v_b1;
    Obj v_b2;
  
    v_ptrn = p0;
    v_ext_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1155_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_obj_ptrn);
    if (!b1)
    {
      goto block_1155_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1155_end:;
    if (b1)
    {
      l0 = S_true;
      goto block_1154_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1156_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ptrn);
    if (!b1)
    {
      goto block_1156_end;
    }
    l1 = get_inner_obj(p0);
    v_t = l1;
    b1 = true;
    block_1156_end:;
    if (b1)
    {
      l1 = empty_set;
      l0 = Type_Is_Wf(v_t, l1, env);
      release(l1);
      goto block_1154_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1157_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ext_var_ptrn);
    if (!b1)
    {
      goto block_1157_end;
    }
    l1 = get_inner_obj(p0);
    v_v = l1;
    b1 = true;
    block_1157_end:;
    if (b1)
    {
      l0 = In(v_v, v_ext_vars, env);
      goto block_1154_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1158_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_var_ptrn);
    if (!b1)
    {
      goto block_1158_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1158_end:;
    if (b1)
    {
      l2 = ext_lookup(v_ptrn, S_name);
      add_ref(l2);
      l1 = In(l2, v_ext_vars, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_false;
        goto block_1159_end;
      }
      l1 = ext_lookup(v_ptrn, S_ptrn, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_true;
        goto block_1159_end;
      }
      l1 = ext_lookup(v_ptrn, S_name);
      add_ref(l1);
      l3 = ext_lookup(v_ptrn, S_ptrn);
      add_ref(l3);
      l2 = New_Vars(l3, env);
      release(l3);
      l0 = In(l1, l2, env);
      release(l2);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_ptrn, S_ptrn);
        add_ref(l1);
        l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1159_end;
      block_1159_end:;
      goto block_1154_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1160_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_ptrn);
    if (!b1)
    {
      goto block_1160_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1160_end:;
    if (b1)
    {
      Obj (*BF1162)(Obj, const Obj *, Env &) = env.n1_f;
      const Obj *BD1162 = env.C1_f;
      env.n1_f = cls_0;
      env.C1_f = 0;
      l1 = ext_lookup(v_ptrn, S_fields);
      add_ref(l1);
      v_ls = Apply(l1, env);
      release(l1);
      env.n1_f = BF1162;
      env.C1_f = BD1162;
      l1 = S_false;
      get_map_iter(m0, v_ls);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l3 = get_curr_key(m0);
        v_l = l3;
        b1 = true;
        if (b1)
        {
          l3 = get_curr_value(m0);
          v_c = l3;
          b1 = true;
          if (b1)
          {
            l3 = greater(v_c, to_obj(1), env);
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l1 = S_true;
              goto block_1163_end;
            }
          }
        }
        move_forward(m0);
      }
      block_1163_end:;
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_false;
        release(v_ls);
        goto block_1161_end;
      }
      v_fs = ext_lookup(v_ptrn, S_fields);
      add_ref(v_fs);
      l1 = S_false;
      get_set_iter(s0, v_fs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_b = l3;
        b1 = true;
        if (b1)
        {
          l4 = ext_lookup(v_b, S_ptrn);
          add_ref(l4);
          l3 = Ptrn_Is_Wf(l4, v_ext_vars, env);
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l1 = S_true;
            goto block_1164_end;
          }
        }
        move_forward(s0);
      }
      block_1164_end:;
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = S_false;
        release(v_fs);
        release(v_ls);
        goto block_1161_end;
      }
      l0 = S_false;
      get_set_iter(s0, v_fs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_b1 = l2;
        b1 = true;
        if (b1)
        {
          get_set_iter(s1, v_fs);
          for ( ; ; )
          {
            if (is_out_of_range(s1))
            {
              break;
            }
            l3 = get_curr_obj(s1);
            v_b2 = l3;
            b1 = true;
            if (b1)
            {
              l3 = to_obj(are_eq(v_b1, v_b2));
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l3 = S_false;
              }
              else
              {
                l3 = S_true;
              }
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l5 = ext_lookup(v_b1, S_ptrn);
                add_ref(l5);
                l4 = New_Vars(l5, env);
                release(l5);
                l6 = ext_lookup(v_b2, S_ptrn);
                add_ref(l6);
                l5 = New_Vars(l6, env);
                release(l6);
                l3 = Disjoint(l4, l5, env);
                release(l5);
                release(l4);
                if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                {
                  fail();
                }
                if (are_eq(l3, S_true))
                {
                  l3 = S_false;
                }
                else
                {
                  l3 = S_true;
                }
                if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                {
                  fail();
                }
              }
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
              if (are_eq(l3, S_true))
              {
                l0 = S_true;
                goto block_1165_end;
              }
            }
            move_forward(s1);
          }
        }
        move_forward(s0);
      }
      block_1165_end:;
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      release(v_fs);
      release(v_ls);
      goto block_1161_end;
      block_1161_end:;
      goto block_1154_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1166_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_ptrn);
    if (!b1)
    {
      goto block_1166_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1166_end:;
    if (b1)
    {
      l2 = ext_lookup(v_ptrn, S_tag);
      add_ref(l2);
      if (!is_tag_obj(l2))
      {
        b1 = false;
        goto block_1168_end;
      }
      l3 = get_tag(l2);
      b1 = are_eq(S_var_ptrn, l3);
      if (!b1)
      {
        goto block_1168_end;
      }
      l3 = get_inner_obj(l2);
      b1 = is_any(l3);
      block_1168_end:;
      l1 = to_obj(b1);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l3 = ext_lookup(v_ptrn, S_tag);
        add_ref(l3);
        l2 = ext_lookup(l3, S_name);
        add_ref(l2);
        release(l3);
        l4 = ext_lookup(v_ptrn, S_obj);
        add_ref(l4);
        l3 = New_Vars(l4, env);
        release(l4);
        l1 = In(l2, l3, env);
        release(l3);
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l0 = S_false;
          goto block_1167_end;
        }
      }
      l1 = ext_lookup(v_ptrn, S_obj);
      add_ref(l1);
      l0 = Ptrn_Is_Wf(l1, v_ext_vars, env);
      release(l1);
      goto block_1167_end;
      block_1167_end:;
      goto block_1154_end;
    }
    fail();
    block_1154_end:;
    return l0;
  }
  
  
  Obj Partitions(Obj p0, Env &env)
  {
    Obj v_obj;
    Obj v_type;
    Obj v_ptrn;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    MapIter m1;
    Obj v_t;
    Obj v_s;
    Obj v_a;
    Obj v_v;
    Obj V0[1];
    Obj v_p;
    Obj v_ts;
  
    b1 = is_type(p0);
    if (b1)
    {
      v_type = p0;
    }
    if (b1)
    {
      b1 = are_eq(p0, S_type_any);
      if (b1)
      {
        l0 = All_Objects(env);
        goto block_1170_end;
      }
      b1 = are_eq(p0, S_atom_type);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_symbols;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1171_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_symb_type);
      if (!b1)
      {
        goto block_1171_end;
      }
      l1 = get_inner_obj(p0);
      v_s = l1;
      b1 = true;
      block_1171_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = Partition(v_s, env);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      b1 = is_inttype(p0);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_integers;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1172_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_type_ref);
      if (!b1)
      {
        goto block_1172_end;
      }
      l1 = get_inner_obj(p0);
      v_ts = l1;
      b1 = true;
      block_1172_end:;
      if (b1)
      {
        l1 = brackets(env.n_typedefs, v_ts, env);
        l0 = Partitions(l1, env);
        release(l1);
        goto block_1170_end;
      }
      b1 = is_typevar(p0);
      if (b1)
      {
        l0 = All_Objects(env);
        goto block_1170_end;
      }
      b1 = is_settype(p0);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_sets;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      b1 = is_seqtype(p0);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_sequences;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      b1 = is_maptype(p0);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_maps;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      b1 = is_tupletype(p0);
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_maps;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1170_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1173_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_union_type);
      if (!b1)
      {
        goto block_1173_end;
      }
      l1 = get_inner_obj(p0);
      v_ts = l1;
      b1 = true;
      block_1173_end:;
      if (b1)
      {
        init(t0);
        get_set_iter(s0, v_ts);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l3 = get_curr_obj(s0);
          v_t = l3;
          b1 = true;
          if (b1)
          {
            l3 = Partitions(v_t, env);
            append(t0, l3);
          }
          move_forward(s0);
        }
        l1 = make_set(t0);
        l0 = Merge_Partitions(l1, env);
        release(l1);
        goto block_1170_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1174_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tag_type);
      if (!b1)
      {
        goto block_1174_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1174_end:;
      if (b1)
      {
        l2 = ext_lookup(v_type, S_tag_type);
        add_ref(l2);
        b1 = is_symbtype(l2);
        l1 = to_obj(b1);
        release(l2);
        if (!are_eq(l1, S_true))
        {
          fail();
        }
        i0 = 0;
        l3 = ext_lookup(v_type, S_tag_type);
        add_ref(l3);
        l2 = Untag(l3, env);
        release(l3);
        l1 = Untag(l2, env);
        release(l2);
        V0[i0] = make_tagged_obj(S_tagged_obj, l1);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1175_end;
        block_1175_end:;
        goto block_1170_end;
      }
      fail();
      block_1170_end:;
      goto block_1169_end;
    }
    b1 = is_pattern(p0);
    if (b1)
    {
      v_ptrn = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1177_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_obj_ptrn);
      if (!b1)
      {
        goto block_1177_end;
      }
      l1 = get_inner_obj(p0);
      v_obj = l1;
      b1 = true;
      block_1177_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = Partition(v_obj, env);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1178_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_type_ptrn);
      if (!b1)
      {
        goto block_1178_end;
      }
      l1 = get_inner_obj(p0);
      v_type = l1;
      b1 = true;
      block_1178_end:;
      if (b1)
      {
        l0 = Partitions(v_type, env);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1179_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_ext_var_ptrn);
      if (!b1)
      {
        goto block_1179_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1179_end:;
      if (b1)
      {
        l0 = All_Objects(env);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1180_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_var_ptrn);
      if (!b1)
      {
        goto block_1180_end;
      }
      l1 = get_inner_obj(p0);
      if (!is_ne_map(l1))
      {
        b1 = false;
        goto block_1181_end;
      }
      l2 = lookup(l1, S_ptrn, b1);
      if (!b1)
      {
        goto block_1181_end;
      }
      v_p = l2;
      b1 = true;
      if (!b1)
      {
        goto block_1181_end;
      }
      block_1181_end:;
      block_1180_end:;
      if (b1)
      {
        l1 = ext_lookup(v_ptrn, S_ptrn);
        add_ref(l1);
        l0 = Partitions(l1, env);
        release(l1);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1182_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_var_ptrn);
      if (!b1)
      {
        goto block_1182_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1182_end:;
      if (b1)
      {
        l0 = All_Objects(env);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1183_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tuple_ptrn);
      if (!b1)
      {
        goto block_1183_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1183_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_maps;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1184_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tag_ptrn);
      if (!b1)
      {
        goto block_1184_end;
      }
      l1 = get_inner_obj(p0);
      if (!is_ne_map(l1))
      {
        b1 = false;
        goto block_1185_end;
      }
      l2 = lookup(l1, S_tag, b1);
      if (!b1)
      {
        goto block_1185_end;
      }
      if (!is_tag_obj(l2))
      {
        b1 = false;
        goto block_1186_end;
      }
      l3 = get_tag(l2);
      b1 = are_eq(l3, S_obj_ptrn);
      if (!b1)
      {
        goto block_1186_end;
      }
      l3 = get_inner_obj(l2);
      if (!is_tag_obj(l3))
      {
        b1 = false;
        goto block_1187_end;
      }
      l4 = get_tag(l3);
      b1 = are_eq(l4, S_object);
      if (!b1)
      {
        goto block_1187_end;
      }
      l4 = get_inner_obj(l3);
      v_a = l4;
      b1 = true;
      block_1187_end:;
      block_1186_end:;
      if (!b1)
      {
        goto block_1185_end;
      }
      block_1185_end:;
      block_1184_end:;
      if (b1)
      {
        i0 = 0;
        add_ref(v_a);
        V0[i0] = make_tagged_obj(S_tagged_obj, v_a);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1176_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1188_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_tag_ptrn);
      if (!b1)
      {
        goto block_1188_end;
      }
      l1 = get_inner_obj(p0);
      if (!is_ne_map(l1))
      {
        b1 = false;
        goto block_1189_end;
      }
      l2 = lookup(l1, S_tag, b1);
      if (!b1)
      {
        goto block_1189_end;
      }
      if (!is_tag_obj(l2))
      {
        b1 = false;
        goto block_1190_end;
      }
      l3 = get_tag(l2);
      b1 = are_eq(l3, S_var_ptrn);
      if (!b1)
      {
        goto block_1190_end;
      }
      l3 = get_inner_obj(l2);
      if (!is_ne_map(l3))
      {
        b1 = false;
        goto block_1191_end;
      }
      if (!(get_map_size(l3) == 1))
      {
        b1 = false;
        goto block_1191_end;
      }
      get_map_iter(m1, l3);
      l4 = get_curr_key(m1);
      if (!are_eq(l4, S_name))
      {
        b1 = false;
        goto block_1191_end;
      }
      l4 = get_curr_value(m1);
      v_v = l4;
      b1 = true;
      if (!b1)
      {
        goto block_1191_end;
      }
      block_1191_end:;
      block_1190_end:;
      if (!b1)
      {
        goto block_1189_end;
      }
      block_1189_end:;
      block_1188_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_tagged_objs;
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        goto block_1176_end;
      }
      fail();
      block_1176_end:;
      goto block_1169_end;
    }
    fail();
    block_1169_end:;
    return l0;
  }
  
  
  Obj To_C_Var_Name(Obj p0, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj v_n;
    Obj v_a;
    Obj v_v;
    Obj V0[6];
  
    b1 = is_objvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1194_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_var);
      if (!b1)
      {
        goto block_1194_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_atom(l1);
      if (b1)
      {
        v_a = l1;
      }
      block_1194_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(118);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = to_str(v_a);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1195_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_fn_par);
      if (!b1)
      {
        goto block_1195_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_nat(l1);
      if (b1)
      {
        v_n = l1;
      }
      block_1195_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = To_Str(v_n, env);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1196_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_named_par);
      if (!b1)
      {
        goto block_1196_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_atom(l1);
      if (b1)
      {
        v_a = l1;
      }
      block_1196_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(118);
        i0 = i0 + 1;
        V0[i0] = to_obj(46);
        i0 = i0 + 1;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = to_str(v_a);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1197_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_unique_var);
      if (!b1)
      {
        goto block_1197_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_nat(l1);
      if (b1)
      {
        v_n = l1;
      }
      block_1197_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(117);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = To_Str(v_n, env);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1198_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_cls_ext_par);
      if (!b1)
      {
        goto block_1198_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_nat(l1);
      if (b1)
      {
        v_n = l1;
      }
      block_1198_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(67);
        i0 = i0 + 1;
        V0[i0] = to_obj(91);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_Str(v_n, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(93);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1199_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_lvar);
      if (!b1)
      {
        goto block_1199_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_nat(l1);
      if (b1)
      {
        v_n = l1;
      }
      block_1199_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(108);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = To_Str(v_n, env);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1200_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_evar);
      if (!b1)
      {
        goto block_1200_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1200_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(86);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        l4 = make_tagged_obj(S_string, l5);
        l6 = ext_lookup(v_v, S_id);
        add_ref(l6);
        l5 = To_Str(l6, env);
        release(l6);
        l3 = amp(l4, l5, env);
        release(l5);
        release(l4);
        i0 = 0;
        V0[i0] = to_obj(91);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        l4 = make_tagged_obj(S_string, l5);
        l2 = amp(l3, l4, env);
        release(l4);
        release(l3);
        l4 = ext_lookup(v_v, S_idx);
        add_ref(l4);
        l3 = To_C_Expr(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(93);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1193_end;
      }
      fail();
      block_1193_end:;
      goto block_1192_end;
    }
    b1 = is_setitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(115);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_streamvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_seqitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(113);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_mapitvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(109);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_intvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(105);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_boolvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = Untag(v_v, env);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    b1 = is_vecvar(p0);
    if (b1)
    {
      v_v = p0;
    }
    if (b1)
    {
      i0 = 0;
      V0[i0] = to_obj(86);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      l3 = ext_lookup(v_v, S_id);
      add_ref(l3);
      l2 = To_Str(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1192_end;
    }
    fail();
    block_1192_end:;
    return l0;
  }
  
  
  Obj Stmt_Wf_Errors(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    SeqIter q0;
    Obj v_errs;
    Obj v_b;
    Obj v_e;
    Obj v_ss;
    Obj V0[1];
    Obj v_fd;
    Obj v_it;
    Obj v_vs;
    Obj v_stmt;
    Obj v_all_def_vars;
    Obj v_readonly_vars;
    Obj v_inside_loop;
    Obj v_errs_cond;
    Obj v_errs_body;
    Obj v_errs_else;
    Obj v_asgnms_errs;
    Obj v_new_impl_params;
    Obj v_stmts_errs;
  
    v_stmt = p0;
    v_all_def_vars = p1;
    v_readonly_vars = p2;
    v_inside_loop = p3;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1202_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assignment_stmt);
    if (!b1)
    {
      goto block_1202_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1202_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_value);
      add_ref(l2);
      l1 = Expr_Wf_Errors(l2, v_all_def_vars, env);
      release(l2);
      i0 = 0;
      l4 = ext_lookup(v_stmt, S_var);
      add_ref(l4);
      l3 = In(l4, v_readonly_vars, env);
      release(l4);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = ext_lookup(v_stmt, S_var);
        add_ref(l3);
        V0[i0] = make_tagged_obj(S_asgnm_readonly_var, l3);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1203_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_1203_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1203_end:;
    if (b1)
    {
      l0 = Expr_Wf_Errors(v_e, v_all_def_vars, env);
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1204_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assert_stmt);
    if (!b1)
    {
      goto block_1204_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1204_end:;
    if (b1)
    {
      l0 = Expr_Wf_Errors(v_e, v_all_def_vars, env);
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1205_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_print_stmt);
    if (!b1)
    {
      goto block_1205_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1205_end:;
    if (b1)
    {
      l0 = Expr_Wf_Errors(v_e, v_all_def_vars, env);
      goto block_1201_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      l0 = empty_set;
      goto block_1201_end;
    }
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      i0 = 0;
      l1 = v_inside_loop;
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = S_break_outside_loop;
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1206_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_inf_loop_stmt);
    if (!b1)
    {
      goto block_1206_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1206_end:;
    if (b1)
    {
      l1 = Stmts_Wf_Errors(v_ss, v_all_def_vars, v_readonly_vars, S_true, env);
      i0 = 0;
      l3 = Has_Top_Level_Break(v_ss, env);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = S_false;
      }
      else
      {
        l3 = S_true;
      }
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = Has_Return(v_ss, env);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          l3 = S_false;
        }
        else
        {
          l3 = S_true;
        }
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        V0[i0] = S_no_way_out_loop;
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1207_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_1207_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1207_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_branches);
      add_ref(l1);
      v_errs_cond = make_array(get_seq_len(l1), S_nil);
      get_seq_iter(q0, l1);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l4 = ext_lookup(v_b, S_cond);
        add_ref(l4);
        l2 = Expr_Wf_Errors(l4, v_all_def_vars, env);
        release(l4);
        set_at(v_errs_cond, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l1);
      l1 = ext_lookup(v_stmt, S_branches);
      add_ref(l1);
      v_errs_body = make_array(get_seq_len(l1), S_nil);
      get_seq_iter(q0, l1);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l4 = ext_lookup(v_b, S_body);
        add_ref(l4);
        l2 = Stmts_Wf_Errors(l4, v_all_def_vars, v_readonly_vars, v_inside_loop, env);
        release(l4);
        set_at(v_errs_body, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l1);
      l1 = ext_lookup(v_stmt, S_else);
      add_ref(l1);
      v_errs_else = Stmts_Wf_Errors(l1, v_all_def_vars, v_readonly_vars, v_inside_loop, env);
      release(l1);
      l2 = Seq_Union(v_errs_cond, env);
      l3 = Seq_Union(v_errs_body, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l0 = amp(l1, v_errs_else, env);
      release(l1);
      release(v_errs_cond);
      release(v_errs_body);
      release(v_errs_else);
      goto block_1208_end;
      block_1208_end:;
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1209_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_loop_stmt);
    if (!b1)
    {
      goto block_1209_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1209_end:;
    if (b1)
    {
      v_vs = v_all_def_vars;
      add_ref(v_vs);
      l1 = ext_lookup(v_stmt, S_skip_first);
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l3 = ext_lookup(v_stmt, S_body);
        add_ref(l3);
        l2 = Syn_New_Vars(l3, env);
        release(l3);
        l1 = amp(v_vs, l2, env);
        release(l2);
        release(v_vs);
        v_vs = l1;
      }
      l1 = ext_lookup(v_stmt, S_cond);
      add_ref(l1);
      v_errs_cond = Expr_Wf_Errors(l1, v_vs, env);
      release(l1);
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_errs_body = Stmts_Wf_Errors(l1, v_all_def_vars, v_readonly_vars, S_true, env);
      release(l1);
      l0 = amp(v_errs_cond, v_errs_body, env);
      release(v_vs);
      release(v_errs_cond);
      release(v_errs_body);
      goto block_1210_end;
      block_1210_end:;
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1211_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_for_stmt);
    if (!b1)
    {
      goto block_1211_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1211_end:;
    if (b1)
    {
      v_vs = v_all_def_vars;
      add_ref(v_vs);
      v_errs = empty_set;
      l1 = ext_lookup(v_stmt, S_loops);
      add_ref(l1);
      get_seq_iter(q0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_it = get_curr_obj(q0);
        l3 = Iter_Wf_Errors(v_it, v_vs, env);
        l2 = amp(v_errs, l3, env);
        release(l3);
        release(v_errs);
        v_errs = l2;
        l3 = Syn_New_Vars(v_it, env);
        l2 = amp(v_vs, l3, env);
        release(l3);
        release(v_vs);
        v_vs = l2;
        move_forward(q0);
      }
      release(l1);
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = Stmts_Wf_Errors(l2, v_vs, v_readonly_vars, S_true, env);
      release(l2);
      l0 = amp(v_errs, l1, env);
      release(l1);
      release(v_errs);
      release(v_vs);
      goto block_1212_end;
      block_1212_end:;
      goto block_1201_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1213_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_let_stmt);
    if (!b1)
    {
      goto block_1213_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1213_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l2);
      l1 = Set(l2, env);
      release(l2);
      v_asgnms_errs = Fndefs_Wf_Errors(l1, v_all_def_vars, env);
      release(l1);
      l3 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l3);
      l2 = make_array(get_seq_len(l3), S_nil);
      get_seq_iter(q0, l3);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_fd = get_curr_obj(q0);
        l4 = Untyped_Sgn(v_fd, env);
        set_at(l2, i0, l4);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l3);
      l1 = Set(l2, env);
      release(l2);
      v_new_impl_params = amp(env.n_impl_params, l1, env);
      release(l1);
      Obj BK1215 = env.n_impl_params;
      env.n_impl_params = v_new_impl_params;
      add_ref(env.n_impl_params);
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_stmts_errs = Stmts_Wf_Errors(l1, v_all_def_vars, v_readonly_vars, v_inside_loop, env);
      release(l1);
      release(env.n_impl_params);
      env.n_impl_params = BK1215;
      l0 = amp(v_asgnms_errs, v_stmts_errs, env);
      release(v_asgnms_errs);
      release(v_new_impl_params);
      release(v_stmts_errs);
      goto block_1214_end;
      block_1214_end:;
      goto block_1201_end;
    }
    fail();
    block_1201_end:;
    return l0;
  }
  
  
  Obj Ptrn_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj v_type;
    Obj v_var;
    Obj v_ptrn;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    int i2;
    SetIter s0;
    SeqIter q0;
    int i4;
    MapIter m0;
    int i5;
    int i6;
    Obj v_len;
    Obj v_tag_ptrn;
    Obj v_errs;
    Obj v_bs;
    Obj v_b;
    Obj v_i1;
    Obj v_i2;
    Obj v_v;
    Obj V0[1];
    Obj V1[1];
    Obj v_f;
    Obj v_vs;
    Obj v_ext_vars;
    Obj v_ptrn_errs;
    Obj v_var_errs;
    Obj v_ls;
    Obj v_bvs;
    Obj v_dupl_labs;
    Obj v_dupl_vars;
    Obj v_dupl_lab_errs;
    Obj v_dupl_var_errs;
    Obj v_sub_ptrn_errs;
    Obj v_obj_vs;
  
    v_ptrn = p0;
    v_ext_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1217_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_obj_ptrn);
    if (!b1)
    {
      goto block_1217_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1217_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1216_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1218_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ptrn);
    if (!b1)
    {
      goto block_1218_end;
    }
    l1 = get_inner_obj(p0);
    v_type = l1;
    b1 = true;
    block_1218_end:;
    if (b1)
    {
      l0 = Type_Wf_Errors(v_type, env);
      goto block_1216_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1219_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ext_var_ptrn);
    if (!b1)
    {
      goto block_1219_end;
    }
    l1 = get_inner_obj(p0);
    v_v = l1;
    b1 = true;
    block_1219_end:;
    if (b1)
    {
      i0 = 0;
      l1 = In(v_v, v_ext_vars, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        add_ref(v_v);
        V0[i0] = make_tagged_obj(S_undef_bound_ptrn_var, v_v);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_1216_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1220_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_var_ptrn);
    if (!b1)
    {
      goto block_1220_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1220_end:;
    if (b1)
    {
      l1 = ext_lookup(v_ptrn, S_ptrn, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = ext_lookup(v_ptrn, S_ptrn);
        add_ref(l1);
        v_vs = New_Vars(l1, env);
        release(l1);
      }
      else
      {
        v_vs = empty_set;
      }
      l2 = ext_lookup(v_ptrn, S_name);
      add_ref(l2);
      l1 = In(l2, v_vs, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_ptrn, S_name);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l1 = make_set(V0, i0);
        v_var_errs = make_tagged_obj(S_dupl_ptrn_vars, l1);
      }
      else
      {
        v_var_errs = empty_set;
      }
      l1 = ext_lookup(v_ptrn, S_ptrn, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = ext_lookup(v_ptrn, S_ptrn);
        add_ref(l1);
        v_ptrn_errs = Ptrn_Wf_Errors(l1, v_ext_vars, env);
        release(l1);
      }
      else
      {
        v_ptrn_errs = empty_set;
      }
      l0 = amp(v_var_errs, v_ptrn_errs, env);
      release(v_vs);
      release(v_ptrn_errs);
      release(v_var_errs);
      goto block_1221_end;
      block_1221_end:;
      goto block_1216_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1222_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_ptrn);
    if (!b1)
    {
      goto block_1222_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1222_end:;
    if (b1)
    {
      l1 = ext_lookup(v_ptrn, S_fields);
      add_ref(l1);
      v_bs = Rand_Sort(l1, env);
      release(l1);
      v_len = Length(v_bs, env);
      v_ls = make_array(get_seq_len(v_bs), S_nil);
      get_seq_iter(q0, v_bs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l2 = ext_lookup(v_b, S_label);
        add_ref(l2);
        set_at(v_ls, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      v_bvs = make_array(get_seq_len(v_bs), S_nil);
      get_seq_iter(q0, v_bs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l4 = ext_lookup(v_b, S_ptrn);
        add_ref(l4);
        l2 = New_Vars(l4, env);
        release(l4);
        set_at(v_bvs, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      v_dupl_labs = empty_set;
      v_dupl_vars = empty_set;
      l1 = to_obj(0);
      i2 = get_int_val(l1);
      l1 = minus(v_len, to_obj(2), env);
      i1 = get_int_val(l1);
      for ( ; ; )
      {
        if (i2 > i1)
        {
          break;
        }
        v_i1 = to_obj(i2);
        l2 = plus(v_i1, to_obj(1), env);
        i5 = get_int_val(l2);
        l2 = minus(v_len, to_obj(1), env);
        i4 = get_int_val(l2);
        for ( ; ; )
        {
          if (i5 > i4)
          {
            break;
          }
          v_i2 = to_obj(i5);
          l4 = brackets(v_ls, v_i1, env);
          l5 = brackets(v_ls, v_i2, env);
          l3 = to_obj(are_eq(l4, l5));
          release(l5);
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            i6 = 0;
            V0[i6] = brackets(v_ls, v_i1, env);
            i6 = i6 + 1;
            l4 = make_set(V0, i6);
            l3 = amp(v_dupl_labs, l4, env);
            release(l4);
            release(v_dupl_labs);
            v_dupl_labs = l3;
          }
          l3 = brackets(v_bvs, v_i1, env);
          l4 = brackets(v_bvs, v_i2, env);
          v_vs = Intersection(l3, l4, env);
          release(l4);
          release(l3);
          l4 = empty_set;
          l3 = to_obj(are_eq(v_vs, l4));
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = amp(v_dupl_vars, v_vs, env);
            release(v_dupl_vars);
            v_dupl_vars = l3;
          }
          release(v_vs);
          i5 = i5 + 1;
        }
        i2 = i2 + 1;
      }
      l2 = empty_set;
      l1 = to_obj(are_eq(v_dupl_labs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_dupl_lab_errs = empty_set;
      }
      else
      {
        add_ref(v_dupl_labs);
        v_dupl_lab_errs = make_tagged_obj(S_dupl_ptrn_labels, v_dupl_labs);
      }
      l2 = empty_set;
      l1 = to_obj(are_eq(v_dupl_vars, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_dupl_var_errs = empty_set;
      }
      else
      {
        add_ref(v_dupl_vars);
        v_dupl_var_errs = make_tagged_obj(S_dupl_ptrn_vars, v_dupl_vars);
      }
      init(t0);
      l2 = ext_lookup(v_ptrn, S_fields);
      add_ref(l2);
      get_set_iter(s0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_f = l3;
        b1 = true;
        if (b1)
        {
          l4 = ext_lookup(v_f, S_ptrn);
          add_ref(l4);
          l3 = Ptrn_Wf_Errors(l4, v_ext_vars, env);
          release(l4);
          append(t0, l3);
        }
        move_forward(s0);
      }
      release(l2);
      l1 = make_set(t0);
      v_sub_ptrn_errs = Union(l1, env);
      release(l1);
      l1 = amp(v_dupl_lab_errs, v_dupl_var_errs, env);
      l0 = amp(l1, v_sub_ptrn_errs, env);
      release(l1);
      release(v_len);
      release(v_bs);
      release(v_ls);
      release(v_bvs);
      release(v_dupl_labs);
      release(v_dupl_vars);
      release(v_dupl_lab_errs);
      release(v_dupl_var_errs);
      release(v_sub_ptrn_errs);
      goto block_1223_end;
      block_1223_end:;
      goto block_1216_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1224_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_ptrn);
    if (!b1)
    {
      goto block_1224_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1224_end:;
    if (b1)
    {
      l1 = ext_lookup(v_ptrn, S_obj);
      add_ref(l1);
      v_errs = Ptrn_Wf_Errors(l1, v_ext_vars, env);
      release(l1);
      v_tag_ptrn = ext_lookup(v_ptrn, S_tag);
      add_ref(v_tag_ptrn);
      if (!is_tag_obj(v_tag_ptrn))
      {
        b1 = false;
        goto block_1226_end;
      }
      l2 = get_tag(v_tag_ptrn);
      b1 = are_eq(S_var_ptrn, l2);
      if (!b1)
      {
        goto block_1226_end;
      }
      l2 = get_inner_obj(v_tag_ptrn);
      if (!is_ne_map(l2))
      {
        b1 = false;
        goto block_1227_end;
      }
      i0 = get_map_size(l2);
      if (!((i0 >= 1) & (i0 <= 1)))
      {
        b1 = false;
        goto block_1227_end;
      }
      get_map_iter(m0, l2);
      if (is_out_of_range(m0))
      {
        b1 = false;
        goto block_1227_end;
      }
      l3 = get_curr_key(m0);
      if (!are_eq(l3, S_name))
      {
        b1 = false;
        goto block_1227_end;
      }
      l3 = get_curr_value(m0);
      b1 = is_var(l3);
      if (!b1)
      {
        goto block_1227_end;
      }
      move_forward(m0);
      b1 = is_out_of_range(m0);
      block_1227_end:;
      block_1226_end:;
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_var = ext_lookup(v_tag_ptrn, S_name);
        add_ref(v_var);
        l1 = ext_lookup(v_ptrn, S_obj);
        add_ref(l1);
        v_obj_vs = New_Vars(l1, env);
        release(l1);
        l1 = In(v_var, v_obj_vs, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = v_var;
          add_ref(V1[i1]);
          i1 = i1 + 1;
          l3 = make_set(V1, i1);
          V0[i0] = make_tagged_obj(S_dupl_ptrn_vars, l3);
          i0 = i0 + 1;
          l2 = make_set(V0, i0);
          l1 = amp(v_errs, l2, env);
          release(l2);
          release(v_errs);
          v_errs = l1;
        }
        release(v_var);
        release(v_obj_vs);
      }
      l0 = v_errs;
      add_ref(l0);
      release(v_tag_ptrn);
      release(v_errs);
      goto block_1225_end;
      block_1225_end:;
      goto block_1216_end;
    }
    fail();
    block_1216_end:;
    return l0;
  }
  
  
  Obj Stmt_Is_Wf(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Stream t0;
    Stream t1;
    MapIter m0;
    Obj v_e;
    Obj v_ss;
    Obj v_v;
    Obj V0[2];
    Obj v_scalar_vars;
    Obj v_stmt;
    Obj v_is_inside_loop;
    Obj v_nvs;
  
    v_stmt = p0;
    v_scalar_vars = p1;
    v_is_inside_loop = p2;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1229_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assignment_stmt);
    if (!b1)
    {
      goto block_1229_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1229_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_value);
      add_ref(l1);
      l0 = Expr_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1230_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_1230_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1230_end:;
    if (b1)
    {
      l0 = Expr_Is_Wf(v_e, v_scalar_vars, env);
      goto block_1228_end;
    }
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      l0 = v_is_inside_loop;
      add_ref(l0);
      goto block_1228_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      l0 = S_true;
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1231_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assert_stmt);
    if (!b1)
    {
      goto block_1231_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1231_end:;
    if (b1)
    {
      l0 = Expr_Is_Wf(v_e, v_scalar_vars, env);
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1232_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_print_stmt);
    if (!b1)
    {
      goto block_1232_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1232_end:;
    if (b1)
    {
      l0 = Expr_Is_Wf(v_e, v_scalar_vars, env);
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1233_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_1233_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1233_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_cond);
      add_ref(l1);
      l0 = Expr_Is_Wf(l1, v_scalar_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_body);
        add_ref(l1);
        l0 = Stmts_Are_Wf(l1, v_scalar_vars, v_is_inside_loop, S_false, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_else);
        add_ref(l1);
        l2 = empty_seq;
        l0 = to_obj(are_eq(l1, l2));
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_false))
        {
          l1 = ext_lookup(v_stmt, S_else);
          add_ref(l1);
          l0 = Stmts_Are_Wf(l1, v_scalar_vars, v_is_inside_loop, S_false, env);
          release(l1);
          if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1234_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_let_stmt);
    if (!b1)
    {
      goto block_1234_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1234_end:;
    if (b1)
    {
      l0 = S_false;
      l1 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l1);
      get_map_iter(m0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l2 = get_curr_key(m0);
        b1 = true;
        if (b1)
        {
          l2 = get_curr_value(m0);
          v_e = l2;
          b1 = true;
          if (b1)
          {
            l2 = Expr_Is_Wf(v_e, v_scalar_vars, env);
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l2 = S_false;
            }
            else
            {
              l2 = S_true;
            }
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_true;
              goto block_1235_end;
            }
          }
        }
        move_forward(m0);
      }
      release(l1);
      block_1235_end:;
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        init(t0);
        init(t1);
        l3 = ext_lookup(v_stmt, S_asgnms);
        add_ref(l3);
        get_map_iter(m0, l3);
        for ( ; ; )
        {
          if (is_out_of_range(m0))
          {
            break;
          }
          l4 = get_curr_key(m0);
          v_v = l4;
          b1 = true;
          if (b1)
          {
            l4 = get_curr_value(m0);
            b1 = is_clsexpr(l4);
            if (b1)
            {
              v_e = l4;
            }
            if (b1)
            {
              add_ref(v_v);
              append(t0, v_v);
              l5 = ext_lookup(v_e, S_params);
              add_ref(l5);
              l4 = Length(l5, env);
              release(l5);
              append(t1, l4);
            }
          }
          move_forward(m0);
        }
        release(l3);
        l2 = make_map(t0, t1);
        l1 = amp(env.n_cls_vars, l2, env);
        release(l2);
        Obj BK1236 = env.n_cls_vars;
        env.n_cls_vars = l1;
        add_ref(env.n_cls_vars);
        l2 = ext_lookup(v_stmt, S_body);
        add_ref(l2);
        init(t0);
        l5 = ext_lookup(v_stmt, S_asgnms);
        add_ref(l5);
        get_map_iter(m0, l5);
        for ( ; ; )
        {
          if (is_out_of_range(m0))
          {
            break;
          }
          l6 = get_curr_key(m0);
          v_v = l6;
          b1 = true;
          if (b1)
          {
            l6 = get_curr_value(m0);
            b1 = is_expr(l6);
            if (b1)
            {
              v_e = l6;
            }
            if (b1)
            {
              add_ref(v_v);
              append(t0, v_v);
            }
          }
          move_forward(m0);
        }
        release(l5);
        l4 = make_set(t0);
        l3 = amp(v_scalar_vars, l4, env);
        release(l4);
        l0 = Stmts_Are_Wf(l2, l3, v_is_inside_loop, S_false, env);
        release(l3);
        release(l2);
        release(env.n_cls_vars);
        env.n_cls_vars = BK1236;
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1237_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_loop_stmt);
    if (!b1)
    {
      goto block_1237_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1237_end:;
    if (b1)
    {
      l0 = Stmts_Are_Wf(v_ss, v_scalar_vars, S_true, S_false, env);
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1238_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_foreach_stmt);
    if (!b1)
    {
      goto block_1238_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1238_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_stmt, S_var);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = ext_lookup(v_stmt, S_idx_var, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = ext_lookup(v_stmt, S_idx_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      v_nvs = make_set(V0, i0);
      l0 = Disjoint(v_nvs, v_scalar_vars, env);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_values);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_scalar_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_body);
        add_ref(l1);
        l2 = amp(v_scalar_vars, v_nvs, env);
        l0 = Stmts_Are_Wf(l1, l2, S_true, S_false, env);
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      release(v_nvs);
      goto block_1239_end;
      block_1239_end:;
      goto block_1228_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1240_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_for_stmt);
    if (!b1)
    {
      goto block_1240_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1240_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_var);
      add_ref(l1);
      l0 = In(l1, v_scalar_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_start_val);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_scalar_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_end_val);
        add_ref(l1);
        l0 = Expr_Is_Wf(l1, v_scalar_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_stmt, S_body);
        add_ref(l1);
        i0 = 0;
        V0[i0] = ext_lookup(v_stmt, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l3 = make_set(V0, i0);
        l2 = amp(v_scalar_vars, l3, env);
        release(l3);
        l0 = Stmts_Are_Wf(l1, l2, S_true, S_false, env);
        release(l2);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1228_end;
    }
    fail();
    block_1228_end:;
    return l0;
  }
  
  
  Obj Gen_Ptrn_Matching_Code(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_x;
    Obj v_obj;
    Obj v_var;
    Obj v_ptrn;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Obj l8;
    SeqIter q0;
    Obj v_code;
    Obj v_res_var;
    Obj v_t;
    Obj v_i;
    Obj v_v;
    Obj V0[4];
    Obj v_f;
    Obj v_it_var;
    Obj v_obj_var;
    Obj v_sorted_fields;
  
    v_ptrn = p0;
    v_obj = p1;
    v_res_var = p2;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1242_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_obj_ptrn);
    if (!b1)
    {
      goto block_1242_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_leafobj(l1);
    if (b1)
    {
      v_x = l1;
    }
    block_1242_end:;
    if (b1)
    {
      i0 = 0;
      l1 = Is_Eq(v_obj, v_x, env);
      V0[i0] = Set_Bvar(v_res_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1241_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1243_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ptrn);
    if (!b1)
    {
      goto block_1243_end;
    }
    l1 = get_inner_obj(p0);
    v_t = l1;
    b1 = true;
    block_1243_end:;
    if (b1)
    {
      l0 = Gen_Type_Checking_Code(v_t, v_obj, v_res_var, env);
      goto block_1241_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1244_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ext_var_ptrn);
    if (!b1)
    {
      goto block_1244_end;
    }
    l1 = get_inner_obj(p0);
    v_v = l1;
    b1 = true;
    block_1244_end:;
    if (b1)
    {
      i0 = 0;
      l1 = Is_Eq(v_obj, v_v, env);
      V0[i0] = Set_Bvar(v_res_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1241_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1245_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_var_ptrn);
    if (!b1)
    {
      goto block_1245_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1245_end:;
    if (b1)
    {
      l1 = ext_lookup(v_ptrn, S_ptrn, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_ptrn, S_ptrn);
        add_ref(l2);
        l1 = Gen_Ptrn_Matching_Code(l2, v_obj, v_res_var, env);
        release(l2);
        i0 = 0;
        l4 = ext_lookup(v_ptrn, S_name);
        add_ref(l4);
        l3 = Set_Var(l4, v_obj, env);
        release(l4);
        V0[i0] = Do_If(v_res_var, l3, env);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
      }
      else
      {
        i0 = 0;
        l1 = ext_lookup(v_ptrn, S_name);
        add_ref(l1);
        V0[i0] = Set_Var(l1, v_obj, env);
        release(l1);
        i0 = i0 + 1;
        V0[i0] = Set_Bvar(v_res_var, S_true, env);
        i0 = i0 + 1;
        l0 = make_seq(V0, i0);
      }
      goto block_1241_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1246_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_ptrn);
    if (!b1)
    {
      goto block_1246_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1246_end:;
    if (b1)
    {
      v_obj_var = Lvar(env.n_next_obj_var_id, env);
      v_it_var = Map_It_Var(env.n_next_map_it_var_id, env);
      Obj (*BF1248)(Obj, Obj, const Obj *, Env &) = env.n2_is_strictly_ordered;
      const Obj *BD1248 = env.C2_is_strictly_ordered;
      env.n2_is_strictly_ordered = cls_27;
      env.C2_is_strictly_ordered = 0;
      l1 = ext_lookup(v_ptrn, S_fields);
      add_ref(l1);
      v_sorted_fields = Sort_Set(l1, env);
      release(l1);
      env.n2_is_strictly_ordered = BF1248;
      env.C2_is_strictly_ordered = BD1248;
      i0 = 0;
      l2 = Is_Empty_Map(v_obj, env);
      l1 = Block_Success_If(l2, v_res_var, env);
      release(l2);
      l3 = empty_seq;
      l2 = to_obj(are_eq(v_sorted_fields, l3));
      release(l3);
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Ne_Map(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l1, v_res_var, env);
      release(l1);
      i0 = i0 + 1;
      l3 = Get_Map_Size(v_obj, env);
      l4 = Length(v_sorted_fields, env);
      l2 = Is_Eq(l3, l4, env);
      release(l4);
      release(l3);
      l1 = Block_Failure_If_Not(l2, v_res_var, env);
      release(l2);
      l2 = ext_lookup(v_ptrn, S_is_open);
      add_ref(l2);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = Get_Iter(v_it_var, v_obj, env);
      l2 = ext_lookup(v_ptrn, S_is_open);
      add_ref(l2);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l1 = plus(env.n_next_map_it_var_id, to_obj(1), env);
      Obj BK1249 = env.n_next_map_it_var_id;
      env.n_next_map_it_var_id = l1;
      add_ref(env.n_next_map_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1250 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      l3 = ext_lookup(v_ptrn, S_is_open);
      add_ref(l3);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        get_seq_iter(q0, v_sorted_fields);
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_f = get_curr_obj(q0);
          i0 = 0;
          l7 = ext_lookup(v_f, S_label);
          add_ref(l7);
          V0[i0] = Lookup(v_res_var, v_obj_var, v_obj, l7, env);
          release(l7);
          i0 = i0 + 1;
          V0[i0] = Exit_Block_If_Not(v_res_var, env);
          i0 = i0 + 1;
          l6 = make_seq(V0, i0);
          l5 = amp(v_code, l6, env);
          release(l6);
          l7 = ext_lookup(v_f, S_ptrn);
          add_ref(l7);
          l6 = Gen_Ptrn_Matching_Code(l7, v_obj_var, v_res_var, env);
          release(l7);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          i0 = 0;
          V0[i0] = Exit_Block_If_Not(v_res_var, env);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          release(v_code);
          v_code = l3;
          move_forward(q0);
        }
      }
      else
      {
        get_seq_iter(q0, v_sorted_fields);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_f = get_curr_obj(q0);
          v_i = to_obj(i0);
          i1 = 0;
          l7 = Move_Forward(v_it_var, env);
          l8 = greater(v_i, to_obj(0), env);
          V0[i1] = Maybe_Op(l7, l8, env);
          release(l8);
          release(l7);
          i1 = i1 + 1;
          l7 = Get_Curr_Key(v_it_var, env);
          V0[i1] = Set_Var(v_obj_var, l7, env);
          release(l7);
          i1 = i1 + 1;
          l8 = ext_lookup(v_f, S_label);
          add_ref(l8);
          l7 = Is_Eq(v_obj_var, l8, env);
          release(l8);
          V0[i1] = Block_Failure_If_Not(l7, v_res_var, env);
          release(l7);
          i1 = i1 + 1;
          l7 = Get_Curr_Value(v_it_var, env);
          V0[i1] = Set_Var(v_obj_var, l7, env);
          release(l7);
          i1 = i1 + 1;
          l6 = make_seq(V0, i1);
          l5 = amp(v_code, l6, env);
          release(l6);
          l7 = ext_lookup(v_f, S_ptrn);
          add_ref(l7);
          l6 = Gen_Ptrn_Matching_Code(l7, v_obj_var, v_res_var, env);
          release(l7);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          i1 = 0;
          V0[i1] = Exit_Block_If_Not(v_res_var, env);
          i1 = i1 + 1;
          l5 = make_seq(V0, i1);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          release(v_code);
          v_code = l3;
          move_forward(q0);
          i0 = i0 + 1;
        }
      }
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1250;
      release(l2);
      release(env.n_next_map_it_var_id);
      env.n_next_map_it_var_id = BK1249;
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_it_var);
      release(v_obj_var);
      release(v_sorted_fields);
      goto block_1247_end;
      block_1247_end:;
      goto block_1241_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1251_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_ptrn);
    if (!b1)
    {
      goto block_1251_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1251_end:;
    if (b1)
    {
      v_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1253 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      i0 = 0;
      l5 = Is_Tagged_Obj(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l5, v_res_var, env);
      release(l5);
      i0 = i0 + 1;
      l5 = Get_Tag(v_obj, env);
      V0[i0] = Set_Var(v_var, l5, env);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l6 = ext_lookup(v_ptrn, S_tag);
      add_ref(l6);
      l5 = Gen_Ptrn_Matching_Code(l6, v_var, v_res_var, env);
      release(l6);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = 0;
      V0[i0] = Exit_Block_If_Not(v_res_var, env);
      i0 = i0 + 1;
      l5 = Get_Inner_Obj(v_obj, env);
      V0[i0] = Set_Var(v_var, l5, env);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      l4 = ext_lookup(v_ptrn, S_obj);
      add_ref(l4);
      l3 = Gen_Ptrn_Matching_Code(l4, v_var, v_res_var, env);
      release(l4);
      v_code = amp(l2, l3, env);
      release(l3);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1253;
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_var);
      release(v_code);
      goto block_1252_end;
      block_1252_end:;
      goto block_1241_end;
    }
    fail();
    block_1241_end:;
    return l0;
  }
  
  
  Obj Type_Wf_Errors(Obj p0, Env &env)
  {
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    SetIter s0;
    MapIter m0;
    Obj v_errs;
    Obj v_t;
    Obj v_n;
    Obj v_l;
    Obj V0[1];
    Obj V1[2];
    Obj V2[2];
    Obj v_f;
    Obj v_ts;
    Obj v_fs;
    Obj v_lab_count;
    Obj v_rep_labs;
    Obj v_lab_errs;
    Obj v_tag_errs;
    Obj v_nts;
    Obj v_ncts;
  
    v_type = p0;
    b1 = is_leaftype(p0);
    if (b1)
    {
      l0 = empty_set;
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1255_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ref);
    if (!b1)
    {
      goto block_1255_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_basictypesymbol(l1);
    if (b1)
    {
      v_ts = l1;
    }
    block_1255_end:;
    if (b1)
    {
      i0 = 0;
      l1 = Has_Key(env.n_typedefs, v_ts, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        add_ref(v_ts);
        V0[i0] = make_tagged_obj(S_undef_type_name, v_ts);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1256_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ref);
    if (!b1)
    {
      goto block_1256_end;
    }
    l1 = get_inner_obj(p0);
    b1 = is_partypesymbol(l1);
    if (b1)
    {
      v_ts = l1;
    }
    block_1256_end:;
    if (b1)
    {
      init(t0);
      l4 = ext_lookup(v_ts, S_params);
      add_ref(l4);
      l3 = Set(l4, env);
      release(l4);
      get_set_iter(s0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l4 = get_curr_obj(s0);
        v_t = l4;
        b1 = true;
        if (b1)
        {
          l4 = Type_Wf_Errors(v_t, env);
          append(t0, l4);
        }
        move_forward(s0);
      }
      release(l3);
      l2 = make_set(t0);
      l1 = Union(l2, env);
      release(l2);
      i0 = 0;
      i1 = 0;
      V1[i1] = ext_lookup(v_ts, S_symbol);
      add_ref(V1[i1]);
      i1 = i1 + 1;
      l5 = ext_lookup(v_ts, S_params);
      add_ref(l5);
      V1[i1] = Length(l5, env);
      release(l5);
      i1 = i1 + 1;
      l4 = make_seq(V1, i1);
      l3 = In(l4, env.n_all_par_type_symbols, env);
      release(l4);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        l3 = S_false;
      }
      else
      {
        l3 = S_true;
      }
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        i1 = 0;
        V1[i1] = S_name;
        V2[i1] = ext_lookup(v_ts, S_symbol);
        add_ref(V2[i1]);
        i1 = i1 + 1;
        V1[i1] = S_arity;
        l4 = ext_lookup(v_ts, S_params);
        add_ref(l4);
        V2[i1] = Length(l4, env);
        release(l4);
        i1 = i1 + 1;
        l3 = make_map(V1, V2, i1);
        V0[i0] = make_tagged_obj(S_undef_par_type_name, l3);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1254_end;
    }
    b1 = is_typevar(p0);
    if (b1)
    {
      i0 = 0;
      l1 = In(v_type, env.n_type_vars_in_scope, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        add_ref(v_type);
        V0[i0] = make_tagged_obj(S_undef_type_var, v_type);
        i0 = i0 + 1;
      }
      l0 = make_set(V0, i0);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1257_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_type);
    if (!b1)
    {
      goto block_1257_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1257_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_elem_type);
      add_ref(l1);
      l0 = Type_Wf_Errors(l1, env);
      release(l1);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1258_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fixed_seq_type);
    if (!b1)
    {
      goto block_1258_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1258_end:;
    if (b1)
    {
      init(t0);
      l2 = Set(v_ts, env);
      get_set_iter(s0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_t = l3;
        b1 = true;
        if (b1)
        {
          l3 = Type_Wf_Errors(v_t, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      release(l2);
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1259_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_type);
    if (!b1)
    {
      goto block_1259_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1259_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_elem_type);
      add_ref(l1);
      l0 = Type_Wf_Errors(l1, env);
      release(l1);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1260_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_type);
    if (!b1)
    {
      goto block_1260_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1260_end:;
    if (b1)
    {
      l2 = ext_lookup(v_type, S_key_type);
      add_ref(l2);
      l1 = Type_Wf_Errors(l2, env);
      release(l2);
      l3 = ext_lookup(v_type, S_value_type);
      add_ref(l3);
      l2 = Type_Wf_Errors(l3, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1261_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_type);
    if (!b1)
    {
      goto block_1261_end;
    }
    l1 = get_inner_obj(p0);
    v_fs = l1;
    b1 = true;
    block_1261_end:;
    if (b1)
    {
      Obj (*BF1263)(Obj, const Obj *, Env &) = env.n1_f;
      const Obj *BD1263 = env.C1_f;
      env.n1_f = cls_1;
      env.C1_f = 0;
      v_lab_count = Apply(v_fs, env);
      env.n1_f = BF1263;
      env.C1_f = BD1263;
      init(t0);
      get_map_iter(m0, v_lab_count);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l2 = get_curr_key(m0);
        v_l = l2;
        b1 = true;
        if (b1)
        {
          l2 = get_curr_value(m0);
          v_n = l2;
          b1 = true;
          if (b1)
          {
            add_ref(v_l);
            append(t0, v_l);
          }
        }
        move_forward(m0);
      }
      v_rep_labs = make_set(t0);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_rep_labs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_lab_errs = empty_set;
      }
      else
      {
        add_ref(v_rep_labs);
        v_lab_errs = make_tagged_obj(S_rep_labels_in_map, v_rep_labs);
      }
      init(t0);
      get_set_iter(s0, v_fs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_f = l3;
        b1 = true;
        if (b1)
        {
          l4 = ext_lookup(v_f, S_type);
          add_ref(l4);
          l3 = Type_Wf_Errors(l4, env);
          release(l4);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      release(v_lab_count);
      release(v_rep_labs);
      release(v_lab_errs);
      goto block_1262_end;
      block_1262_end:;
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1264_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_type);
    if (!b1)
    {
      goto block_1264_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1264_end:;
    if (b1)
    {
      l2 = ext_lookup(v_type, S_tag_type);
      add_ref(l2);
      b1 = are_eq(S_atom_type, l2);
      if (b1)
      {
        goto block_1266_end;
      }
      b1 = is_symbtype(l2);
      if (b1)
      {
        goto block_1266_end;
      }
      if (!is_ne_set(l2))
      {
        b1 = false;
        goto block_1267_end;
      }
      get_set_iter(s0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        b1 = is_symbtype(l3);
        if (!b1)
        {
          goto block_1267_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1267_end:;
      if (b1)
      {
        goto block_1266_end;
      }
      block_1266_end:;
      l1 = to_obj(b1);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_tag_errs = empty_set;
      }
      else
      {
        l1 = ext_lookup(v_type, S_tag_type);
        add_ref(l1);
        v_tag_errs = make_tagged_obj(S_invalid_type_for_tag, l1);
      }
      l2 = ext_lookup(v_type, S_obj_type);
      add_ref(l2);
      l1 = Type_Wf_Errors(l2, env);
      release(l2);
      l0 = amp(v_tag_errs, l1, env);
      release(l1);
      release(v_tag_errs);
      goto block_1265_end;
      block_1265_end:;
      goto block_1254_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1268_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_1268_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1268_end:;
    if (b1)
    {
      v_nts = Normalize_Unions(v_ts, env);
      init(t0);
      get_set_iter(s0, v_nts);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_t = l3;
        b1 = true;
        if (b1)
        {
          l3 = Type_Wf_Errors(v_t, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      v_errs = Union(l1, env);
      release(l1);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_errs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = v_errs;
        add_ref(l0);
        release(v_errs);
        release(v_nts);
        goto block_1269_end;
      }
      v_ncts = Incompatibilities(v_nts, env);
      l2 = empty_set;
      l1 = to_obj(are_eq(v_ncts, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l0 = empty_set;
        release(v_errs);
        release(v_nts);
        release(v_ncts);
        goto block_1269_end;
      }
      else
      {
        i0 = 0;
        add_ref(v_ncts);
        V0[i0] = make_tagged_obj(S_incompatible_types_in_union_type, v_ncts);
        i0 = i0 + 1;
        l0 = make_set(V0, i0);
        release(v_errs);
        release(v_nts);
        release(v_ncts);
        goto block_1269_end;
      }
      block_1269_end:;
      goto block_1254_end;
    }
    fail();
    block_1254_end:;
    return l0;
  }
  
  
  Obj Type_Is_Wf(Obj p0, Obj p1, Env &env)
  {
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    SetIter s0;
    SetIter s1;
    SeqIter q0;
    MapIter m0;
    Obj v_t;
    Obj v_bs;
    Obj v_a;
    Obj v_b;
    Obj v_t1;
    Obj v_t2;
    Obj v_l;
    Obj V0[18];
    Obj v_ts;
    Obj v_c;
    Obj v_type_vars;
    Obj v_ls;
  
    v_type = p0;
    v_type_vars = p1;
    b1 = is_leaftype(p0);
    if (b1)
    {
      l0 = S_true;
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1271_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_ref);
    if (!b1)
    {
      goto block_1271_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1271_end:;
    if (b1)
    {
      l0 = Has_Key(env.n_typedefs, v_ts, env);
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1272_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_type_var);
    if (!b1)
    {
      goto block_1272_end;
    }
    l1 = get_inner_obj(p0);
    v_a = l1;
    b1 = true;
    block_1272_end:;
    if (b1)
    {
      l1 = In(v_type, v_type_vars, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = to_obj(77);
        i0 = i0 + 1;
        V0[i0] = to_obj(105);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(105);
        i0 = i0 + 1;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(32);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(32);
        i0 = i0 + 1;
        V0[i0] = to_obj(118);
        i0 = i0 + 1;
        V0[i0] = to_obj(97);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(58);
        i0 = i0 + 1;
        V0[i0] = to_obj(32);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = to_str(v_a);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        print(l1);
        release(l1);
      }
      l0 = S_true;
      goto block_1273_end;
      block_1273_end:;
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1274_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_type);
    if (!b1)
    {
      goto block_1274_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1274_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_elem_type);
      add_ref(l1);
      l0 = Type_Is_Wf(l1, v_type_vars, env);
      release(l1);
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1275_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fixed_seq_type);
    if (!b1)
    {
      goto block_1275_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1275_end:;
    if (b1)
    {
      l1 = make_array(get_seq_len(v_ts), S_nil);
      get_seq_iter(q0, v_ts);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_t = get_curr_obj(q0);
        l3 = Type_Is_Wf(v_t, v_type_vars, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l0 = All(l1, env);
      release(l1);
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1276_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_type);
    if (!b1)
    {
      goto block_1276_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1276_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_elem_type);
      add_ref(l1);
      l0 = Type_Is_Wf(l1, v_type_vars, env);
      release(l1);
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1277_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_type);
    if (!b1)
    {
      goto block_1277_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1277_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_key_type);
      add_ref(l1);
      l0 = Type_Is_Wf(l1, v_type_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_type, S_value_type);
        add_ref(l1);
        l0 = Type_Is_Wf(l1, v_type_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1278_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_type);
    if (!b1)
    {
      goto block_1278_end;
    }
    l1 = get_inner_obj(p0);
    v_bs = l1;
    b1 = true;
    block_1278_end:;
    if (b1)
    {
      Obj (*BF1280)(Obj, const Obj *, Env &) = env.n1_f;
      const Obj *BD1280 = env.C1_f;
      env.n1_f = cls_0;
      env.C1_f = 0;
      v_ls = Apply(v_bs, env);
      env.n1_f = BF1280;
      env.C1_f = BD1280;
      l0 = S_false;
      get_map_iter(m0, v_ls);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l2 = get_curr_key(m0);
        v_l = l2;
        b1 = true;
        if (b1)
        {
          l2 = get_curr_value(m0);
          v_c = l2;
          b1 = true;
          if (b1)
          {
            l2 = greater(v_c, to_obj(1), env);
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_true;
              goto block_1281_end;
            }
          }
        }
        move_forward(m0);
      }
      block_1281_end:;
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
      }
      else
      {
        l0 = S_true;
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
        get_set_iter(s0, v_bs);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          v_b = l2;
          b1 = true;
          if (b1)
          {
            l3 = ext_lookup(v_b, S_type);
            add_ref(l3);
            l2 = Type_Is_Wf(l3, v_type_vars, env);
            release(l3);
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l2 = S_false;
            }
            else
            {
              l2 = S_true;
            }
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_true;
              goto block_1282_end;
            }
          }
          move_forward(s0);
        }
        block_1282_end:;
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      release(v_ls);
      goto block_1279_end;
      block_1279_end:;
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1283_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_type);
    if (!b1)
    {
      goto block_1283_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1283_end:;
    if (b1)
    {
      l1 = ext_lookup(v_type, S_tag_type);
      add_ref(l1);
      l0 = Type_Is_Wf(l1, v_type_vars, env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l1 = ext_lookup(v_type, S_obj_type);
        add_ref(l1);
        l0 = Type_Is_Wf(l1, v_type_vars, env);
        release(l1);
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1270_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1284_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_1284_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1284_end:;
    if (b1)
    {
      l1 = Size(v_ts, env);
      l0 = greater_eq(l1, to_obj(2), env);
      release(l1);
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
        get_set_iter(s0, v_ts);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          b1 = is_uniontype(l2);
          if (b1)
          {
            l0 = S_true;
            goto block_1285_end;
          }
          move_forward(s0);
        }
        block_1285_end:;
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
        get_set_iter(s0, v_ts);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          v_t = l2;
          b1 = true;
          if (b1)
          {
            l2 = Type_Is_Wf(v_t, v_type_vars, env);
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l2 = S_false;
            }
            else
            {
              l2 = S_true;
            }
            if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
            {
              fail();
            }
            if (are_eq(l2, S_true))
            {
              l0 = S_true;
              goto block_1286_end;
            }
          }
          move_forward(s0);
        }
        block_1286_end:;
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
      {
        fail();
      }
      if (are_eq(l0, S_true))
      {
        l0 = S_false;
        get_set_iter(s0, v_ts);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l2 = get_curr_obj(s0);
          v_t1 = l2;
          b1 = true;
          if (b1)
          {
            get_set_iter(s1, v_ts);
            for ( ; ; )
            {
              if (is_out_of_range(s1))
              {
                break;
              }
              l3 = get_curr_obj(s1);
              v_t2 = l3;
              b1 = true;
              if (b1)
              {
                l3 = to_obj(are_eq(v_t1, v_t2));
                if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                {
                  fail();
                }
                if (are_eq(l3, S_true))
                {
                  l3 = S_false;
                }
                else
                {
                  l3 = S_true;
                }
                if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                {
                  fail();
                }
                if (are_eq(l3, S_true))
                {
                  l3 = Are_Compatible(v_t1, v_t2, env);
                  if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l3, S_true))
                  {
                    l3 = S_false;
                  }
                  else
                  {
                    l3 = S_true;
                  }
                  if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                  {
                    fail();
                  }
                }
                if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
                {
                  fail();
                }
                if (are_eq(l3, S_true))
                {
                  l0 = S_true;
                  goto block_1287_end;
                }
              }
              move_forward(s1);
            }
          }
          move_forward(s0);
        }
        block_1287_end:;
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
        if (are_eq(l0, S_true))
        {
          l0 = S_false;
        }
        else
        {
          l0 = S_true;
        }
        if (!(are_eq(l0, S_true) | are_eq(l0, S_false)))
        {
          fail();
        }
      }
      goto block_1270_end;
    }
    fail();
    block_1270_end:;
    return l0;
  }
  
  
  Obj Ordinary_Subexprs(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    Obj v_e;
    Obj v_ses;
    Obj V0[3];
    Obj v_es;
  
    v_expr = p0;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1289_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_1289_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1289_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1290_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_expr);
    if (!b1)
    {
      goto block_1290_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1290_end:;
    if (b1)
    {
      init(t0);
      l4 = ext_lookup(v_expr, S_head);
      add_ref(l4);
      l3 = Set(l4, env);
      release(l4);
      get_set_iter(s0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l4 = get_curr_obj(s0);
        v_e = l4;
        b1 = true;
        if (b1)
        {
          l4 = Subexprs(v_e, env);
          append(t0, l4);
        }
        move_forward(s0);
      }
      release(l3);
      l2 = make_set(t0);
      l1 = Union(l2, env);
      release(l2);
      i0 = 0;
      l3 = ext_lookup(v_expr, S_tail, b1);
      l3 = to_obj(b1);
      if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
      {
        fail();
      }
      if (are_eq(l3, S_true))
      {
        V0[i0] = ext_lookup(v_expr, S_tail);
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l2 = make_set(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1291_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_expr);
    if (!b1)
    {
      goto block_1291_end;
    }
    l1 = get_inner_obj(p0);
    v_ses = l1;
    b1 = true;
    block_1291_end:;
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_ses);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_e = l3;
        b1 = true;
        if (b1)
        {
          l3 = Subexprs(v_e, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1292_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_expr);
    if (!b1)
    {
      goto block_1292_end;
    }
    l1 = get_inner_obj(p0);
    v_es = l1;
    b1 = true;
    block_1292_end:;
    if (b1)
    {
      init(t0);
      get_set_iter(s0, v_es);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_e = l3;
        b1 = true;
        if (b1)
        {
          i0 = 0;
          V0[i0] = ext_lookup(v_e, S_value);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_e, S_key);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l4 = ext_lookup(v_e, S_cond, b1);
          l4 = to_obj(b1);
          if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
          {
            fail();
          }
          if (are_eq(l4, S_true))
          {
            V0[i0] = ext_lookup(v_e, S_cond);
            add_ref(V0[i0]);
            i0 = i0 + 1;
          }
          l3 = make_set(V0, i0);
          append(t0, l3);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      l0 = Union(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1293_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_obj_expr);
    if (!b1)
    {
      goto block_1293_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1293_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_obj);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_tag);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    b1 = is_var(p0);
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1294_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fn_call);
    if (!b1)
    {
      goto block_1294_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1294_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      l0 = Set(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1295_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_cls_call);
    if (!b1)
    {
      goto block_1295_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1295_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      l0 = Set(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1296_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_builtin_call);
    if (!b1)
    {
      goto block_1296_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1296_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      l0 = Set(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1297_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_expr);
    if (!b1)
    {
      goto block_1297_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1297_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_left);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_right);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1298_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_expr);
    if (!b1)
    {
      goto block_1298_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1298_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_left);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_right);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1299_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_expr);
    if (!b1)
    {
      goto block_1299_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1299_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = v_e;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1300_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eq);
    if (!b1)
    {
      goto block_1300_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1300_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_left);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_right);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1301_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_membership);
    if (!b1)
    {
      goto block_1301_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1301_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_obj);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1302_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_accessor);
    if (!b1)
    {
      goto block_1302_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1302_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1303_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_accessor_test);
    if (!b1)
    {
      goto block_1303_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1303_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1304_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_expr);
    if (!b1)
    {
      goto block_1304_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1304_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_cond);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_else);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_then);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1305_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_1305_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1305_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1306_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_1306_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1306_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1307_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_1307_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1307_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1308_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_comp);
    if (!b1)
    {
      goto block_1308_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1308_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_src_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1309_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_1309_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1309_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_src_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1310_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_1310_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1310_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_src_expr);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l0 = make_set(V0, i0);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1311_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_match_expr);
    if (!b1)
    {
      goto block_1311_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1311_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_exprs);
      add_ref(l1);
      l0 = Set(l1, env);
      release(l1);
      goto block_1288_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1312_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_do_expr);
    if (!b1)
    {
      goto block_1312_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1312_end:;
    if (b1)
    {
      l0 = empty_set;
      goto block_1288_end;
    }
    fail();
    block_1288_end:;
    return l0;
  }
  
  
  Obj Extern_Vars(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj v_ptrn;
    Obj v_stmts;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    bool b1;
    int i0;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    Obj v_clause;
    Obj v_s;
    Obj v_e;
    Obj v_ss;
    Obj V0[2];
    Obj v_ord_expr_evs;
    Obj v_spec_expr_evs;
    Obj v_spec_case_evs;
    Obj v_def_vs;
    Obj v_ext_vs;
  
    b1 = is_statement(p0);
    if (b1)
    {
      v_s = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1315_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_assignment_stmt);
      if (!b1)
      {
        goto block_1315_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1315_end:;
      if (b1)
      {
        l1 = ext_lookup(v_s, S_value);
        add_ref(l1);
        l0 = Extern_Vars(l1, env);
        release(l1);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1316_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_return_stmt);
      if (!b1)
      {
        goto block_1316_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1316_end:;
      if (b1)
      {
        l0 = Extern_Vars(v_e, env);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1317_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_if_stmt);
      if (!b1)
      {
        goto block_1317_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1317_end:;
      if (b1)
      {
        l3 = ext_lookup(v_s, S_cond);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l4 = ext_lookup(v_s, S_body);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l3 = ext_lookup(v_s, S_else);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1318_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_loop_stmt);
      if (!b1)
      {
        goto block_1318_end;
      }
      l1 = get_inner_obj(p0);
      v_ss = l1;
      b1 = true;
      block_1318_end:;
      if (b1)
      {
        l0 = Extern_Vars(v_ss, env);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1319_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_foreach_stmt);
      if (!b1)
      {
        goto block_1319_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1319_end:;
      if (b1)
      {
        l2 = ext_lookup(v_s, S_values);
        add_ref(l2);
        l1 = Extern_Vars(l2, env);
        release(l2);
        l4 = ext_lookup(v_s, S_body);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        i0 = 0;
        V0[i0] = ext_lookup(v_s, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l5 = ext_lookup(v_s, S_idx_var, b1);
        l5 = to_obj(b1);
        if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
        {
          fail();
        }
        if (are_eq(l5, S_true))
        {
          V0[i0] = ext_lookup(v_s, S_idx_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
        }
        l4 = make_set(V0, i0);
        l2 = minus(l3, l4, env);
        release(l4);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1320_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_for_stmt);
      if (!b1)
      {
        goto block_1320_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1320_end:;
      if (b1)
      {
        l3 = ext_lookup(v_s, S_start_val);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l4 = ext_lookup(v_s, S_end_val);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l4 = ext_lookup(v_s, S_body);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        i0 = 0;
        V0[i0] = ext_lookup(v_s, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l4 = make_set(V0, i0);
        l2 = minus(l3, l4, env);
        release(l4);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1314_end;
      }
      b1 = are_eq(p0, S_break_stmt);
      if (b1)
      {
        l0 = empty_set;
        goto block_1314_end;
      }
      b1 = are_eq(p0, S_fail_stmt);
      if (b1)
      {
        l0 = empty_set;
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1321_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_assert_stmt);
      if (!b1)
      {
        goto block_1321_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1321_end:;
      if (b1)
      {
        l0 = Extern_Vars(v_e, env);
        goto block_1314_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1322_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_print_stmt);
      if (!b1)
      {
        goto block_1322_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1322_end:;
      if (b1)
      {
        l0 = Extern_Vars(v_e, env);
        goto block_1314_end;
      }
      fail();
      block_1314_end:;
      goto block_1313_end;
    }
    b1 = is_clause(p0);
    if (b1)
    {
      v_clause = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1324_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_in_clause);
      if (!b1)
      {
        goto block_1324_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1324_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_src);
        add_ref(l2);
        l1 = Extern_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_ptrn);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1325_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_not_in_clause);
      if (!b1)
      {
        goto block_1325_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1325_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_src);
        add_ref(l2);
        l1 = Extern_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_ptrn);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1326_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_in_clause);
      if (!b1)
      {
        goto block_1326_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1326_end:;
      if (b1)
      {
        l3 = ext_lookup(v_clause, S_src);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l4 = ext_lookup(v_clause, S_key_ptrn);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l3 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1327_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_map_not_in_clause);
      if (!b1)
      {
        goto block_1327_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1327_end:;
      if (b1)
      {
        l3 = ext_lookup(v_clause, S_src);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l4 = ext_lookup(v_clause, S_key_ptrn);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        l3 = ext_lookup(v_clause, S_value_ptrn);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1328_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_and_clause);
      if (!b1)
      {
        goto block_1328_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1328_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_left);
        add_ref(l2);
        l1 = Extern_Vars(l2, env);
        release(l2);
        l4 = ext_lookup(v_clause, S_right);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l5 = ext_lookup(v_clause, S_left);
        add_ref(l5);
        l4 = New_Vars(l5, env);
        release(l5);
        l2 = minus(l3, l4, env);
        release(l4);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1329_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_or_clause);
      if (!b1)
      {
        goto block_1329_end;
      }
      l1 = get_inner_obj(p0);
      b1 = true;
      block_1329_end:;
      if (b1)
      {
        l2 = ext_lookup(v_clause, S_left);
        add_ref(l2);
        l1 = Extern_Vars(l2, env);
        release(l2);
        l3 = ext_lookup(v_clause, S_right);
        add_ref(l3);
        l2 = Extern_Vars(l3, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1323_end;
      }
      fail();
      block_1323_end:;
      goto block_1313_end;
    }
    b1 = is_expr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      init(t0);
      l2 = Ordinary_Subexprs(v_expr, env);
      get_set_iter(s0, l2);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_e = l3;
        b1 = true;
        if (b1)
        {
          l3 = Extern_Vars(v_e, env);
          append(t0, l3);
        }
        move_forward(s0);
      }
      release(l2);
      l1 = make_set(t0);
      v_ord_expr_evs = Union(l1, env);
      release(l1);
      init(t0);
      l3 = Special_Subexprs(v_expr, env);
      get_set_iter(s0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l4 = get_curr_obj(s0);
        v_e = l4;
        b1 = true;
        if (b1)
        {
          l4 = Extern_Vars(v_e, env);
          append(t0, l4);
        }
        move_forward(s0);
      }
      release(l3);
      l2 = make_set(t0);
      l1 = Union(l2, env);
      release(l2);
      l2 = Gen_Vars(v_expr, env);
      v_spec_expr_evs = minus(l1, l2, env);
      release(l2);
      release(l1);
      v_spec_case_evs = Extern_Vars__Special_Cases(v_expr, env);
      l1 = amp(v_ord_expr_evs, v_spec_expr_evs, env);
      l0 = amp(l1, v_spec_case_evs, env);
      release(l1);
      release(v_ord_expr_evs);
      release(v_spec_expr_evs);
      release(v_spec_case_evs);
      goto block_1330_end;
      block_1330_end:;
      goto block_1313_end;
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_1331_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_1331_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_statement(l1);
      if (!b1)
      {
        goto block_1331_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_1331_end:;
    if (b1)
    {
      v_stmts = p0;
    }
    if (b1)
    {
      v_def_vs = empty_set;
      v_ext_vs = empty_set;
      get_seq_iter(q0, v_stmts);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        l3 = Extern_Vars(v_s, env);
        l2 = minus(l3, v_def_vs, env);
        release(l3);
        l1 = amp(v_ext_vs, l2, env);
        release(l2);
        release(v_ext_vs);
        v_ext_vs = l1;
        l2 = New_Vars(v_s, env);
        l1 = amp(v_def_vs, l2, env);
        release(l2);
        release(v_def_vs);
        v_def_vs = l1;
        move_forward(q0);
      }
      l0 = v_ext_vs;
      add_ref(l0);
      release(v_def_vs);
      release(v_ext_vs);
      goto block_1332_end;
      block_1332_end:;
      goto block_1313_end;
    }
    b1 = is_clsexpr(p0);
    if (b1)
    {
      v_e = p0;
    }
    if (b1)
    {
      l2 = ext_lookup(v_e, S_expr);
      add_ref(l2);
      l1 = Extern_Vars(l2, env);
      release(l2);
      l4 = ext_lookup(v_e, S_params);
      add_ref(l4);
      l3 = Set(l4, env);
      release(l4);
      i0 = 0;
      V0[i0] = S_nil;
      i0 = i0 + 1;
      l4 = make_set(V0, i0);
      l2 = minus(l3, l4, env);
      release(l4);
      release(l3);
      l0 = minus(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1313_end;
    }
    b1 = is_pattern(p0);
    if (b1)
    {
      v_ptrn = p0;
    }
    if (b1)
    {
      Obj (*BF1333)(Obj, const Obj *, Env &) = env.n1_eval;
      const Obj *BD1333 = env.C1_eval;
      env.n1_eval = cls_34;
      env.C1_eval = 0;
      Obj (*BF1334)(Obj, const Obj *, Env &) = env.n1_condition;
      const Obj *BD1334 = env.C1_condition;
      env.n1_condition = cls_37;
      env.C1_condition = 0;
      l0 = Select_Expr_Fn(v_ptrn, env);
      env.n1_condition = BF1334;
      env.C1_condition = BD1334;
      env.n1_eval = BF1333;
      env.C1_eval = BD1333;
      goto block_1313_end;
    }
    fail();
    block_1313_end:;
    return l0;
  }
  
  
  Obj Tokenize(Obj p0, Env &env)
  {
    Obj v_line;
    Obj v_token;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    int i0;
    Obj v_len;
    Obj v_i;
    Obj V0[1];
    Obj v_ch;
    Obj v_bytes;
    Obj v_tokens;
    Obj v_line_start;
    Obj v_rev_str;
  
    v_bytes = p0;
    v_len = Length(v_bytes, env);
    v_tokens = empty_seq;
    v_line = to_obj(1);
    v_line_start = to_obj(0);
    v_i = to_obj(0);
    for ( ; ; )
    {
      l1 = lower(v_i, v_len, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      v_ch = brackets(v_bytes, v_i, env);
      l1 = plus(v_i, to_obj(1), env);
      release(v_i);
      v_i = l1;
      l1 = Is_Lower(v_ch, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = v_ch;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        v_token = make_seq(V0, i0);
        for ( ; ; )
        {
          l1 = lower(v_i, v_len, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          release(v_ch);
          v_ch = brackets(v_bytes, v_i, env);
          l1 = Is_Lower(v_ch, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            l1 = Is_Digit(v_ch, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            l2 = Ascii_Underscore(env);
            l1 = to_obj(are_eq(v_ch, l2));
            release(l2);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          i0 = 0;
          V0[i0] = v_ch;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_token, l2, env);
          release(l2);
          release(v_token);
          v_token = l1;
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
        }
        l1 = lower(v_i, v_len, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l2 = brackets(v_bytes, v_i, env);
          l3 = Ascii_Column(env);
          l1 = to_obj(are_eq(l2, l3));
          release(l3);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          l4 = String(v_token, env);
          l3 = to_symb(l4);
          release(l4);
          V0[i0] = Label(l3, env);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = join_seqs(l2, v_tokens);
          release(l2);
          release(v_tokens);
          v_tokens = l1;
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
        }
        else
        {
          i0 = 0;
          l4 = String(v_token, env);
          l3 = to_symb(l4);
          release(l4);
          V0[i0] = Symbol(l3, env);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = join_seqs(l2, v_tokens);
          release(l2);
          release(v_tokens);
          v_tokens = l1;
        }
        release(v_token);
      }
      else
      {
        l2 = Ascii_Minus(env);
        l1 = to_obj(are_eq(v_ch, l2));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_false))
        {
          l1 = Is_Digit(v_ch, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          V0[i0] = v_ch;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          v_token = make_seq(V0, i0);
          l2 = Ascii_Minus(env);
          l1 = to_obj(are_eq(v_ch, l2));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = lower(v_i, v_len, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l2 = brackets(v_bytes, v_i, env);
              l1 = Is_Digit(l2, env);
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l1 = S_false;
            }
            else
            {
              l1 = S_true;
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = minus(v_i, v_line_start, env);
            l0 = Tokenize__Error(v_line, l1, env);
            release(l1);
            release(v_line);
            release(v_token);
            release(v_len);
            release(v_i);
            release(v_ch);
            release(v_tokens);
            release(v_line_start);
            goto block_1335_end;
          }
          for ( ; ; )
          {
            l1 = lower(v_i, v_len, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l2 = brackets(v_bytes, v_i, env);
              l1 = Is_Digit(l2, env);
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l1 = S_false;
            }
            else
            {
              l1 = S_true;
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              break;
            }
            i0 = 0;
            V0[i0] = brackets(v_bytes, v_i, env);
            i0 = i0 + 1;
            l2 = make_seq(V0, i0);
            l1 = amp(v_token, l2, env);
            release(l2);
            release(v_token);
            v_token = l1;
            l1 = plus(v_i, to_obj(1), env);
            release(v_i);
            v_i = l1;
          }
          i0 = 0;
          l3 = String(v_token, env);
          V0[i0] = To_Int(l3, env);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = join_seqs(l2, v_tokens);
          release(l2);
          release(v_tokens);
          v_tokens = l1;
          release(v_token);
        }
        else
        {
          l2 = Ascii_Double_Quotes(env);
          l1 = to_obj(are_eq(v_ch, l2));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            v_rev_str = empty_seq;
            for ( ; ; )
            {
              l1 = lower(v_i, v_len, env);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = S_false;
              }
              else
              {
                l1 = S_true;
              }
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                break;
              }
              release(v_ch);
              v_ch = brackets(v_bytes, v_i, env);
              l1 = plus(v_i, to_obj(1), env);
              release(v_i);
              v_i = l1;
              l2 = Ascii_Double_Quotes(env);
              l1 = to_obj(are_eq(v_ch, l2));
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                break;
              }
              else
              {
                l2 = Ascii_Backslash(env);
                l1 = to_obj(are_eq(v_ch, l2));
                release(l2);
                if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                {
                  fail();
                }
                if (are_eq(l1, S_true))
                {
                  l1 = lower(v_i, v_len, env);
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = S_false;
                  }
                  else
                  {
                    l1 = S_true;
                  }
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = minus(v_i, v_line_start, env);
                    l0 = Tokenize__Error(v_line, l1, env);
                    release(l1);
                    release(v_line);
                    release(v_len);
                    release(v_i);
                    release(v_ch);
                    release(v_tokens);
                    release(v_line_start);
                    release(v_rev_str);
                    goto block_1335_end;
                  }
                  release(v_ch);
                  v_ch = brackets(v_bytes, v_i, env);
                  l1 = plus(v_i, to_obj(1), env);
                  release(v_i);
                  v_i = l1;
                  l1 = to_obj(are_eq(v_ch, to_obj(110)));
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    i0 = 0;
                    V0[i0] = Ascii_Newline(env);
                    i0 = i0 + 1;
                    l2 = make_seq(V0, i0);
                    l1 = join_seqs(l2, v_rev_str);
                    release(l2);
                    release(v_rev_str);
                    v_rev_str = l1;
                  }
                  else
                  {
                    l2 = Ascii_Backslash(env);
                    l1 = to_obj(are_eq(v_ch, l2));
                    release(l2);
                    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                    {
                      fail();
                    }
                    if (are_eq(l1, S_false))
                    {
                      l2 = Ascii_Double_Quotes(env);
                      l1 = to_obj(are_eq(v_ch, l2));
                      release(l2);
                      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                      {
                        fail();
                      }
                    }
                    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                    {
                      fail();
                    }
                    if (are_eq(l1, S_true))
                    {
                      i0 = 0;
                      V0[i0] = v_ch;
                      add_ref(V0[i0]);
                      i0 = i0 + 1;
                      l2 = make_seq(V0, i0);
                      l1 = join_seqs(l2, v_rev_str);
                      release(l2);
                      release(v_rev_str);
                      v_rev_str = l1;
                    }
                    else
                    {
                      l1 = minus(v_i, v_line_start, env);
                      l0 = Tokenize__Error(v_line, l1, env);
                      release(l1);
                      release(v_line);
                      release(v_len);
                      release(v_i);
                      release(v_ch);
                      release(v_tokens);
                      release(v_line_start);
                      release(v_rev_str);
                      goto block_1335_end;
                    }
                  }
                }
                else
                {
                  l2 = Ascii_Newline(env);
                  l1 = to_obj(are_eq(v_ch, l2));
                  release(l2);
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = minus(v_i, v_line_start, env);
                    l0 = Tokenize__Error(v_line, l1, env);
                    release(l1);
                    release(v_line);
                    release(v_len);
                    release(v_i);
                    release(v_ch);
                    release(v_tokens);
                    release(v_line_start);
                    release(v_rev_str);
                    goto block_1335_end;
                  }
                  else
                  {
                    i0 = 0;
                    V0[i0] = v_ch;
                    add_ref(V0[i0]);
                    i0 = i0 + 1;
                    l2 = make_seq(V0, i0);
                    l1 = join_seqs(l2, v_rev_str);
                    release(l2);
                    release(v_rev_str);
                    v_rev_str = l1;
                  }
                }
              }
            }
            i0 = 0;
            l3 = Reverse(v_rev_str, env);
            V0[i0] = String(l3, env);
            release(l3);
            i0 = i0 + 1;
            l2 = make_seq(V0, i0);
            l1 = join_seqs(l2, v_tokens);
            release(l2);
            release(v_tokens);
            v_tokens = l1;
            release(v_rev_str);
          }
          else
          {
            l1 = Is_Symbol(v_ch, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              i0 = 0;
              V0[i0] = Symbol_To_Token(v_ch, env);
              i0 = i0 + 1;
              l2 = make_seq(V0, i0);
              l1 = join_seqs(l2, v_tokens);
              release(l2);
              release(v_tokens);
              v_tokens = l1;
            }
            else
            {
              l1 = Is_Space(v_ch, env);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = S_false;
              }
              else
              {
                l1 = S_true;
              }
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = minus(v_i, v_line_start, env);
                l0 = Tokenize__Error(v_line, l1, env);
                release(l1);
                release(v_line);
                release(v_len);
                release(v_i);
                release(v_ch);
                release(v_tokens);
                release(v_line_start);
                goto block_1335_end;
              }
              l2 = Ascii_Newline(env);
              l1 = to_obj(are_eq(v_ch, l2));
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = plus(v_line, to_obj(1), env);
                release(v_line);
                v_line = l1;
                release(v_line_start);
                v_line_start = v_i;
                add_ref(v_line_start);
              }
            }
          }
        }
      }
      release(v_ch);
    }
    l0 = Reverse(v_tokens, env);
    release(v_line);
    release(v_len);
    release(v_i);
    release(v_tokens);
    release(v_line_start);
    goto block_1335_end;
    block_1335_end:;
    return l0;
  }
  
  
  Obj Fast_Tokenize(Obj p0, Env &env)
  {
    Obj v_line;
    Obj v_token;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    int i0;
    Obj v_len;
    Obj v_i;
    Obj V0[2];
    Obj v_ch;
    Obj v_bytes;
    Obj v_tokens;
    Obj v_line_start;
    Obj v_rev_str;
  
    v_bytes = p0;
    v_len = Length(v_bytes, env);
    v_tokens = empty_seq;
    v_line = to_obj(1);
    v_line_start = to_obj(0);
    v_i = to_obj(0);
    for ( ; ; )
    {
      l1 = lower(v_i, v_len, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        break;
      }
      v_ch = brackets(v_bytes, v_i, env);
      l1 = plus(v_i, to_obj(1), env);
      release(v_i);
      v_i = l1;
      l1 = Is_Lower(v_ch, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = v_ch;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        v_token = make_seq(V0, i0);
        for ( ; ; )
        {
          l1 = lower(v_i, v_len, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          release(v_ch);
          v_ch = brackets(v_bytes, v_i, env);
          l1 = Is_Lower(v_ch, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            l1 = Is_Digit(v_ch, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            l2 = Ascii_Underscore(env);
            l1 = to_obj(are_eq(v_ch, l2));
            release(l2);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            break;
          }
          i0 = 0;
          V0[i0] = v_ch;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_token, l2, env);
          release(l2);
          release(v_token);
          v_token = l1;
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
        }
        l1 = lower(v_i, v_len, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          l2 = brackets(v_bytes, v_i, env);
          l3 = Ascii_Column(env);
          l1 = to_obj(are_eq(l2, l3));
          release(l3);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          l3 = String(v_token, env);
          l2 = to_symb(l3);
          release(l3);
          V0[i0] = Label(l2, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = v_tokens;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          release(v_tokens);
          v_tokens = l1;
          l1 = plus(v_i, to_obj(1), env);
          release(v_i);
          v_i = l1;
        }
        else
        {
          i0 = 0;
          l3 = String(v_token, env);
          l2 = to_symb(l3);
          release(l3);
          V0[i0] = Symbol(l2, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = v_tokens;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          release(v_tokens);
          v_tokens = l1;
        }
        release(v_token);
      }
      else
      {
        l2 = Ascii_Minus(env);
        l1 = to_obj(are_eq(v_ch, l2));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_false))
        {
          l1 = Is_Digit(v_ch, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
        }
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          V0[i0] = v_ch;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          v_token = make_seq(V0, i0);
          l2 = Ascii_Minus(env);
          l1 = to_obj(are_eq(v_ch, l2));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = lower(v_i, v_len, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l2 = brackets(v_bytes, v_i, env);
              l1 = Is_Digit(l2, env);
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l1 = S_false;
            }
            else
            {
              l1 = S_true;
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = minus(v_i, v_line_start, env);
            l0 = Fast_Tokenize__Error(v_line, l1, env);
            release(l1);
            release(v_line);
            release(v_token);
            release(v_len);
            release(v_i);
            release(v_ch);
            release(v_tokens);
            release(v_line_start);
            goto block_1336_end;
          }
          for ( ; ; )
          {
            l1 = lower(v_i, v_len, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l2 = brackets(v_bytes, v_i, env);
              l1 = Is_Digit(l2, env);
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              l1 = S_false;
            }
            else
            {
              l1 = S_true;
            }
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              break;
            }
            i0 = 0;
            V0[i0] = brackets(v_bytes, v_i, env);
            i0 = i0 + 1;
            l2 = make_seq(V0, i0);
            l1 = amp(v_token, l2, env);
            release(l2);
            release(v_token);
            v_token = l1;
            l1 = plus(v_i, to_obj(1), env);
            release(v_i);
            v_i = l1;
          }
          i0 = 0;
          l2 = String(v_token, env);
          V0[i0] = To_Int(l2, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = v_tokens;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          release(v_tokens);
          v_tokens = l1;
          release(v_token);
        }
        else
        {
          l2 = Ascii_Double_Quotes(env);
          l1 = to_obj(are_eq(v_ch, l2));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            v_rev_str = empty_seq;
            for ( ; ; )
            {
              l1 = lower(v_i, v_len, env);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = S_false;
              }
              else
              {
                l1 = S_true;
              }
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                break;
              }
              release(v_ch);
              v_ch = brackets(v_bytes, v_i, env);
              l1 = plus(v_i, to_obj(1), env);
              release(v_i);
              v_i = l1;
              l2 = Ascii_Double_Quotes(env);
              l1 = to_obj(are_eq(v_ch, l2));
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                break;
              }
              else
              {
                l2 = Ascii_Backslash(env);
                l1 = to_obj(are_eq(v_ch, l2));
                release(l2);
                if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                {
                  fail();
                }
                if (are_eq(l1, S_true))
                {
                  l1 = lower(v_i, v_len, env);
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = S_false;
                  }
                  else
                  {
                    l1 = S_true;
                  }
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = minus(v_i, v_line_start, env);
                    l0 = Fast_Tokenize__Error(v_line, l1, env);
                    release(l1);
                    release(v_line);
                    release(v_len);
                    release(v_i);
                    release(v_ch);
                    release(v_tokens);
                    release(v_line_start);
                    release(v_rev_str);
                    goto block_1336_end;
                  }
                  release(v_ch);
                  v_ch = brackets(v_bytes, v_i, env);
                  l1 = plus(v_i, to_obj(1), env);
                  release(v_i);
                  v_i = l1;
                  l1 = to_obj(are_eq(v_ch, to_obj(110)));
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    i0 = 0;
                    V0[i0] = Ascii_Newline(env);
                    i0 = i0 + 1;
                    l2 = make_seq(V0, i0);
                    l1 = join_seqs(l2, v_rev_str);
                    release(l2);
                    release(v_rev_str);
                    v_rev_str = l1;
                  }
                  else
                  {
                    l2 = Ascii_Backslash(env);
                    l1 = to_obj(are_eq(v_ch, l2));
                    release(l2);
                    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                    {
                      fail();
                    }
                    if (are_eq(l1, S_false))
                    {
                      l2 = Ascii_Double_Quotes(env);
                      l1 = to_obj(are_eq(v_ch, l2));
                      release(l2);
                      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                      {
                        fail();
                      }
                    }
                    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                    {
                      fail();
                    }
                    if (are_eq(l1, S_true))
                    {
                      i0 = 0;
                      V0[i0] = v_ch;
                      add_ref(V0[i0]);
                      i0 = i0 + 1;
                      l2 = make_seq(V0, i0);
                      l1 = join_seqs(l2, v_rev_str);
                      release(l2);
                      release(v_rev_str);
                      v_rev_str = l1;
                    }
                    else
                    {
                      l1 = minus(v_i, v_line_start, env);
                      l0 = Fast_Tokenize__Error(v_line, l1, env);
                      release(l1);
                      release(v_line);
                      release(v_len);
                      release(v_i);
                      release(v_ch);
                      release(v_tokens);
                      release(v_line_start);
                      release(v_rev_str);
                      goto block_1336_end;
                    }
                  }
                }
                else
                {
                  l2 = Ascii_Newline(env);
                  l1 = to_obj(are_eq(v_ch, l2));
                  release(l2);
                  if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l1, S_true))
                  {
                    l1 = minus(v_i, v_line_start, env);
                    l0 = Fast_Tokenize__Error(v_line, l1, env);
                    release(l1);
                    release(v_line);
                    release(v_len);
                    release(v_i);
                    release(v_ch);
                    release(v_tokens);
                    release(v_line_start);
                    release(v_rev_str);
                    goto block_1336_end;
                  }
                  else
                  {
                    i0 = 0;
                    V0[i0] = v_ch;
                    add_ref(V0[i0]);
                    i0 = i0 + 1;
                    l2 = make_seq(V0, i0);
                    l1 = join_seqs(l2, v_rev_str);
                    release(l2);
                    release(v_rev_str);
                    v_rev_str = l1;
                  }
                }
              }
            }
            i0 = 0;
            l2 = Reverse(v_rev_str, env);
            V0[i0] = String(l2, env);
            release(l2);
            i0 = i0 + 1;
            V0[i0] = v_tokens;
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l1 = make_seq(V0, i0);
            release(v_tokens);
            v_tokens = l1;
            release(v_rev_str);
          }
          else
          {
            l1 = Is_Symbol(v_ch, env);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              i0 = 0;
              V0[i0] = Symbol_To_Token(v_ch, env);
              i0 = i0 + 1;
              V0[i0] = v_tokens;
              add_ref(V0[i0]);
              i0 = i0 + 1;
              l1 = make_seq(V0, i0);
              release(v_tokens);
              v_tokens = l1;
            }
            else
            {
              l1 = Is_Space(v_ch, env);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = S_false;
              }
              else
              {
                l1 = S_true;
              }
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = minus(v_i, v_line_start, env);
                l0 = Fast_Tokenize__Error(v_line, l1, env);
                release(l1);
                release(v_line);
                release(v_len);
                release(v_i);
                release(v_ch);
                release(v_tokens);
                release(v_line_start);
                goto block_1336_end;
              }
              l2 = Ascii_Newline(env);
              l1 = to_obj(are_eq(v_ch, l2));
              release(l2);
              if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
              {
                fail();
              }
              if (are_eq(l1, S_true))
              {
                l1 = plus(v_line, to_obj(1), env);
                release(v_line);
                v_line = l1;
                release(v_line_start);
                v_line_start = v_i;
                add_ref(v_line_start);
              }
            }
          }
        }
      }
      release(v_ch);
    }
    l1 = list_to_seq(v_tokens);
    l0 = Reverse(l1, env);
    release(l1);
    release(v_line);
    release(v_len);
    release(v_i);
    release(v_tokens);
    release(v_line_start);
    goto block_1336_end;
    block_1336_end:;
    return l0;
  }
  
  
  Obj Wf_Errors(Obj p0, Env &env)
  {
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Stream t0;
    Stream t1;
    SetIter s0;
    Stream t2;
    SetIter s1;
    SetIter s2;
    MapIter m0;
    SetIter s3;
    Obj v_tdefs;
    Obj v_fndefs;
    Obj v_s;
    Obj v_n;
    Obj V0[3];
    Obj V2[2];
    Obj V1[3];
    Obj v_d;
    Obj v_fd;
    Obj v_p;
    Obj v_decls;
    Obj v_par_tdefs;
    Obj v_ublocks;
    Obj v_ub;
    Obj v_all_def_fns;
    Obj v_inst_tdefs;
    Obj v_td1;
    Obj v_td2;
    Obj v_dup_tdef_errs;
    Obj v_dup_par_tdef_errs;
    Obj v_all_fndefs;
    Obj v_fn_groups;
    Obj v_fd1;
    Obj v_fd2;
    Obj v_fns;
    Obj v_incomp_fn_sgns;
    Obj v_undef_type_symb_errs;
    Obj v_errs_so_far;
    Obj v_decl_errs;
  
    v_prg = p0;
    l1 = Untag(v_prg, env);
    v_decls = Set(l1, env);
    release(l1);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_syntypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synpartypedef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_par_tdefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synfndef(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_fndefs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_decls);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      b1 = is_synusingblock(l2);
      if (b1)
      {
        v_d = l2;
      }
      if (b1)
      {
        add_ref(v_d);
        append(t0, v_d);
      }
      move_forward(s0);
    }
    v_ublocks = make_set(t0);
    init(t0);
    get_set_iter(s0, v_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_fd = l3;
      b1 = true;
      if (b1)
      {
        l3 = Untyped_Sgn(v_fd, env);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    init(t0);
    get_set_iter(s0, v_ublocks);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_ub = l4;
      b1 = true;
      if (b1)
      {
        l5 = ext_lookup(v_ub, S_fn_defs);
        add_ref(l5);
        l4 = Set(l5, env);
        release(l5);
        get_set_iter(s1, l4);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l5 = get_curr_obj(s1);
          v_fd = l5;
          b1 = true;
          if (b1)
          {
            l7 = ext_lookup(v_ub, S_signatures);
            add_ref(l7);
            l6 = Set(l7, env);
            release(l7);
            l5 = Untyped_Sgn(v_fd, l6, env);
            release(l6);
            append(t0, l5);
          }
          move_forward(s1);
        }
        release(l4);
      }
      move_forward(s0);
    }
    l2 = make_set(t0);
    v_all_def_fns = amp(l1, l2, env);
    release(l2);
    release(l1);
    v_inst_tdefs = Create_Type_Map(v_prg, env);
    init(t0);
    get_set_iter(s0, v_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_td1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_tdefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_td2 = l3;
          b1 = true;
          if (b1)
          {
            l3 = to_obj(are_eq(v_td1, v_td2));
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l4 = ext_lookup(v_td1, S_name);
              add_ref(l4);
              l5 = ext_lookup(v_td2, S_name);
              add_ref(l5);
              l3 = to_obj(are_eq(l4, l5));
              release(l5);
              release(l4);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l4 = ext_lookup(v_td1, S_name);
              add_ref(l4);
              l3 = make_tagged_obj(S_dupl_tdef, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    v_dup_tdef_errs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_td1 = l2;
      b1 = true;
      if (b1)
      {
        get_set_iter(s1, v_tdefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l3 = get_curr_obj(s1);
          v_td2 = l3;
          b1 = true;
          if (b1)
          {
            l3 = to_obj(are_eq(v_td1, v_td2));
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l3 = S_false;
            }
            else
            {
              l3 = S_true;
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l4 = ext_lookup(v_td1, S_name);
              add_ref(l4);
              l5 = ext_lookup(v_td2, S_name);
              add_ref(l5);
              l3 = to_obj(are_eq(l4, l5));
              release(l5);
              release(l4);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              l5 = ext_lookup(v_td1, S_params);
              add_ref(l5);
              l4 = Length(l5, env);
              release(l5);
              l6 = ext_lookup(v_td2, S_params);
              add_ref(l6);
              l5 = Length(l6, env);
              release(l6);
              l3 = to_obj(are_eq(l4, l5));
              release(l5);
              release(l4);
              if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
              {
                fail();
              }
            }
            if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
            {
              fail();
            }
            if (are_eq(l3, S_true))
            {
              i0 = 0;
              V0[i0] = S_name;
              V1[i0] = ext_lookup(v_td1, S_name);
              add_ref(V1[i0]);
              i0 = i0 + 1;
              V0[i0] = S_arity;
              l5 = ext_lookup(v_td1, S_params);
              add_ref(l5);
              V1[i0] = Length(l5, env);
              release(l5);
              i0 = i0 + 1;
              l4 = make_map(V0, V1, i0);
              l3 = make_tagged_obj(S_dupl_par_tdef, l4);
              append(t0, l3);
            }
          }
          move_forward(s1);
        }
      }
      move_forward(s0);
    }
    v_dup_par_tdef_errs = make_set(t0);
    init(t0);
    get_set_iter(s0, v_ublocks);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l4 = get_curr_obj(s0);
      v_ub = l4;
      b1 = true;
      if (b1)
      {
        l5 = ext_lookup(v_ub, S_fn_defs);
        add_ref(l5);
        l4 = Set(l5, env);
        release(l5);
        append(t0, l4);
      }
      move_forward(s0);
    }
    l2 = make_set(t0);
    l1 = Union(l2, env);
    release(l2);
    v_all_fndefs = amp(v_fndefs, l1, env);
    release(l1);
    init(t0);
    init(t1);
    init(t2);
    get_set_iter(s0, v_all_fndefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_fd = l3;
      b1 = true;
      if (b1)
      {
        l3 = Untyped_Sgn(v_fd, env);
        append(t2, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t2);
    get_set_iter(s0, l1);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l2 = get_curr_obj(s0);
      v_n = l2;
      b1 = true;
      if (b1)
      {
        add_ref(v_n);
        append(t0, v_n);
        init(t2);
        get_set_iter(s1, v_all_fndefs);
        for ( ; ; )
        {
          if (is_out_of_range(s1))
          {
            break;
          }
          l4 = get_curr_obj(s1);
          v_fd = l4;
          b1 = true;
          if (b1)
          {
            l5 = Untyped_Sgn(v_fd, env);
            l4 = to_obj(are_eq(l5, v_n));
            release(l5);
            if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
            {
              fail();
            }
            if (are_eq(l4, S_true))
            {
              add_ref(v_fd);
              append(t2, v_fd);
            }
          }
          move_forward(s1);
        }
        l2 = make_set(t2);
        append(t1, l2);
      }
      move_forward(s0);
    }
    release(l1);
    v_fn_groups = make_map(t0, t1);
    init(t0);
    get_map_iter(m0, v_fn_groups);
    for ( ; ; )
    {
      if (is_out_of_range(m0))
      {
        break;
      }
      l2 = get_curr_key(m0);
      v_s = l2;
      b1 = true;
      if (b1)
      {
        l2 = get_curr_value(m0);
        v_fns = l2;
        b1 = true;
        if (b1)
        {
          get_set_iter(s1, v_fns);
          for ( ; ; )
          {
            if (is_out_of_range(s1))
            {
              break;
            }
            l3 = get_curr_obj(s1);
            v_fd1 = l3;
            b1 = true;
            if (b1)
            {
              get_set_iter(s2, v_fns);
              for ( ; ; )
              {
                if (is_out_of_range(s2))
                {
                  break;
                }
                l4 = get_curr_obj(s2);
                v_fd2 = l4;
                b1 = true;
                if (b1)
                {
                  l4 = to_obj(are_eq(v_fd1, v_fd2));
                  if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l4, S_true))
                  {
                    l4 = S_false;
                  }
                  else
                  {
                    l4 = S_true;
                  }
                  if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l4, S_true))
                  {
                    Obj BK1338 = env.n_typedefs;
                    env.n_typedefs = v_inst_tdefs;
                    add_ref(env.n_typedefs);
                    l4 = Syn_Fns_Are_Compatible(v_fd1, v_fd2, env);
                    release(env.n_typedefs);
                    env.n_typedefs = BK1338;
                    if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                    {
                      fail();
                    }
                    if (are_eq(l4, S_true))
                    {
                      l4 = S_false;
                    }
                    else
                    {
                      l4 = S_true;
                    }
                    if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                    {
                      fail();
                    }
                  }
                  if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
                  {
                    fail();
                  }
                  if (are_eq(l4, S_true))
                  {
                    i0 = 0;
                    V0[i0] = S_name;
                    V1[i0] = ext_lookup(v_s, S_name);
                    add_ref(V1[i0]);
                    i0 = i0 + 1;
                    V0[i0] = S_arity;
                    V1[i0] = ext_lookup(v_s, S_arity);
                    add_ref(V1[i0]);
                    i0 = i0 + 1;
                    V0[i0] = S_params;
                    init(t1);
                    i1 = 0;
                    V2[i1] = v_fd1;
                    add_ref(V2[i1]);
                    i1 = i1 + 1;
                    V2[i1] = v_fd2;
                    add_ref(V2[i1]);
                    i1 = i1 + 1;
                    l6 = make_set(V2, i1);
                    get_set_iter(s3, l6);
                    for ( ; ; )
                    {
                      if (is_out_of_range(s3))
                      {
                        break;
                      }
                      l7 = get_curr_obj(s3);
                      v_fd = l7;
                      b1 = true;
                      if (b1)
                      {
                        Obj BK1339 = env.n_typedefs;
                        env.n_typedefs = v_inst_tdefs;
                        add_ref(env.n_typedefs);
                        l7 = Par_Parts(v_fd, env);
                        release(env.n_typedefs);
                        env.n_typedefs = BK1339;
                        append(t1, l7);
                      }
                      move_forward(s3);
                    }
                    release(l6);
                    V1[i0] = make_set(t1);
                    i0 = i0 + 1;
                    l5 = make_map(V0, V1, i0);
                    l4 = make_tagged_obj(S_incomp_fndefs, l5);
                    append(t0, l4);
                  }
                }
                move_forward(s2);
              }
            }
            move_forward(s1);
          }
        }
      }
      move_forward(m0);
    }
    v_incomp_fn_sgns = make_set(t0);
    Obj BK1340 = env.n_typedefs;
    env.n_typedefs = v_inst_tdefs;
    add_ref(env.n_typedefs);
    v_undef_type_symb_errs = Undef_Type_Symbol_Errs(v_fndefs, v_ublocks, env);
    release(env.n_typedefs);
    env.n_typedefs = BK1340;
    l2 = amp(v_dup_tdef_errs, v_dup_par_tdef_errs, env);
    l1 = amp(l2, v_incomp_fn_sgns, env);
    release(l2);
    v_errs_so_far = amp(l1, v_undef_type_symb_errs, env);
    release(l1);
    l2 = empty_set;
    l1 = to_obj(are_eq(v_errs_so_far, l2));
    release(l2);
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l1 = S_false;
    }
    else
    {
      l1 = S_true;
    }
    if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
    {
      fail();
    }
    if (are_eq(l1, S_true))
    {
      l0 = v_errs_so_far;
      add_ref(l0);
      release(v_tdefs);
      release(v_fndefs);
      release(v_decls);
      release(v_par_tdefs);
      release(v_ublocks);
      release(v_all_def_fns);
      release(v_inst_tdefs);
      release(v_dup_tdef_errs);
      release(v_dup_par_tdef_errs);
      release(v_all_fndefs);
      release(v_fn_groups);
      release(v_incomp_fn_sgns);
      release(v_undef_type_symb_errs);
      release(v_errs_so_far);
      goto block_1337_end;
    }
    Obj BK1341 = env.n_typedefs;
    env.n_typedefs = v_inst_tdefs;
    add_ref(env.n_typedefs);
    Obj BK1342 = env.n_fns_in_scope;
    env.n_fns_in_scope = v_all_def_fns;
    add_ref(env.n_fns_in_scope);
    init(t0);
    get_set_iter(s0, v_par_tdefs);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l3 = get_curr_obj(s0);
      v_p = l3;
      b1 = true;
      if (b1)
      {
        i0 = 0;
        V0[i0] = ext_lookup(v_p, S_name);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l4 = ext_lookup(v_p, S_params);
        add_ref(l4);
        V0[i0] = Length(l4, env);
        release(l4);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        append(t0, l3);
      }
      move_forward(s0);
    }
    l1 = make_set(t0);
    Obj BK1343 = env.n_all_par_type_symbols;
    env.n_all_par_type_symbols = l1;
    add_ref(env.n_all_par_type_symbols);
    l5 = Tdef_Errs(v_tdefs, env);
    l6 = Par_Tdef_Errs(v_par_tdefs, env);
    l4 = amp(l5, l6, env);
    release(l6);
    release(l5);
    l5 = Inst_Tdef_Errs(v_inst_tdefs, env);
    l3 = amp(l4, l5, env);
    release(l5);
    release(l4);
    l5 = empty_set;
    l4 = Fn_Def_Errs(v_fndefs, v_all_def_fns, l5, env);
    release(l5);
    l2 = amp(l3, l4, env);
    release(l4);
    release(l3);
    l3 = Ublock_Errors(v_ublocks, v_all_def_fns, env);
    v_decl_errs = amp(l2, l3, env);
    release(l3);
    release(l2);
    release(env.n_all_par_type_symbols);
    env.n_all_par_type_symbols = BK1343;
    release(l1);
    release(env.n_fns_in_scope);
    env.n_fns_in_scope = BK1342;
    release(env.n_typedefs);
    env.n_typedefs = BK1341;
    l0 = v_decl_errs;
    add_ref(l0);
    release(v_tdefs);
    release(v_fndefs);
    release(v_decls);
    release(v_par_tdefs);
    release(v_ublocks);
    release(v_all_def_fns);
    release(v_inst_tdefs);
    release(v_dup_tdef_errs);
    release(v_dup_par_tdef_errs);
    release(v_all_fndefs);
    release(v_fn_groups);
    release(v_incomp_fn_sgns);
    release(v_undef_type_symb_errs);
    release(v_errs_so_far);
    release(v_decl_errs);
    goto block_1337_end;
    block_1337_end:;
    return l0;
  }
  
  
  Obj Desugar_Stmt(Obj p0, Obj p1, Env &env)
  {
    Obj v_cond;
    Obj v_body;
    Obj v_asgnms;
    Obj v_start_val;
    Obj v_end_val;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    int i2;
    SeqIter q0;
    Obj v_vals;
    Obj v_b;
    Obj v_e;
    Obj v_i;
    Obj v_res;
    Obj v_ss;
    Obj V0[3];
    Obj V1[4];
    Obj V2[4];
    Obj v_fd;
    Obj v_it;
    Obj v_vs;
    Obj v_nps;
    Obj v_stmt;
    Obj v_def_vars;
    Obj v_exit_stmt;
    Obj v_iters;
    Obj v_for_vs;
  
    v_stmt = p0;
    v_def_vars = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1345_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assignment_stmt);
    if (!b1)
    {
      goto block_1345_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1345_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = S_var;
      V1[i0] = ext_lookup(v_stmt, S_var);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_value;
      l2 = ext_lookup(v_stmt, S_value);
      add_ref(l2);
      V1[i0] = Desugar_Expr(l2, v_def_vars, env);
      release(l2);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_assignment_stmt, l1);
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1346_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_1346_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1346_end:;
    if (b1)
    {
      l1 = Desugar_Expr(v_e, v_def_vars, env);
      l0 = make_tagged_obj(S_return_stmt, l1);
      goto block_1344_end;
    }
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      l0 = S_break_stmt;
      goto block_1344_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      l0 = S_fail_stmt;
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1347_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assert_stmt);
    if (!b1)
    {
      goto block_1347_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1347_end:;
    if (b1)
    {
      l1 = Desugar_Expr(v_e, v_def_vars, env);
      l0 = make_tagged_obj(S_assert_stmt, l1);
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1348_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_print_stmt);
    if (!b1)
    {
      goto block_1348_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1348_end:;
    if (b1)
    {
      l1 = Desugar_Expr(v_e, v_def_vars, env);
      l0 = make_tagged_obj(S_print_stmt, l1);
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1349_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_inf_loop_stmt);
    if (!b1)
    {
      goto block_1349_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1349_end:;
    if (b1)
    {
      l1 = Desugar_Stmts(v_ss, v_def_vars, env);
      l0 = make_tagged_obj(S_loop_stmt, l1);
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1350_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_1350_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1350_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_else);
      add_ref(l1);
      v_res = Desugar_Stmts(l1, v_def_vars, env);
      release(l1);
      l2 = ext_lookup(v_stmt, S_branches);
      add_ref(l2);
      l1 = Reverse(l2, env);
      release(l2);
      get_seq_iter(q0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        l2 = ext_lookup(v_b, S_cond);
        add_ref(l2);
        v_cond = Desugar_Expr(l2, v_def_vars, env);
        release(l2);
        l2 = ext_lookup(v_b, S_body);
        add_ref(l2);
        v_body = Desugar_Stmts(l2, v_def_vars, env);
        release(l2);
        i0 = 0;
        i1 = 0;
        V1[i1] = S_cond;
        V2[i1] = v_cond;
        add_ref(V2[i1]);
        i1 = i1 + 1;
        V1[i1] = S_body;
        V2[i1] = v_body;
        add_ref(V2[i1]);
        i1 = i1 + 1;
        V1[i1] = S_else;
        V2[i1] = v_res;
        add_ref(V2[i1]);
        i1 = i1 + 1;
        l3 = make_map(V1, V2, i1);
        V0[i0] = make_tagged_obj(S_if_stmt, l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        release(v_res);
        v_res = l2;
        release(v_cond);
        release(v_body);
        move_forward(q0);
      }
      release(l1);
      b1 = is_seq(v_res);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = Length(v_res, env);
        l1 = to_obj(are_eq(l2, to_obj(1)));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      l0 = brackets(v_res, to_obj(0), env);
      release(v_res);
      goto block_1351_end;
      block_1351_end:;
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1352_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_let_stmt);
    if (!b1)
    {
      goto block_1352_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1352_end:;
    if (b1)
    {
      l3 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l3);
      l2 = make_array(get_seq_len(l3), S_nil);
      get_seq_iter(q0, l3);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_fd = get_curr_obj(q0);
        l7 = ext_lookup(v_fd, S_name);
        add_ref(l7);
        l6 = Untag(l7, env);
        release(l7);
        l4 = make_tagged_obj(S_named_par, l6);
        set_at(l2, i0, l4);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l3);
      l1 = Set(l2, env);
      release(l2);
      v_nps = amp(env.n_named_params, l1, env);
      release(l1);
      Obj BK1354 = env.n_named_params;
      env.n_named_params = v_nps;
      add_ref(env.n_named_params);
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_body = Desugar_Stmts(l1, v_def_vars, env);
      release(l1);
      release(env.n_named_params);
      env.n_named_params = BK1354;
      l1 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l1);
      v_asgnms = Syn_Fn_Defs_To_Named_Params(l1, v_def_vars, env);
      release(l1);
      i0 = 0;
      V0[i0] = S_body;
      V1[i0] = v_body;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_asgnms;
      V1[i0] = v_asgnms;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      l0 = make_tagged_obj(S_let_stmt, l1);
      release(v_body);
      release(v_asgnms);
      release(v_nps);
      goto block_1353_end;
      block_1353_end:;
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1355_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_loop_stmt);
    if (!b1)
    {
      goto block_1355_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1355_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_cond);
      add_ref(l1);
      v_cond = Desugar_Expr(l1, v_def_vars, env);
      release(l1);
      i0 = 0;
      V0[i0] = S_else;
      V1[i0] = empty_seq;
      i0 = i0 + 1;
      V0[i0] = S_body;
      i1 = 0;
      V2[i1] = S_break_stmt;
      i1 = i1 + 1;
      V1[i0] = make_seq(V2, i1);
      i0 = i0 + 1;
      V0[i0] = S_cond;
      add_ref(v_cond);
      V1[i0] = make_tagged_obj(S_not_expr, v_cond);
      i0 = i0 + 1;
      l1 = make_map(V0, V1, i0);
      v_exit_stmt = make_tagged_obj(S_if_stmt, l1);
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_body = Desugar_Stmts(l1, v_def_vars, env);
      release(l1);
      l1 = ext_lookup(v_stmt, S_skip_first);
      add_ref(l1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        V0[i0] = v_exit_stmt;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = amp(v_body, l2, env);
        release(l2);
        release(v_body);
        v_body = l1;
      }
      else
      {
        i0 = 0;
        V0[i0] = v_exit_stmt;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = amp(l2, v_body, env);
        release(l2);
        release(v_body);
        v_body = l1;
      }
      add_ref(v_body);
      l0 = make_tagged_obj(S_loop_stmt, v_body);
      release(v_cond);
      release(v_body);
      release(v_exit_stmt);
      goto block_1356_end;
      block_1356_end:;
      goto block_1344_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1357_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_for_stmt);
    if (!b1)
    {
      goto block_1357_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1357_end:;
    if (b1)
    {
      v_iters = ext_lookup(v_stmt, S_loops);
      add_ref(v_iters);
      v_vs = v_def_vars;
      add_ref(v_vs);
      v_for_vs = empty_seq;
      get_seq_iter(q0, v_iters);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_it = get_curr_obj(q0);
        i0 = 0;
        V0[i0] = ext_lookup(v_it, S_var);
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l3 = ext_lookup(v_it, S_idx_var, b1);
        l3 = to_obj(b1);
        if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
        {
          fail();
        }
        if (are_eq(l3, S_true))
        {
          V0[i0] = ext_lookup(v_it, S_idx_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
        }
        l2 = make_set(V0, i0);
        l1 = amp(v_vs, l2, env);
        release(l2);
        release(v_vs);
        v_vs = l1;
        i0 = 0;
        V0[i0] = v_vs;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = amp(v_for_vs, l2, env);
        release(l2);
        release(v_for_vs);
        v_for_vs = l1;
        move_forward(q0);
      }
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_res = Desugar_Stmts(l1, v_vs, env);
      release(l1);
      l1 = Reverse(v_iters, env);
      get_seq_iter(q0, l1);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_it = get_curr_obj(q0);
        v_i = to_obj(i0);
        release(v_vs);
        v_vs = Rev_At(v_for_vs, v_i, env);
        if (!is_tag_obj(v_it))
        {
          b1 = false;
          goto block_1359_end;
        }
        l3 = get_tag(v_it);
        b1 = are_eq(S_seq_iter, l3);
        if (!b1)
        {
          goto block_1359_end;
        }
        l3 = get_inner_obj(v_it);
        b1 = is_any(l3);
        block_1359_end:;
        l2 = to_obj(b1);
        if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
        {
          fail();
        }
        if (are_eq(l2, S_true))
        {
          l2 = ext_lookup(v_it, S_values);
          add_ref(l2);
          v_vals = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i1 = 0;
          i2 = 0;
          V1[i2] = S_values;
          V2[i2] = v_vals;
          add_ref(V2[i2]);
          i2 = i2 + 1;
          V1[i2] = S_body;
          V2[i2] = v_res;
          add_ref(V2[i2]);
          i2 = i2 + 1;
          V1[i2] = S_var;
          V2[i2] = ext_lookup(v_it, S_var);
          add_ref(V2[i2]);
          i2 = i2 + 1;
          l4 = ext_lookup(v_it, S_idx_var, b1);
          l4 = to_obj(b1);
          if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
          {
            fail();
          }
          if (are_eq(l4, S_true))
          {
            V1[i2] = S_idx_var;
            V2[i2] = ext_lookup(v_it, S_idx_var);
            add_ref(V2[i2]);
            i2 = i2 + 1;
          }
          l3 = make_map(V1, V2, i2);
          V0[i1] = make_tagged_obj(S_foreach_stmt, l3);
          i1 = i1 + 1;
          l2 = make_seq(V0, i1);
          release(v_res);
          v_res = l2;
          release(v_vals);
        }
        else
        {
          if (!is_tag_obj(v_it))
          {
            b1 = false;
            goto block_1360_end;
          }
          l3 = get_tag(v_it);
          b1 = are_eq(S_range_iter, l3);
          if (!b1)
          {
            goto block_1360_end;
          }
          l3 = get_inner_obj(v_it);
          b1 = is_any(l3);
          block_1360_end:;
          l2 = to_obj(b1);
          if (!are_eq(l2, S_true))
          {
            fail();
          }
          l2 = ext_lookup(v_it, S_start_val);
          add_ref(l2);
          v_start_val = Desugar_Expr(l2, v_vs, env);
          release(l2);
          l2 = ext_lookup(v_it, S_end_val);
          add_ref(l2);
          v_end_val = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i1 = 0;
          i2 = 0;
          V1[i2] = S_start_val;
          V2[i2] = v_start_val;
          add_ref(V2[i2]);
          i2 = i2 + 1;
          V1[i2] = S_end_val;
          V2[i2] = v_end_val;
          add_ref(V2[i2]);
          i2 = i2 + 1;
          V1[i2] = S_body;
          V2[i2] = v_res;
          add_ref(V2[i2]);
          i2 = i2 + 1;
          V1[i2] = S_var;
          V2[i2] = ext_lookup(v_it, S_var);
          add_ref(V2[i2]);
          i2 = i2 + 1;
          l3 = make_map(V1, V2, i2);
          V0[i1] = make_tagged_obj(S_for_stmt, l3);
          i1 = i1 + 1;
          l2 = make_seq(V0, i1);
          release(v_res);
          v_res = l2;
          release(v_start_val);
          release(v_end_val);
        }
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l1);
      b1 = is_seq(v_res);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = Length(v_res, env);
        l1 = to_obj(are_eq(l2, to_obj(1)));
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      l0 = brackets(v_res, to_obj(0), env);
      release(v_res);
      release(v_vs);
      release(v_iters);
      release(v_for_vs);
      goto block_1358_end;
      block_1358_end:;
      goto block_1344_end;
    }
    fail();
    block_1344_end:;
    return l0;
  }
  
  
  Obj Gen_Iter_Code(Obj p0, Obj p1, Env &env)
  {
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    int i2;
    Obj v_res_var;
    Obj v_action;
    Obj v_clause;
    Obj V0[2];
    Obj V2[1];
    Obj V1[2];
    Obj v_src_var;
    Obj v_it_var;
    Obj v_src_info;
    Obj v_loop_code;
    Obj v_tmp_var;
    Obj v_next_step_code;
    Obj v_match_code;
    Obj v_key_ptrn_code;
    Obj v_value_ptrn_code;
  
    v_clause = p0;
    v_action = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1362_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_in_clause);
    if (!b1)
    {
      goto block_1362_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1362_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      v_tmp_var = Lvar(l1, env);
      release(l1);
      v_res_var = Bvar(env.n_next_bool_var_id, env);
      v_it_var = Set_It_Var(env.n_next_set_it_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1364 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      v_src_info = Gen_Eval_Info(l2, v_src_var, env);
      release(l2);
      l2 = plus(env.n_next_set_it_var_id, to_obj(1), env);
      Obj BK1365 = env.n_next_set_it_var_id;
      env.n_next_set_it_var_id = l2;
      add_ref(env.n_next_set_it_var_id);
      v_next_step_code = Gen_Code(v_action, env);
      l3 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1366 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l3;
      add_ref(env.n_next_obj_var_id);
      l4 = plus(env.n_next_bool_var_id, to_obj(1), env);
      Obj BK1367 = env.n_next_bool_var_id;
      env.n_next_bool_var_id = l4;
      add_ref(env.n_next_bool_var_id);
      l5 = ext_lookup(v_clause, S_ptrn);
      add_ref(l5);
      v_match_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      release(env.n_next_bool_var_id);
      env.n_next_bool_var_id = BK1367;
      release(l4);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1366;
      release(l3);
      release(env.n_next_set_it_var_id);
      env.n_next_set_it_var_id = BK1365;
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1364;
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = Get_Curr_Obj(v_it_var, env);
      V1[i1] = Set_Var(v_tmp_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_match_code, env);
      release(l3);
      i1 = 0;
      V1[i1] = Do_If(v_res_var, v_next_step_code, env);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_loop_code, env);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_res_var);
      release(v_src_var);
      release(v_it_var);
      release(v_src_info);
      release(v_loop_code);
      release(v_tmp_var);
      release(v_next_step_code);
      release(v_match_code);
      goto block_1363_end;
      block_1363_end:;
      goto block_1361_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1368_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_in_clause);
    if (!b1)
    {
      goto block_1368_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1368_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      v_tmp_var = Lvar(l1, env);
      release(l1);
      v_res_var = Bvar(env.n_next_bool_var_id, env);
      v_it_var = Set_It_Var(env.n_next_set_it_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1370 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      v_src_info = Gen_Eval_Info(l2, v_src_var, env);
      release(l2);
      l2 = plus(env.n_next_set_it_var_id, to_obj(1), env);
      Obj BK1371 = env.n_next_set_it_var_id;
      env.n_next_set_it_var_id = l2;
      add_ref(env.n_next_set_it_var_id);
      l3 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1372 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l3;
      add_ref(env.n_next_obj_var_id);
      l4 = plus(env.n_next_bool_var_id, to_obj(1), env);
      Obj BK1373 = env.n_next_bool_var_id;
      env.n_next_bool_var_id = l4;
      add_ref(env.n_next_bool_var_id);
      l5 = ext_lookup(v_clause, S_ptrn);
      add_ref(l5);
      v_match_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      release(env.n_next_bool_var_id);
      env.n_next_bool_var_id = BK1373;
      release(l4);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1372;
      release(l3);
      release(env.n_next_set_it_var_id);
      env.n_next_set_it_var_id = BK1371;
      release(l2);
      v_next_step_code = Gen_Code(v_action, env);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1370;
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = Get_Curr_Obj(v_it_var, env);
      V1[i1] = Set_Var(v_tmp_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_match_code, env);
      release(l3);
      i1 = 0;
      l4 = Exit_Block(env);
      V1[i1] = Do_If(v_res_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      i0 = 0;
      l4 = amp(v_loop_code, v_next_step_code, env);
      V0[i0] = Execute_Block(l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_res_var);
      release(v_src_var);
      release(v_it_var);
      release(v_src_info);
      release(v_loop_code);
      release(v_tmp_var);
      release(v_next_step_code);
      release(v_match_code);
      goto block_1369_end;
      block_1369_end:;
      goto block_1361_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1374_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_in_clause);
    if (!b1)
    {
      goto block_1374_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1374_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      v_tmp_var = Lvar(l1, env);
      release(l1);
      v_res_var = Bvar(env.n_next_bool_var_id, env);
      v_it_var = Map_It_Var(env.n_next_map_it_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1376 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      v_src_info = Gen_Eval_Info(l2, v_src_var, env);
      release(l2);
      l2 = plus(env.n_next_set_it_var_id, to_obj(1), env);
      Obj BK1377 = env.n_next_set_it_var_id;
      env.n_next_set_it_var_id = l2;
      add_ref(env.n_next_set_it_var_id);
      v_next_step_code = Gen_Code(v_action, env);
      l3 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1378 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l3;
      add_ref(env.n_next_obj_var_id);
      l4 = plus(env.n_next_bool_var_id, to_obj(1), env);
      Obj BK1379 = env.n_next_bool_var_id;
      env.n_next_bool_var_id = l4;
      add_ref(env.n_next_bool_var_id);
      l5 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l5);
      v_key_ptrn_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      l5 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l5);
      v_value_ptrn_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      release(env.n_next_bool_var_id);
      env.n_next_bool_var_id = BK1379;
      release(l4);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1378;
      release(l3);
      release(env.n_next_set_it_var_id);
      env.n_next_set_it_var_id = BK1377;
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1376;
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = Get_Curr_Key(v_it_var, env);
      V1[i1] = Set_Var(v_tmp_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_key_ptrn_code, env);
      release(l3);
      i1 = 0;
      i2 = 0;
      l7 = Get_Curr_Value(v_it_var, env);
      V2[i2] = Set_Var(v_tmp_var, l7, env);
      release(l7);
      i2 = i2 + 1;
      l6 = make_seq(V2, i2);
      l5 = amp(l6, v_value_ptrn_code, env);
      release(l6);
      i2 = 0;
      V2[i2] = Do_If(v_res_var, v_next_step_code, env);
      i2 = i2 + 1;
      l6 = make_seq(V2, i2);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      V1[i1] = Do_If(v_res_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_loop_code, env);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_res_var);
      release(v_src_var);
      release(v_it_var);
      release(v_src_info);
      release(v_loop_code);
      release(v_tmp_var);
      release(v_next_step_code);
      release(v_key_ptrn_code);
      release(v_value_ptrn_code);
      goto block_1375_end;
      block_1375_end:;
      goto block_1361_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1380_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_not_in_clause);
    if (!b1)
    {
      goto block_1380_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1380_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      v_tmp_var = Lvar(l1, env);
      release(l1);
      v_res_var = Bvar(env.n_next_bool_var_id, env);
      v_it_var = Map_It_Var(env.n_next_map_it_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1382 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_clause, S_src);
      add_ref(l2);
      v_src_info = Gen_Eval_Info(l2, v_src_var, env);
      release(l2);
      l2 = plus(env.n_next_map_it_var_id, to_obj(1), env);
      Obj BK1383 = env.n_next_map_it_var_id;
      env.n_next_map_it_var_id = l2;
      add_ref(env.n_next_map_it_var_id);
      l3 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1384 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l3;
      add_ref(env.n_next_obj_var_id);
      l4 = plus(env.n_next_bool_var_id, to_obj(1), env);
      Obj BK1385 = env.n_next_bool_var_id;
      env.n_next_bool_var_id = l4;
      add_ref(env.n_next_bool_var_id);
      l5 = ext_lookup(v_clause, S_key_ptrn);
      add_ref(l5);
      v_key_ptrn_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      l5 = ext_lookup(v_clause, S_value_ptrn);
      add_ref(l5);
      v_value_ptrn_code = Gen_Ptrn_Matching_Code(l5, v_tmp_var, v_res_var, env);
      release(l5);
      release(env.n_next_bool_var_id);
      env.n_next_bool_var_id = BK1385;
      release(l4);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1384;
      release(l3);
      release(env.n_next_map_it_var_id);
      env.n_next_map_it_var_id = BK1383;
      release(l2);
      v_next_step_code = Gen_Code(v_action, env);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1382;
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = Get_Curr_Key(v_it_var, env);
      V1[i1] = Set_Var(v_tmp_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_key_ptrn_code, env);
      release(l3);
      i1 = 0;
      i2 = 0;
      l7 = Get_Curr_Value(v_it_var, env);
      V2[i2] = Set_Var(v_tmp_var, l7, env);
      release(l7);
      i2 = i2 + 1;
      l6 = make_seq(V2, i2);
      l5 = amp(l6, v_value_ptrn_code, env);
      release(l6);
      i2 = 0;
      l7 = Exit_Block(env);
      V2[i2] = Do_If(v_res_var, l7, env);
      release(l7);
      i2 = i2 + 1;
      l6 = make_seq(V2, i2);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      V1[i1] = Do_If(v_res_var, l4, env);
      release(l4);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      i0 = 0;
      l4 = amp(v_loop_code, v_next_step_code, env);
      V0[i0] = Execute_Block(l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_res_var);
      release(v_src_var);
      release(v_it_var);
      release(v_src_info);
      release(v_loop_code);
      release(v_tmp_var);
      release(v_next_step_code);
      release(v_key_ptrn_code);
      release(v_value_ptrn_code);
      goto block_1381_end;
      block_1381_end:;
      goto block_1361_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1386_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_clause);
    if (!b1)
    {
      goto block_1386_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1386_end:;
    if (b1)
    {
      l2 = ext_lookup(v_clause, S_left);
      add_ref(l2);
      l1 = Gen_Iter_Code(l2, v_action, env);
      release(l2);
      l3 = ext_lookup(v_clause, S_right);
      add_ref(l3);
      l2 = Gen_Iter_Code(l3, v_action, env);
      release(l3);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1361_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1387_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_clause);
    if (!b1)
    {
      goto block_1387_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1387_end:;
    if (b1)
    {
      l1 = ext_lookup(v_clause, S_left);
      add_ref(l1);
      l3 = ext_lookup(v_clause, S_right);
      add_ref(l3);
      l2 = Action(l3, v_action, env);
      release(l3);
      l0 = Gen_Iter_Code(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1361_end;
    }
    fail();
    block_1361_end:;
    return l0;
  }
  
  
  Obj To_C_Expr(Obj p0, Env &env)
  {
    Obj v_expr;
    Obj v_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    bool b1;
    int i0;
    Obj v_n;
    Obj v_a;
    Obj v_e;
    Obj v_v;
    Obj V0[15];
  
    b1 = is_objexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1390_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_object);
      if (!b1)
      {
        goto block_1390_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_atom(l1);
      if (b1)
      {
        v_a = l1;
      }
      block_1390_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(83);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l1 = make_tagged_obj(S_string, l2);
        l2 = to_str(v_a);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1391_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_object);
      if (!b1)
      {
        goto block_1391_end;
      }
      l1 = get_inner_obj(p0);
      b1 = is_int(l1);
      if (b1)
      {
        v_n = l1;
      }
      block_1391_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(106);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_Str(v_n, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      b1 = are_eq(p0, S_empty_set);
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(109);
        i0 = i0 + 1;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        l1 = make_seq(V0, i0);
        l0 = make_tagged_obj(S_string, l1);
        goto block_1389_end;
      }
      b1 = are_eq(p0, S_empty_seq);
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(109);
        i0 = i0 + 1;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(113);
        i0 = i0 + 1;
        l1 = make_seq(V0, i0);
        l0 = make_tagged_obj(S_string, l1);
        goto block_1389_end;
      }
      b1 = are_eq(p0, S_empty_map);
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(109);
        i0 = i0 + 1;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(109);
        i0 = i0 + 1;
        V0[i0] = to_obj(97);
        i0 = i0 + 1;
        V0[i0] = to_obj(112);
        i0 = i0 + 1;
        l1 = make_seq(V0, i0);
        l0 = make_tagged_obj(S_string, l1);
        goto block_1389_end;
      }
      b1 = is_objvar(p0);
      if (b1)
      {
        l0 = To_C_Var_Name(v_expr, env);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1392_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_get_tag);
      if (!b1)
      {
        goto block_1392_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1392_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(97);
        i0 = i0 + 1;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Expr(v_e, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1393_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_get_inner_obj);
      if (!b1)
      {
        goto block_1393_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1393_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(105);
        i0 = i0 + 1;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(110);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(106);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Expr(v_e, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1394_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_to_obj);
      if (!b1)
      {
        goto block_1394_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1394_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(106);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Expr(v_e, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1395_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_to_str);
      if (!b1)
      {
        goto block_1395_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1395_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Expr(v_e, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1396_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_to_symb);
      if (!b1)
      {
        goto block_1396_end;
      }
      l1 = get_inner_obj(p0);
      v_e = l1;
      b1 = true;
      block_1396_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(109);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Expr(v_e, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1397_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_get_curr_obj);
      if (!b1)
      {
        goto block_1397_end;
      }
      l1 = get_inner_obj(p0);
      v_v = l1;
      b1 = true;
      block_1397_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(99);
        i0 = i0 + 1;
        V0[i0] = to_obj(117);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(111);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(106);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Var_Name(v_v, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1398_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_get_curr_key);
      if (!b1)
      {
        goto block_1398_end;
      }
      l1 = get_inner_obj(p0);
      v_v = l1;
      b1 = true;
      block_1398_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(99);
        i0 = i0 + 1;
        V0[i0] = to_obj(117);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(107);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(121);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Var_Name(v_v, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      if (!is_tag_obj(p0))
      {
        b1 = false;
        goto block_1399_end;
      }
      l1 = get_tag(p0);
      b1 = are_eq(l1, S_get_curr_value);
      if (!b1)
      {
        goto block_1399_end;
      }
      l1 = get_inner_obj(p0);
      v_v = l1;
      b1 = true;
      block_1399_end:;
      if (b1)
      {
        i0 = 0;
        V0[i0] = to_obj(103);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(116);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(99);
        i0 = i0 + 1;
        V0[i0] = to_obj(117);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(114);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        V0[i0] = to_obj(118);
        i0 = i0 + 1;
        V0[i0] = to_obj(97);
        i0 = i0 + 1;
        V0[i0] = to_obj(108);
        i0 = i0 + 1;
        V0[i0] = to_obj(117);
        i0 = i0 + 1;
        V0[i0] = to_obj(101);
        i0 = i0 + 1;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l3 = To_C_Var_Name(v_v, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1389_end;
      }
      fail();
      block_1389_end:;
      goto block_1388_end;
    }
    b1 = is_vecvar(p0);
    if (b1)
    {
      goto block_1400_end;
    }
    b1 = is_streamvar(p0);
    if (b1)
    {
      goto block_1400_end;
    }
    b1 = is_itvar(p0);
    if (b1)
    {
      goto block_1400_end;
    }
    block_1400_end:;
    if (b1)
    {
      v_var = p0;
    }
    if (b1)
    {
      l0 = To_C_Var_Name(v_var, env);
      goto block_1388_end;
    }
    b1 = is_intexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      l0 = To_C_Expr(v_expr, S_false, env);
      goto block_1388_end;
    }
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      l0 = To_C_Expr(v_expr, S_false, env);
      goto block_1388_end;
    }
    fail();
    block_1388_end:;
    return l0;
  }
  
  
  Obj Compile_To_C(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_body;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    int i0;
    Obj l7;
    int i1;
    Obj l8;
    SeqIter q0;
    Obj v_i;
    Obj V1[2];
    Obj v_d;
    Obj V0[45];
    Obj v_bool_proc_defs;
    Obj v_obj_proc_defs;
    Obj v_cls_defs;
    Obj v_pd;
    Obj v_type_checking_fn_decls;
    Obj v_closure_decls;
    Obj v_fn_decls;
    Obj v_type_checking_fns;
    Obj v_closures;
    Obj v_functions;
  
    v_obj_proc_defs = p0;
    v_bool_proc_defs = p1;
    v_cls_defs = p2;
    l1 = make_array(get_seq_len(v_bool_proc_defs), S_nil);
    get_seq_iter(q0, v_bool_proc_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_pd = get_curr_obj(q0);
      l3 = Gen_C_Decl(v_pd, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l4 = empty_seq;
    l3 = make_tagged_obj(S_string, l4);
    l2 = Rep_Seq(to_obj(4), l3, env);
    release(l3);
    v_type_checking_fn_decls = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(84);
    i0 = i0 + 1;
    V0[i0] = to_obj(121);
    i0 = i0 + 1;
    V0[i0] = to_obj(112);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(104);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(107);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(102);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l1 = make_array(get_seq_len(v_cls_defs), S_nil);
    get_seq_iter(q0, v_cls_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_d = get_curr_obj(q0);
      v_i = to_obj(i0);
      l3 = Gen_C_Decl(v_d, v_i, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l4 = empty_seq;
    l3 = make_tagged_obj(S_string, l4);
    l2 = Rep_Seq(to_obj(4), l3, env);
    release(l3);
    v_closure_decls = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(67);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l1 = make_array(get_seq_len(v_obj_proc_defs), S_nil);
    get_seq_iter(q0, v_obj_proc_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_pd = get_curr_obj(q0);
      l3 = Gen_C_Decl(v_pd, env);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l4 = empty_seq;
    l3 = make_tagged_obj(S_string, l4);
    l2 = Rep_Seq(to_obj(4), l3, env);
    release(l3);
    v_fn_decls = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(70);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l2 = make_array(get_seq_len(v_bool_proc_defs), S_nil);
    get_seq_iter(q0, v_bool_proc_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_d = get_curr_obj(q0);
      l6 = Compile_To_C(v_d, env);
      i1 = 0;
      l8 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l8);
      i1 = i1 + 1;
      l8 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l8);
      i1 = i1 + 1;
      l7 = make_seq(V0, i1);
      l4 = amp(l6, l7, env);
      release(l7);
      release(l6);
      set_at(l2, i0, l4);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l1 = Join(l2, env);
    release(l2);
    l4 = empty_seq;
    l3 = make_tagged_obj(S_string, l4);
    l2 = Rep_Seq(to_obj(4), l3, env);
    release(l3);
    v_type_checking_fns = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(84);
    i0 = i0 + 1;
    V0[i0] = to_obj(121);
    i0 = i0 + 1;
    V0[i0] = to_obj(112);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(104);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(107);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(102);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l2 = make_array(get_seq_len(v_cls_defs), S_nil);
    get_seq_iter(q0, v_cls_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_d = get_curr_obj(q0);
      v_i = to_obj(i0);
      l6 = Compile_To_C(v_d, v_i, env);
      i1 = 0;
      l8 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l8);
      i1 = i1 + 1;
      l8 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l8);
      i1 = i1 + 1;
      l7 = make_seq(V0, i1);
      l4 = amp(l6, l7, env);
      release(l7);
      release(l6);
      set_at(l2, i0, l4);
      move_forward(q0);
      i0 = i0 + 1;
    }
    l1 = Join(l2, env);
    release(l2);
    l4 = empty_seq;
    l3 = make_tagged_obj(S_string, l4);
    l2 = Rep_Seq(to_obj(4), l3, env);
    release(l3);
    v_closures = amp(l1, l2, env);
    release(l2);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(67);
    i0 = i0 + 1;
    V0[i0] = to_obj(108);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    l1 = make_array(get_seq_len(v_obj_proc_defs), S_nil);
    get_seq_iter(q0, v_obj_proc_defs);
    i0 = 0;
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      v_d = get_curr_obj(q0);
      l5 = Compile_To_C(v_d, env);
      i1 = 0;
      l7 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l7);
      i1 = i1 + 1;
      l7 = empty_seq;
      V0[i1] = make_tagged_obj(S_string, l7);
      i1 = i1 + 1;
      l6 = make_seq(V0, i1);
      l3 = amp(l5, l6, env);
      release(l6);
      release(l5);
      set_at(l1, i0, l3);
      move_forward(q0);
      i0 = i0 + 1;
    }
    v_functions = Join(l1, env);
    release(l1);
    i0 = 0;
    V0[i0] = to_obj(70);
    i0 = i0 + 1;
    V0[i0] = to_obj(117);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(99);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(105);
    i0 = i0 + 1;
    V0[i0] = to_obj(111);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(115);
    i0 = i0 + 1;
    V0[i0] = to_obj(32);
    i0 = i0 + 1;
    V0[i0] = to_obj(103);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(110);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(114);
    i0 = i0 + 1;
    V0[i0] = to_obj(97);
    i0 = i0 + 1;
    V0[i0] = to_obj(116);
    i0 = i0 + 1;
    V0[i0] = to_obj(101);
    i0 = i0 + 1;
    V0[i0] = to_obj(100);
    i0 = i0 + 1;
    l2 = make_seq(V0, i0);
    l1 = make_tagged_obj(S_string, l2);
    print(l1);
    release(l1);
    i0 = 0;
    V0[i0] = v_type_checking_fn_decls;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_closure_decls;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_fn_decls;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_type_checking_fns;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_closures;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    V0[i0] = v_functions;
    add_ref(V0[i0]);
    i0 = i0 + 1;
    l1 = make_seq(V0, i0);
    v_body = Join(l1, env);
    release(l1);
    i0 = 0;
    V0[i0] = S_body;
    V1[i0] = v_body;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    V0[i0] = S_header;
    V1[i0] = v_fn_decls;
    add_ref(V1[i0]);
    i0 = i0 + 1;
    l0 = make_map(V0, V1, i0);
    release(v_body);
    release(v_type_checking_fn_decls);
    release(v_closure_decls);
    release(v_fn_decls);
    release(v_type_checking_fns);
    release(v_closures);
    release(v_functions);
    goto block_1401_end;
    block_1401_end:;
    return l0;
  }
  
  
  Obj Gen_Code(Obj p0, Obj p1, Obj p2, Obj p3, Env &env)
  {
    Obj v_idx_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    SeqIter q0;
    Obj v_code;
    Obj v_res_var;
    Obj v_all_rel_vars;
    Obj v_break_vars;
    Obj v_surv_vars;
    Obj v_e;
    Obj v_ss;
    Obj v_v;
    Obj V0[5];
    Obj V1[5];
    Obj v_stmt;
    Obj v_info;
    Obj v_cond_info;
    Obj v_src_var;
    Obj v_it_var;
    Obj v_src_info;
    Obj v_loop_code;
    Obj v_tmp_var;
    Obj v_if_code;
    Obj v_else_code;
    Obj v_branch_code;
    Obj v_start_var;
    Obj v_end_var;
    Obj v_start_eval_code;
    Obj v_end_eval_code;
    Obj v_body_code;
    Obj v_has_idx_var;
  
    v_stmt = p0;
    v_res_var = p1;
    v_all_rel_vars = p2;
    v_break_vars = p3;
    b1 = are_eq(p0, S_break_stmt);
    if (b1)
    {
      l2 = Rand_Sort(v_break_vars, env);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        l3 = Release(v_v, env);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      i0 = 0;
      V0[i0] = Break_Loop(env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1402_end;
    }
    b1 = are_eq(p0, S_fail_stmt);
    if (b1)
    {
      i0 = 0;
      V0[i0] = Terminate(env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1403_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_loop_stmt);
    if (!b1)
    {
      goto block_1403_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1403_end:;
    if (b1)
    {
      i0 = 0;
      l2 = empty_set;
      l3 = empty_set;
      l1 = Gen_Code(v_ss, v_res_var, v_all_rel_vars, l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1404_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assert_stmt);
    if (!b1)
    {
      goto block_1404_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1404_end:;
    if (b1)
    {
      v_info = Gen_Eval_Info(v_e, env);
      l1 = ext_lookup(v_info, S_eval_code);
      add_ref(l1);
      i0 = 0;
      l4 = ext_lookup(v_info, S_expr);
      add_ref(l4);
      l3 = Is_True(l4, env);
      release(l4);
      V0[i0] = Check(l3, env);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      goto block_1405_end;
      block_1405_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1406_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_print_stmt);
    if (!b1)
    {
      goto block_1406_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1406_end:;
    if (b1)
    {
      v_info = Gen_Eval_Info(v_e, env);
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      i0 = 0;
      l4 = ext_lookup(v_info, S_expr);
      add_ref(l4);
      V0[i0] = Print_Obj(l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      goto block_1407_end;
      block_1407_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1408_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_return_stmt);
    if (!b1)
    {
      goto block_1408_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1408_end:;
    if (b1)
    {
      l1 = In(v_res_var, v_all_rel_vars, env);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      l2 = Gen_Eval_Code(v_e, v_res_var, env);
      l4 = Rand_Sort(v_all_rel_vars, env);
      l3 = make_array(get_seq_len(l4), S_nil);
      get_seq_iter(q0, l4);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        l5 = Release(v_v, env);
        set_at(l3, i0, l5);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = Exit_Block(env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1409_end;
      block_1409_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1410_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_let_stmt);
    if (!b1)
    {
      goto block_1410_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1410_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = Flow_Control_Can_Jump_Out(l2, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!are_eq(l1, S_true))
      {
        fail();
      }
      l2 = ext_lookup(v_stmt, S_body);
      add_ref(l2);
      l1 = New_Vars(l2, env);
      release(l2);
      v_surv_vars = minus(l1, v_all_rel_vars, env);
      release(l1);
      l2 = ext_lookup(v_stmt, S_asgnms);
      add_ref(l2);
      l1 = Rand_Sort_Pairs(l2, env);
      release(l2);
      i0 = 0;
      V0[i0] = S_res_var;
      V1[i0] = v_res_var;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_all_rel_vars;
      V1[i0] = v_all_rel_vars;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_break_vars;
      V1[i0] = v_break_vars;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_surv_vars;
      V1[i0] = v_surv_vars;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_body;
      V1[i0] = ext_lookup(v_stmt, S_body);
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l2 = make_map(V0, V1, i0);
      l0 = Make_Scopes(l1, l2, env);
      release(l2);
      release(l1);
      release(v_surv_vars);
      goto block_1411_end;
      block_1411_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1412_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_assignment_stmt);
    if (!b1)
    {
      goto block_1412_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1412_end:;
    if (b1)
    {
      l2 = ext_lookup(v_stmt, S_var);
      add_ref(l2);
      l1 = In(l2, v_all_rel_vars, env);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_stmt, S_var);
        add_ref(l2);
        l4 = ext_lookup(v_stmt, S_value);
        add_ref(l4);
        l3 = Extern_Vars(l4, env);
        release(l4);
        l1 = In(l2, l3, env);
        release(l3);
        release(l2);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          v_tmp_var = Lvar(env.n_next_obj_var_id, env);
          l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
          Obj BK1414 = env.n_next_obj_var_id;
          env.n_next_obj_var_id = l2;
          add_ref(env.n_next_obj_var_id);
          l3 = ext_lookup(v_stmt, S_value);
          add_ref(l3);
          l1 = Gen_Eval_Code(l3, v_tmp_var, env);
          release(l3);
          release(env.n_next_obj_var_id);
          env.n_next_obj_var_id = BK1414;
          release(l2);
          i0 = 0;
          l3 = ext_lookup(v_stmt, S_var);
          add_ref(l3);
          V0[i0] = Release(l3, env);
          release(l3);
          i0 = i0 + 1;
          l3 = ext_lookup(v_stmt, S_var);
          add_ref(l3);
          V0[i0] = Set_Var(l3, v_tmp_var, env);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          v_code = amp(l1, l2, env);
          release(l2);
          release(l1);
          release(v_tmp_var);
        }
        else
        {
          i0 = 0;
          l2 = ext_lookup(v_stmt, S_var);
          add_ref(l2);
          V0[i0] = Release(l2, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          l3 = ext_lookup(v_stmt, S_value);
          add_ref(l3);
          l4 = ext_lookup(v_stmt, S_var);
          add_ref(l4);
          l2 = Gen_Eval_Code(l3, l4, env);
          release(l4);
          release(l3);
          v_code = amp(l1, l2, env);
          release(l2);
          release(l1);
        }
      }
      else
      {
        l1 = ext_lookup(v_stmt, S_value);
        add_ref(l1);
        l2 = ext_lookup(v_stmt, S_var);
        add_ref(l2);
        v_code = Gen_Eval_Code(l1, l2, env);
        release(l2);
        release(l1);
      }
      l0 = v_code;
      add_ref(l0);
      release(v_code);
      goto block_1413_end;
      block_1413_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1415_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_stmt);
    if (!b1)
    {
      goto block_1415_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1415_end:;
    if (b1)
    {
      l1 = ext_lookup(v_stmt, S_cond);
      add_ref(l1);
      v_cond_info = Gen_Eval_Info(l1, env);
      release(l1);
      l1 = New_Vars(v_stmt, env);
      v_surv_vars = minus(l1, v_all_rel_vars, env);
      release(l1);
      l1 = ext_lookup(v_stmt, S_body);
      add_ref(l1);
      v_if_code = Gen_Code(l1, v_res_var, v_all_rel_vars, v_break_vars, v_surv_vars, env);
      release(l1);
      l1 = ext_lookup(v_stmt, S_else);
      add_ref(l1);
      v_else_code = Gen_Code(l1, v_res_var, v_all_rel_vars, v_break_vars, v_surv_vars, env);
      release(l1);
      i0 = 0;
      l2 = ext_lookup(v_cond_info, S_expr);
      add_ref(l2);
      l1 = Is_Bool(l2, env);
      release(l2);
      V0[i0] = Check(l1, env);
      release(l1);
      i0 = i0 + 1;
      l2 = ext_lookup(v_cond_info, S_expr);
      add_ref(l2);
      l1 = Is_True(l2, env);
      release(l2);
      V0[i0] = Branch(l1, v_if_code, v_else_code, env);
      release(l1);
      i0 = i0 + 1;
      v_branch_code = make_seq(V0, i0);
      l1 = ext_lookup(v_cond_info, S_eval_code);
      add_ref(l1);
      l0 = amp(l1, v_branch_code, env);
      release(l1);
      release(v_surv_vars);
      release(v_cond_info);
      release(v_if_code);
      release(v_else_code);
      release(v_branch_code);
      goto block_1416_end;
      block_1416_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1417_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_for_stmt);
    if (!b1)
    {
      goto block_1417_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1417_end:;
    if (b1)
    {
      v_tmp_var = Lvar(env.n_next_obj_var_id, env);
      v_start_var = Ivar(env.n_next_int_var_id, env);
      l1 = plus(env.n_next_int_var_id, to_obj(1), env);
      v_end_var = Ivar(l1, env);
      release(l1);
      l1 = plus(env.n_next_int_var_id, to_obj(2), env);
      v_idx_var = Ivar(l1, env);
      release(l1);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1419 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_stmt, S_start_val);
      add_ref(l2);
      v_start_eval_code = Gen_Eval_Code(l2, v_tmp_var, env);
      release(l2);
      l2 = ext_lookup(v_stmt, S_end_val);
      add_ref(l2);
      v_end_eval_code = Gen_Eval_Code(l2, v_tmp_var, env);
      release(l2);
      l2 = plus(env.n_next_int_var_id, to_obj(3), env);
      Obj BK1420 = env.n_next_int_var_id;
      env.n_next_int_var_id = l2;
      add_ref(env.n_next_int_var_id);
      l3 = ext_lookup(v_stmt, S_body);
      add_ref(l3);
      l4 = empty_set;
      l5 = empty_set;
      v_body_code = Gen_Code(l3, v_res_var, v_all_rel_vars, l4, l5, env);
      release(l5);
      release(l4);
      release(l3);
      release(env.n_next_int_var_id);
      env.n_next_int_var_id = BK1420;
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1419;
      release(l1);
      i0 = 0;
      l5 = Get_Int_Val(v_tmp_var, env);
      V0[i0] = Set_Ivar(v_idx_var, l5, env);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l3 = amp(v_start_eval_code, l4, env);
      release(l4);
      l2 = amp(l3, v_end_eval_code, env);
      release(l3);
      i0 = 0;
      l4 = Get_Int_Val(v_tmp_var, env);
      V0[i0] = Set_Ivar(v_end_var, l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      i1 = 0;
      l6 = Is_Gt(v_idx_var, v_end_var, env);
      V1[i1] = Break_If(l6, env);
      release(l6);
      i1 = i1 + 1;
      l6 = ext_lookup(v_stmt, S_var);
      add_ref(l6);
      l7 = To_Obj(v_idx_var, env);
      V1[i1] = Set_Var(l6, l7, env);
      release(l7);
      release(l6);
      i1 = i1 + 1;
      l5 = make_seq(V1, i1);
      l4 = amp(l5, v_body_code, env);
      release(l5);
      i1 = 0;
      V1[i1] = Increment(v_idx_var, env);
      i1 = i1 + 1;
      l5 = make_seq(V1, i1);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      V0[i0] = Repeat(l3, env);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_idx_var);
      release(v_tmp_var);
      release(v_start_var);
      release(v_end_var);
      release(v_start_eval_code);
      release(v_end_eval_code);
      release(v_body_code);
      goto block_1418_end;
      block_1418_end:;
      goto block_1402_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1421_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_foreach_stmt);
    if (!b1)
    {
      goto block_1421_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1421_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      v_idx_var = Ivar(env.n_next_int_var_id, env);
      v_it_var = Seq_It_Var(env.n_next_seq_it_var_id, env);
      v_has_idx_var = ext_lookup(v_stmt, S_idx_var, b1);
      v_has_idx_var = to_obj(b1);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1423 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = ext_lookup(v_stmt, S_values);
      add_ref(l2);
      v_src_info = Gen_Eval_Info(l2, v_src_var, env);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1423;
      release(l1);
      l1 = plus(env.n_next_seq_it_var_id, to_obj(1), env);
      Obj BK1424 = env.n_next_seq_it_var_id;
      env.n_next_seq_it_var_id = l1;
      add_ref(env.n_next_seq_it_var_id);
      if (!(are_eq(v_has_idx_var, S_true) | are_eq(v_has_idx_var, S_false)))
      {
        fail();
      }
      if (are_eq(v_has_idx_var, S_true))
      {
        l3 = to_obj(1);
      }
      else
      {
        l3 = to_obj(0);
      }
      l2 = plus(env.n_next_int_var_id, l3, env);
      release(l3);
      Obj BK1425 = env.n_next_int_var_id;
      env.n_next_int_var_id = l2;
      add_ref(env.n_next_int_var_id);
      l5 = ext_lookup(v_src_info, S_var_used);
      add_ref(l5);
      if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
      {
        fail();
      }
      if (are_eq(l5, S_true))
      {
        l4 = to_obj(1);
      }
      else
      {
        l4 = to_obj(0);
      }
      l3 = plus(env.n_next_obj_var_id, l4, env);
      release(l4);
      Obj BK1426 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l3;
      add_ref(env.n_next_obj_var_id);
      l4 = ext_lookup(v_stmt, S_body);
      add_ref(l4);
      i0 = 0;
      l7 = ext_lookup(v_src_info, S_var_used);
      add_ref(l7);
      if (!(are_eq(l7, S_true) | are_eq(l7, S_false)))
      {
        fail();
      }
      if (are_eq(l7, S_true))
      {
        V0[i0] = v_src_var;
        add_ref(V0[i0]);
        i0 = i0 + 1;
      }
      l6 = make_set(V0, i0);
      l5 = amp(v_all_rel_vars, l6, env);
      release(l6);
      l6 = empty_set;
      l7 = empty_set;
      v_body_code = Gen_Code(l4, v_res_var, l5, l6, l7, env);
      release(l7);
      release(l6);
      release(l5);
      release(l4);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1426;
      release(l3);
      release(env.n_next_int_var_id);
      env.n_next_int_var_id = BK1425;
      release(l2);
      release(env.n_next_seq_it_var_id);
      env.n_next_seq_it_var_id = BK1424;
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = ext_lookup(v_stmt, S_idx_var, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        V0[i0] = Set_Ivar(v_idx_var, to_obj(0), env);
      }
      else
      {
        V0[i0] = No_Op(env);
      }
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = ext_lookup(v_stmt, S_var);
      add_ref(l4);
      l5 = Get_Curr_Obj(v_it_var, env);
      V1[i1] = Set_Var(l4, l5, env);
      release(l5);
      release(l4);
      i1 = i1 + 1;
      l4 = ext_lookup(v_stmt, S_idx_var, b1);
      l4 = to_obj(b1);
      if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
      {
        fail();
      }
      if (are_eq(l4, S_true))
      {
        l4 = ext_lookup(v_stmt, S_idx_var);
        add_ref(l4);
        l5 = To_Obj(v_idx_var, env);
        V1[i1] = Set_Var(l4, l5, env);
        release(l5);
        release(l4);
      }
      else
      {
        V1[i1] = No_Op(env);
      }
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_body_code, env);
      release(l3);
      i1 = 0;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l4 = ext_lookup(v_stmt, S_idx_var, b1);
      l4 = to_obj(b1);
      if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
      {
        fail();
      }
      if (are_eq(l4, S_true))
      {
        V1[i1] = Increment(v_idx_var, env);
      }
      else
      {
        V1[i1] = No_Op(env);
      }
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_loop_code, env);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_idx_var);
      release(v_src_var);
      release(v_it_var);
      release(v_src_info);
      release(v_loop_code);
      release(v_body_code);
      release(v_has_idx_var);
      goto block_1422_end;
      block_1422_end:;
      goto block_1402_end;
    }
    fail();
    block_1402_end:;
    return l0;
  }
  
  
  Obj Gen_Type_Checking_Code(Obj p0, Obj p1, Obj p2, Env &env)
  {
    Obj v_obj;
    Obj v_type;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Stream t0;
    Obj l8;
    SetIter s0;
    Obj l9;
    SeqIter q0;
    Obj v_len;
    Obj v_code;
    Obj v_res_var;
    Obj v_t;
    Obj v_b;
    Obj v_i;
    Obj V1[2];
    Obj V0[5];
    Obj v_f;
    Obj v_ts;
    Obj v_fs;
    Obj v_it_var;
    Obj v_obj_var;
    Obj v_sorted_fields;
    Obj v_elem_var;
    Obj v_elem_code;
    Obj v_len_var;
    Obj v_size_var;
    Obj v_max_fields;
    Obj v_min_fields;
    Obj v_inner_code;
  
    v_type = p0;
    v_obj = p1;
    v_res_var = p2;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1428_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_type);
    if (!b1)
    {
      goto block_1428_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1428_end:;
    if (b1)
    {
      v_it_var = Set_It_Var(env.n_next_set_it_var_id, env);
      v_elem_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_set_it_var_id, to_obj(1), env);
      Obj BK1430 = env.n_next_set_it_var_id;
      env.n_next_set_it_var_id = l1;
      add_ref(env.n_next_set_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1431 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      l3 = ext_lookup(v_type, S_elem_type);
      add_ref(l3);
      v_elem_code = Gen_Type_Checking_Code(l3, v_elem_var, v_res_var, env);
      release(l3);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1431;
      release(l2);
      release(env.n_next_set_it_var_id);
      env.n_next_set_it_var_id = BK1430;
      release(l1);
      i0 = 0;
      l2 = Is_Empty_Set(v_obj, env);
      l1 = Block_Success_If(l2, v_res_var, env);
      release(l2);
      l2 = ext_lookup(v_type, S_nonempty);
      add_ref(l2);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Ne_Set(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l1, v_res_var, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Get_Iter(v_it_var, v_obj, env);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      V1[i1] = Get_Curr_Obj(v_elem_var, v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_elem_code, env);
      release(l3);
      i1 = 0;
      V1[i1] = Exit_Block_If_Not(v_res_var, env);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Set_Bvar(v_res_var, S_true, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_it_var);
      release(v_elem_var);
      release(v_elem_code);
      goto block_1429_end;
      block_1429_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1432_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_type);
    if (!b1)
    {
      goto block_1432_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1432_end:;
    if (b1)
    {
      v_elem_var = Lvar(env.n_next_obj_var_id, env);
      v_it_var = Seq_It_Var(env.n_next_seq_it_var_id, env);
      l1 = plus(env.n_next_seq_it_var_id, to_obj(1), env);
      Obj BK1434 = env.n_next_seq_it_var_id;
      env.n_next_seq_it_var_id = l1;
      add_ref(env.n_next_seq_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1435 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      l3 = ext_lookup(v_type, S_elem_type);
      add_ref(l3);
      v_elem_code = Gen_Type_Checking_Code(l3, v_elem_var, v_res_var, env);
      release(l3);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1435;
      release(l2);
      release(env.n_next_seq_it_var_id);
      env.n_next_seq_it_var_id = BK1434;
      release(l1);
      i0 = 0;
      l2 = Is_Empty_Seq(v_obj, env);
      l1 = Block_Success_If(l2, v_res_var, env);
      release(l2);
      l2 = ext_lookup(v_type, S_nonempty);
      add_ref(l2);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Ne_Seq(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l1, v_res_var, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Get_Iter(v_it_var, v_obj, env);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      V1[i1] = Get_Curr_Obj(v_elem_var, v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_elem_code, env);
      release(l3);
      i1 = 0;
      V1[i1] = Exit_Block_If_Not(v_res_var, env);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Set_Bvar(v_res_var, S_true, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_it_var);
      release(v_elem_var);
      release(v_elem_code);
      goto block_1433_end;
      block_1433_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1436_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fixed_seq_type);
    if (!b1)
    {
      goto block_1436_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1436_end:;
    if (b1)
    {
      v_len_var = Ivar(env.n_next_int_var_id, env);
      v_elem_var = Lvar(env.n_next_obj_var_id, env);
      v_it_var = Seq_It_Var(env.n_next_seq_it_var_id, env);
      v_len = Length(v_ts, env);
      i0 = 0;
      V0[i0] = Set_Bvar(v_res_var, S_false, env);
      i0 = i0 + 1;
      l1 = Is_Ne_Seq(v_obj, env);
      V0[i0] = Exit_Block_If_Not(l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Get_Seq_Len(v_obj, env);
      V0[i0] = Set_Ivar(v_len_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Eq(v_len_var, v_len, env);
      V0[i0] = Exit_Block_If_Not(l1, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Get_Iter(v_it_var, v_obj, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l1 = plus(env.n_next_seq_it_var_id, to_obj(1), env);
      Obj BK1438 = env.n_next_seq_it_var_id;
      env.n_next_seq_it_var_id = l1;
      add_ref(env.n_next_seq_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1439 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      l3 = plus(env.n_next_int_var_id, to_obj(1), env);
      Obj BK1440 = env.n_next_int_var_id;
      env.n_next_int_var_id = l3;
      add_ref(env.n_next_int_var_id);
      get_seq_iter(q0, v_ts);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_t = get_curr_obj(q0);
        v_i = to_obj(i0);
        i1 = 0;
        V0[i1] = Get_Curr_Obj(v_elem_var, v_it_var, env);
        i1 = i1 + 1;
        l7 = make_seq(V0, i1);
        l6 = amp(v_code, l7, env);
        release(l7);
        l7 = Gen_Type_Checking_Code(v_t, v_elem_var, v_res_var, env);
        l5 = amp(l6, l7, env);
        release(l7);
        release(l6);
        i1 = 0;
        V0[i1] = Exit_Block_If_Not(v_res_var, env);
        i1 = i1 + 1;
        l7 = Move_Forward(v_it_var, env);
        l9 = minus(v_len, to_obj(1), env);
        l8 = to_obj(are_eq(v_i, l9));
        release(l9);
        if (!(are_eq(l8, S_true) | are_eq(l8, S_false)))
        {
          fail();
        }
        if (are_eq(l8, S_true))
        {
          l8 = S_false;
        }
        else
        {
          l8 = S_true;
        }
        V0[i1] = Maybe_Op(l7, l8, env);
        release(l8);
        release(l7);
        i1 = i1 + 1;
        l6 = make_seq(V0, i1);
        l4 = amp(l5, l6, env);
        release(l6);
        release(l5);
        release(v_code);
        v_code = l4;
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(env.n_next_int_var_id);
      env.n_next_int_var_id = BK1440;
      release(l3);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1439;
      release(l2);
      release(env.n_next_seq_it_var_id);
      env.n_next_seq_it_var_id = BK1438;
      release(l1);
      i0 = 0;
      V0[i0] = Set_Bvar(v_res_var, S_true, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(v_code, l2, env);
      release(l2);
      release(v_code);
      v_code = l1;
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_len);
      release(v_code);
      release(v_it_var);
      release(v_elem_var);
      release(v_len_var);
      goto block_1437_end;
      block_1437_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1441_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_type);
    if (!b1)
    {
      goto block_1441_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1441_end:;
    if (b1)
    {
      v_obj_var = Lvar(env.n_next_obj_var_id, env);
      v_it_var = Map_It_Var(env.n_next_map_it_var_id, env);
      l1 = plus(env.n_next_map_it_var_id, to_obj(1), env);
      Obj BK1443 = env.n_next_map_it_var_id;
      env.n_next_map_it_var_id = l1;
      add_ref(env.n_next_map_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1444 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      i0 = 0;
      l3 = Is_Empty_Map(v_obj, env);
      V0[i0] = Block_Success_If(l3, v_res_var, env);
      release(l3);
      i0 = i0 + 1;
      l3 = Is_Ne_Map(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l3, v_res_var, env);
      release(l3);
      i0 = i0 + 1;
      V0[i0] = Get_Iter(v_it_var, v_obj, env);
      i0 = i0 + 1;
      i1 = 0;
      l8 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l8, env);
      release(l8);
      i1 = i1 + 1;
      V1[i1] = Get_Curr_Key(v_obj_var, v_it_var, env);
      i1 = i1 + 1;
      l7 = make_seq(V1, i1);
      l9 = ext_lookup(v_type, S_key_type);
      add_ref(l9);
      l8 = Gen_Type_Checking_Code(l9, v_obj_var, v_res_var, env);
      release(l9);
      l6 = amp(l7, l8, env);
      release(l8);
      release(l7);
      i1 = 0;
      V1[i1] = Exit_Block_If_Not(v_res_var, env);
      i1 = i1 + 1;
      V1[i1] = Get_Curr_Value(v_obj_var, v_it_var, env);
      i1 = i1 + 1;
      l7 = make_seq(V1, i1);
      l5 = amp(l6, l7, env);
      release(l7);
      release(l6);
      l7 = ext_lookup(v_type, S_value_type);
      add_ref(l7);
      l6 = Gen_Type_Checking_Code(l7, v_obj_var, v_res_var, env);
      release(l7);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      i1 = 0;
      V1[i1] = Exit_Block_If_Not(v_res_var, env);
      i1 = i1 + 1;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l5 = make_seq(V1, i1);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      V0[i0] = Repeat(l3, env);
      release(l3);
      i0 = i0 + 1;
      V0[i0] = Set_Bvar(v_res_var, S_true, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1444;
      release(l2);
      release(env.n_next_map_it_var_id);
      env.n_next_map_it_var_id = BK1443;
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_it_var);
      release(v_obj_var);
      goto block_1442_end;
      block_1442_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1445_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tuple_type);
    if (!b1)
    {
      goto block_1445_end;
    }
    l1 = get_inner_obj(p0);
    v_fs = l1;
    b1 = true;
    block_1445_end:;
    if (b1)
    {
      v_size_var = Ivar(env.n_next_int_var_id, env);
      v_obj_var = Lvar(env.n_next_obj_var_id, env);
      v_it_var = Map_It_Var(env.n_next_map_it_var_id, env);
      v_max_fields = Size(v_fs, env);
      init(t0);
      get_set_iter(s0, v_fs);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        v_f = l3;
        b1 = true;
        if (b1)
        {
          l3 = ext_lookup(v_f, S_optional);
          add_ref(l3);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            add_ref(v_f);
            append(t0, v_f);
          }
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      v_min_fields = Size(l1, env);
      release(l1);
      i0 = 0;
      l2 = Is_Empty_Map(v_obj, env);
      l1 = Block_Success_If(l2, v_res_var, env);
      release(l2);
      l2 = to_obj(are_eq(v_min_fields, to_obj(0)));
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Ne_Map(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l1, v_res_var, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Get_Map_Size(v_obj, env);
      V0[i0] = Set_Ivar(v_size_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Is_Between(v_size_var, v_min_fields, v_max_fields, env);
      V0[i0] = Block_Failure_If_Not(l1, v_res_var, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Get_Iter(v_it_var, v_obj, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      Obj (*BF1447)(Obj, Obj, const Obj *, Env &) = env.n2_is_strictly_ordered;
      const Obj *BD1447 = env.C2_is_strictly_ordered;
      env.n2_is_strictly_ordered = cls_27;
      env.C2_is_strictly_ordered = 0;
      v_sorted_fields = Sort_Set(v_fs, env);
      env.n2_is_strictly_ordered = BF1447;
      env.C2_is_strictly_ordered = BD1447;
      get_seq_iter(q0, v_sorted_fields);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_b = get_curr_obj(q0);
        i0 = 0;
        l3 = Get_Curr_Value(v_it_var, env);
        V0[i0] = Set_Var(v_obj_var, l3, env);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l4 = plus(env.n_next_map_it_var_id, to_obj(1), env);
        Obj BK1448 = env.n_next_map_it_var_id;
        env.n_next_map_it_var_id = l4;
        add_ref(env.n_next_map_it_var_id);
        l5 = plus(env.n_next_obj_var_id, to_obj(1), env);
        Obj BK1449 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = l5;
        add_ref(env.n_next_obj_var_id);
        l6 = plus(env.n_next_int_var_id, to_obj(1), env);
        Obj BK1450 = env.n_next_int_var_id;
        env.n_next_int_var_id = l6;
        add_ref(env.n_next_int_var_id);
        l7 = ext_lookup(v_b, S_type);
        add_ref(l7);
        l3 = Gen_Type_Checking_Code(l7, v_obj_var, v_res_var, env);
        release(l7);
        release(env.n_next_int_var_id);
        env.n_next_int_var_id = BK1450;
        release(l6);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK1449;
        release(l5);
        release(env.n_next_map_it_var_id);
        env.n_next_map_it_var_id = BK1448;
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = Exit_Block_If_Not(v_res_var, env);
        i0 = i0 + 1;
        V0[i0] = Move_Forward(v_it_var, env);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        v_inner_code = amp(l1, l2, env);
        release(l2);
        release(l1);
        l1 = ext_lookup(v_b, S_optional);
        add_ref(l1);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i0 = 0;
          l3 = Is_Out_Of_Range(v_it_var, env);
          i1 = 0;
          l5 = Get_Curr_Key(v_it_var, env);
          V1[i1] = Set_Var(v_obj_var, l5, env);
          release(l5);
          i1 = i1 + 1;
          l6 = ext_lookup(v_b, S_label);
          add_ref(l6);
          l5 = Is_Eq(v_obj_var, l6, env);
          release(l6);
          V1[i1] = Do_If(l5, v_inner_code, env);
          release(l5);
          i1 = i1 + 1;
          l4 = make_seq(V1, i1);
          V0[i0] = Do_If_Not(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
        }
        else
        {
          i0 = 0;
          l4 = Is_Out_Of_Range(v_it_var, env);
          V0[i0] = Block_Failure_If(l4, v_res_var, env);
          release(l4);
          i0 = i0 + 1;
          l4 = Get_Curr_Key(v_it_var, env);
          V0[i0] = Set_Var(v_obj_var, l4, env);
          release(l4);
          i0 = i0 + 1;
          l5 = ext_lookup(v_b, S_label);
          add_ref(l5);
          l4 = Is_Eq(v_obj_var, l5, env);
          release(l5);
          V0[i0] = Block_Failure_If_Not(l4, v_res_var, env);
          release(l4);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = amp(v_code, l3, env);
          release(l3);
          l1 = amp(l2, v_inner_code, env);
          release(l2);
          release(v_code);
          v_code = l1;
        }
        release(v_inner_code);
        move_forward(q0);
      }
      i0 = 0;
      l3 = Is_Out_Of_Range(v_it_var, env);
      V0[i0] = Set_Bvar(v_res_var, l3, env);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(v_code, l2, env);
      release(l2);
      release(v_code);
      v_code = l1;
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_it_var);
      release(v_obj_var);
      release(v_sorted_fields);
      release(v_size_var);
      release(v_max_fields);
      release(v_min_fields);
      goto block_1446_end;
      block_1446_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1451_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_type);
    if (!b1)
    {
      goto block_1451_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1451_end:;
    if (b1)
    {
      v_obj_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      Obj BK1453 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      i0 = 0;
      l5 = Is_Tagged_Obj(v_obj, env);
      V0[i0] = Block_Failure_If_Not(l5, v_res_var, env);
      release(l5);
      i0 = i0 + 1;
      l5 = Get_Tag(v_obj, env);
      V0[i0] = Set_Var(v_obj_var, l5, env);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l6 = ext_lookup(v_type, S_tag_type);
      add_ref(l6);
      l5 = Gen_Type_Checking_Code(l6, v_obj_var, v_res_var, env);
      release(l6);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = 0;
      V0[i0] = Exit_Block_If_Not(v_res_var, env);
      i0 = i0 + 1;
      l5 = Get_Inner_Obj(v_obj, env);
      V0[i0] = Set_Var(v_obj_var, l5, env);
      release(l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      l4 = ext_lookup(v_type, S_obj_type);
      add_ref(l4);
      l3 = Gen_Type_Checking_Code(l4, v_obj_var, v_res_var, env);
      release(l4);
      v_code = amp(l2, l3, env);
      release(l3);
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1453;
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_obj_var);
      goto block_1452_end;
      block_1452_end:;
      goto block_1427_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1454_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_union_type);
    if (!b1)
    {
      goto block_1454_end;
    }
    l1 = get_inner_obj(p0);
    v_ts = l1;
    b1 = true;
    block_1454_end:;
    if (b1)
    {
      v_code = empty_seq;
      l1 = Rand_Sort(v_ts, env);
      get_seq_iter(q0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_t = get_curr_obj(q0);
        l4 = Gen_Type_Checking_Code(v_t, v_obj, v_res_var, env);
        l3 = amp(v_code, l4, env);
        release(l4);
        i0 = 0;
        V0[i0] = Exit_Block_If(v_res_var, env);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l2 = amp(l3, l4, env);
        release(l4);
        release(l3);
        release(v_code);
        v_code = l2;
        move_forward(q0);
      }
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      goto block_1455_end;
      block_1455_end:;
      goto block_1427_end;
    }
    b1 = true;
    if (b1)
    {
      i0 = 0;
      l1 = Gen_Type_Checking_Expr(v_type, v_obj, env);
      V0[i0] = Set_Bvar(v_res_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1427_end;
    }
    fail();
    block_1427_end:;
    return l0;
  }
  
  
  Obj Expr_Wf_Errors(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    int i1;
    Stream t0;
    SetIter s0;
    SetIter s1;
    Obj v_errs;
    Obj v_a;
    Obj v_b;
    Obj v_e;
    Obj v_ss;
    Obj V1[2];
    Obj V0[3];
    Obj V2[2];
    Obj v_es;
    Obj v_fd;
    Obj v_vs;
    Obj v_expr_errs;
    Obj v_def_vars;
    Obj v_se;
    Obj v_ips;
    Obj v_err_info;
    Obj v_almost_def;
    Obj v_np_errs;
    Obj v_fndef_errs;
  
    b1 = is_synexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_1457_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_1457_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = is_var(l1);
        if (!b1)
        {
          goto block_1457_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1457_end:;
      if (b1)
      {
        v_def_vars = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1459_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_object);
        if (!b1)
        {
          goto block_1459_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1459_end:;
        if (b1)
        {
          l0 = empty_set;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1460_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_expr);
        if (!b1)
        {
          goto block_1460_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1460_end:;
        if (b1)
        {
          init(t0);
          l4 = ext_lookup(v_expr, S_head);
          add_ref(l4);
          l3 = Set(l4, env);
          release(l4);
          get_set_iter(s0, l3);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l4 = get_curr_obj(s0);
            v_e = l4;
            b1 = true;
            if (b1)
            {
              l4 = Expr_Wf_Errors(v_e, v_def_vars, env);
              append(t0, l4);
            }
            move_forward(s0);
          }
          release(l3);
          l2 = make_set(t0);
          l1 = Union(l2, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_tail, b1);
          l3 = to_obj(b1);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = ext_lookup(v_expr, S_tail);
            add_ref(l3);
            l2 = Expr_Wf_Errors(l3, v_def_vars, env);
            release(l3);
          }
          else
          {
            l2 = empty_set;
          }
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1461_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_expr);
        if (!b1)
        {
          goto block_1461_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1461_end:;
        if (b1)
        {
          init(t0);
          get_set_iter(s0, v_es);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_e = l3;
            b1 = true;
            if (b1)
            {
              l3 = Expr_Wf_Errors(v_e, v_def_vars, env);
              append(t0, l3);
            }
            move_forward(s0);
          }
          l1 = make_set(t0);
          l0 = Union(l1, env);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1462_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_map_expr);
        if (!b1)
        {
          goto block_1462_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1462_end:;
        if (b1)
        {
          init(t0);
          get_set_iter(s0, v_es);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_e = l3;
            b1 = true;
            if (b1)
            {
              i0 = 0;
              V0[i0] = ext_lookup(v_e, S_value);
              add_ref(V0[i0]);
              i0 = i0 + 1;
              V0[i0] = ext_lookup(v_e, S_key);
              add_ref(V0[i0]);
              i0 = i0 + 1;
              l4 = ext_lookup(v_e, S_cond, b1);
              l4 = to_obj(b1);
              if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
              {
                fail();
              }
              if (are_eq(l4, S_true))
              {
                V0[i0] = ext_lookup(v_e, S_cond);
                add_ref(V0[i0]);
                i0 = i0 + 1;
              }
              l3 = make_set(V0, i0);
              get_set_iter(s1, l3);
              for ( ; ; )
              {
                if (is_out_of_range(s1))
                {
                  break;
                }
                l4 = get_curr_obj(s1);
                v_se = l4;
                b1 = true;
                if (b1)
                {
                  l4 = Expr_Wf_Errors(v_se, v_def_vars, env);
                  append(t0, l4);
                }
                move_forward(s1);
              }
              release(l3);
            }
            move_forward(s0);
          }
          l1 = make_set(t0);
          l0 = Union(l1, env);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1463_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_tag_obj_expr);
        if (!b1)
        {
          goto block_1463_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1463_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_tag);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_obj);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        b1 = is_var(p0);
        if (b1)
        {
          i0 = 0;
          l1 = In(v_expr, v_def_vars, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            add_ref(v_expr);
            V0[i0] = make_tagged_obj(S_undef_var, v_expr);
            i0 = i0 + 1;
          }
          l0 = make_set(V0, i0);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1464_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_const_or_var);
        if (!b1)
        {
          goto block_1464_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1464_end:;
        if (b1)
        {
          add_ref(v_a);
          l2 = make_tagged_obj(S_var, v_a);
          l1 = In(l2, v_def_vars, env);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            add_ref(v_a);
            l2 = make_tagged_obj(S_fn_symbol, v_a);
            l1 = Is_Def(l2, to_obj(0), env.n_fns_in_scope, env.n_impl_params, env);
            release(l2);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l0 = empty_set;
            goto block_1465_end;
          }
          add_ref(v_a);
          l2 = make_tagged_obj(S_fn_symbol, v_a);
          l1 = Is_Almost_Def(l2, to_obj(0), env.n_fns_in_scope, env);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            add_ref(v_a);
            V0[i0] = make_tagged_obj(S_almost_def_const, v_a);
            i0 = i0 + 1;
            l0 = make_set(V0, i0);
          }
          else
          {
            i0 = 0;
            add_ref(v_a);
            V0[i0] = make_tagged_obj(S_undef_var_or_const, v_a);
            i0 = i0 + 1;
            l0 = make_set(V0, i0);
          }
          goto block_1465_end;
          block_1465_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1466_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_fn_call);
        if (!b1)
        {
          goto block_1466_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1466_end:;
        if (b1)
        {
          init(t0);
          l3 = ext_lookup(v_expr, S_named_params);
          add_ref(l3);
          l2 = Set(l3, env);
          release(l3);
          get_set_iter(s0, l2);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_fd = l3;
            b1 = true;
            if (b1)
            {
              l3 = Untyped_Sgn(v_fd, env);
              append(t0, l3);
            }
            move_forward(s0);
          }
          release(l2);
          l1 = make_set(t0);
          v_ips = amp(env.n_impl_params, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_params);
          add_ref(l1);
          v_errs = Exprs_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          l2 = ext_lookup(v_expr, S_name);
          add_ref(l2);
          l4 = ext_lookup(v_expr, S_params);
          add_ref(l4);
          l3 = Length(l4, env);
          release(l4);
          l1 = Is_Def(l2, l3, env.n_fns_in_scope, v_ips, env);
          release(l3);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            V0[i0] = S_name;
            V1[i0] = ext_lookup(v_expr, S_name);
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_arity;
            l1 = ext_lookup(v_expr, S_params);
            add_ref(l1);
            V1[i0] = Length(l1, env);
            release(l1);
            i0 = i0 + 1;
            v_err_info = make_map(V0, V1, i0);
            l1 = ext_lookup(v_expr, S_name);
            add_ref(l1);
            l3 = ext_lookup(v_expr, S_params);
            add_ref(l3);
            l2 = Length(l3, env);
            release(l3);
            v_almost_def = Is_Almost_Def(l1, l2, env.n_fns_in_scope, env);
            release(l2);
            release(l1);
            i0 = 0;
            if (!(are_eq(v_almost_def, S_true) | are_eq(v_almost_def, S_false)))
            {
              fail();
            }
            if (are_eq(v_almost_def, S_true))
            {
              add_ref(v_err_info);
              V0[i0] = make_tagged_obj(S_almost_def_fn, v_err_info);
            }
            else
            {
              add_ref(v_err_info);
              V0[i0] = make_tagged_obj(S_undef_fn, v_err_info);
            }
            i0 = i0 + 1;
            l2 = make_set(V0, i0);
            l1 = amp(v_errs, l2, env);
            release(l2);
            release(v_errs);
            v_errs = l1;
            release(v_err_info);
            release(v_almost_def);
          }
          l2 = ext_lookup(v_expr, S_named_params);
          add_ref(l2);
          l1 = Set(l2, env);
          release(l2);
          v_np_errs = Fndefs_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          l0 = amp(v_errs, v_np_errs, env);
          release(v_errs);
          release(v_ips);
          release(v_np_errs);
          goto block_1467_end;
          block_1467_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1468_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_builtin_call);
        if (!b1)
        {
          goto block_1468_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1468_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_params);
          add_ref(l2);
          l1 = Exprs_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          i0 = 0;
          l4 = ext_lookup(v_expr, S_name);
          add_ref(l4);
          l6 = ext_lookup(v_expr, S_params);
          add_ref(l6);
          l5 = Length(l6, env);
          release(l6);
          l3 = Arity_Is_Correct(l4, l5, env);
          release(l5);
          release(l4);
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            l3 = S_false;
          }
          else
          {
            l3 = S_true;
          }
          if (!(are_eq(l3, S_true) | are_eq(l3, S_false)))
          {
            fail();
          }
          if (are_eq(l3, S_true))
          {
            i1 = 0;
            V1[i1] = S_name;
            V2[i1] = ext_lookup(v_expr, S_name);
            add_ref(V2[i1]);
            i1 = i1 + 1;
            V1[i1] = S_arity;
            l4 = ext_lookup(v_expr, S_params);
            add_ref(l4);
            V2[i1] = Length(l4, env);
            release(l4);
            i1 = i1 + 1;
            l3 = make_map(V1, V2, i1);
            V0[i0] = make_tagged_obj(S_wrong_num_of_params, l3);
            i0 = i0 + 1;
          }
          l2 = make_set(V0, i0);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1469_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_and);
        if (!b1)
        {
          goto block_1469_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1469_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_right);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1470_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_or);
        if (!b1)
        {
          goto block_1470_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1470_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_right);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1471_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_not);
        if (!b1)
        {
          goto block_1471_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1471_end:;
        if (b1)
        {
          l0 = Expr_Wf_Errors(v_e, v_def_vars, env);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1472_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_eq);
        if (!b1)
        {
          goto block_1472_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1472_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_right);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1473_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_neq);
        if (!b1)
        {
          goto block_1473_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1473_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_right);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1474_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_membership);
        if (!b1)
        {
          goto block_1474_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1474_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_obj);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_type);
          add_ref(l3);
          l2 = Type_Wf_Errors(l3, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1475_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_accessor);
        if (!b1)
        {
          goto block_1475_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1475_end:;
        if (b1)
        {
          l1 = ext_lookup(v_expr, S_expr);
          add_ref(l1);
          l0 = Expr_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1476_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_accessor_test);
        if (!b1)
        {
          goto block_1476_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1476_end:;
        if (b1)
        {
          l1 = ext_lookup(v_expr, S_expr);
          add_ref(l1);
          l0 = Expr_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1477_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_ex_qual);
        if (!b1)
        {
          goto block_1477_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1477_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Clauses_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l3);
          l6 = ext_lookup(v_expr, S_source);
          add_ref(l6);
          l5 = Syn_New_Vars(l6, env);
          release(l6);
          l4 = amp(v_def_vars, l5, env);
          release(l5);
          l2 = Exprs_Wf_Errors(l3, l4, env);
          release(l4);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1478_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_comp);
        if (!b1)
        {
          goto block_1478_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1478_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Syn_New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l3 = ext_lookup(v_expr, S_source);
          add_ref(l3);
          l2 = Clauses_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l4 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l4);
          l3 = Exprs_Wf_Errors(l4, v_vs, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          l3 = ext_lookup(v_expr, S_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_vs, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          release(v_vs);
          goto block_1479_end;
          block_1479_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1480_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_map_comp);
        if (!b1)
        {
          goto block_1480_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1480_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Syn_New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l4 = ext_lookup(v_expr, S_source);
          add_ref(l4);
          l3 = Clauses_Wf_Errors(l4, v_def_vars, env);
          release(l4);
          l5 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l5);
          l4 = Exprs_Wf_Errors(l5, v_vs, env);
          release(l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l4 = ext_lookup(v_expr, S_key_expr);
          add_ref(l4);
          l3 = Expr_Wf_Errors(l4, v_vs, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          l3 = ext_lookup(v_expr, S_value_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_vs, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          release(v_vs);
          goto block_1481_end;
          block_1481_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1482_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_comp);
        if (!b1)
        {
          goto block_1482_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1482_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = ext_lookup(v_expr, S_idx_var, b1);
          l2 = to_obj(b1);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = ext_lookup(v_expr, S_idx_var);
            add_ref(V0[i0]);
            i0 = i0 + 1;
          }
          l1 = make_set(V0, i0);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l2 = ext_lookup(v_expr, S_src_expr);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_vs, env);
          release(l3);
          v_errs = amp(l1, l2, env);
          release(l2);
          release(l1);
          l1 = ext_lookup(v_expr, S_sel_expr, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l3 = ext_lookup(v_expr, S_sel_expr);
            add_ref(l3);
            l2 = Expr_Wf_Errors(l3, v_vs, env);
            release(l3);
            l1 = amp(v_errs, l2, env);
            release(l2);
            release(v_errs);
            v_errs = l1;
          }
          l0 = v_errs;
          add_ref(l0);
          release(v_errs);
          release(v_vs);
          goto block_1483_end;
          block_1483_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1484_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_if_expr);
        if (!b1)
        {
          goto block_1484_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1484_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_else);
          add_ref(l2);
          l1 = Expr_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          init(t0);
          l5 = ext_lookup(v_expr, S_branches);
          add_ref(l5);
          l4 = Set(l5, env);
          release(l5);
          get_set_iter(s0, l4);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l5 = get_curr_obj(s0);
            v_b = l5;
            b1 = true;
            if (b1)
            {
              i0 = 0;
              V0[i0] = ext_lookup(v_b, S_cond);
              add_ref(V0[i0]);
              i0 = i0 + 1;
              V0[i0] = ext_lookup(v_b, S_expr);
              add_ref(V0[i0]);
              i0 = i0 + 1;
              l5 = make_set(V0, i0);
              get_set_iter(s1, l5);
              for ( ; ; )
              {
                if (is_out_of_range(s1))
                {
                  break;
                }
                l6 = get_curr_obj(s1);
                v_e = l6;
                b1 = true;
                if (b1)
                {
                  l6 = Expr_Wf_Errors(v_e, v_def_vars, env);
                  append(t0, l6);
                }
                move_forward(s1);
              }
              release(l5);
            }
            move_forward(s0);
          }
          release(l4);
          l3 = make_set(t0);
          l2 = Union(l3, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1485_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_match_expr);
        if (!b1)
        {
          goto block_1485_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1485_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_exprs);
          add_ref(l2);
          l1 = Exprs_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_cases);
          add_ref(l3);
          l2 = Cases_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1486_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_do_expr);
        if (!b1)
        {
          goto block_1486_end;
        }
        l1 = get_inner_obj(p0);
        v_ss = l1;
        b1 = true;
        block_1486_end:;
        if (b1)
        {
          l0 = Stmts_Wf_Errors(v_ss, v_def_vars, env);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1487_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_select_expr);
        if (!b1)
        {
          goto block_1487_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1487_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_type);
          add_ref(l2);
          l1 = Type_Wf_Errors(l2, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_src_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1488_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_retrieve_expr);
        if (!b1)
        {
          goto block_1488_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1488_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_ptrn);
          add_ref(l2);
          l1 = New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_ptrn);
          add_ref(l1);
          v_errs = Ptrn_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          l3 = ext_lookup(v_expr, S_src_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l1 = amp(v_errs, l2, env);
          release(l2);
          release(v_errs);
          v_errs = l1;
          l3 = ext_lookup(v_expr, S_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_vs, env);
          release(l3);
          l1 = amp(v_errs, l2, env);
          release(l2);
          release(v_errs);
          v_errs = l1;
          l1 = ext_lookup(v_expr, S_cond, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l3 = ext_lookup(v_expr, S_cond);
            add_ref(l3);
            l2 = Expr_Wf_Errors(l3, v_vs, env);
            release(l3);
            l1 = amp(v_errs, l2, env);
            release(l2);
            release(v_errs);
            v_errs = l1;
          }
          l0 = v_errs;
          add_ref(l0);
          release(v_errs);
          release(v_vs);
          goto block_1489_end;
          block_1489_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1490_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_replace_expr);
        if (!b1)
        {
          goto block_1490_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1490_end:;
        if (b1)
        {
          l3 = ext_lookup(v_expr, S_ptrn);
          add_ref(l3);
          l2 = Ptrn_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l4 = ext_lookup(v_expr, S_src_expr);
          add_ref(l4);
          l3 = Expr_Wf_Errors(l4, v_def_vars, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          l3 = ext_lookup(v_expr, S_src_expr);
          add_ref(l3);
          l6 = ext_lookup(v_expr, S_ptrn);
          add_ref(l6);
          l5 = New_Vars(l6, env);
          release(l6);
          l4 = amp(v_def_vars, l5, env);
          release(l5);
          l2 = Expr_Wf_Errors(l3, l4, env);
          release(l4);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1491_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_expr);
        if (!b1)
        {
          goto block_1491_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1491_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_type);
          add_ref(l2);
          l1 = Type_Wf_Errors(l2, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_expr);
          add_ref(l3);
          l2 = Expr_Wf_Errors(l3, v_def_vars, env);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1492_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_where_expr);
        if (!b1)
        {
          goto block_1492_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1492_end:;
        if (b1)
        {
          init(t0);
          l3 = ext_lookup(v_expr, S_fndefs);
          add_ref(l3);
          l2 = Set(l3, env);
          release(l3);
          get_set_iter(s0, l2);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_fd = l3;
            b1 = true;
            if (b1)
            {
              l3 = Untyped_Sgn(v_fd, env);
              append(t0, l3);
            }
            move_forward(s0);
          }
          release(l2);
          l1 = make_set(t0);
          v_ips = amp(env.n_impl_params, l1, env);
          release(l1);
          Obj BK1494 = env.n_impl_params;
          env.n_impl_params = v_ips;
          add_ref(env.n_impl_params);
          l1 = ext_lookup(v_expr, S_expr);
          add_ref(l1);
          v_expr_errs = Expr_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          release(env.n_impl_params);
          env.n_impl_params = BK1494;
          l2 = ext_lookup(v_expr, S_fndefs);
          add_ref(l2);
          l1 = Set(l2, env);
          release(l2);
          v_fndef_errs = Fndefs_Wf_Errors(l1, v_def_vars, env);
          release(l1);
          l0 = amp(v_expr_errs, v_fndef_errs, env);
          release(v_expr_errs);
          release(v_ips);
          release(v_fndef_errs);
          goto block_1493_end;
          block_1493_end:;
          goto block_1458_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1495_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_let_expr);
        if (!b1)
        {
          goto block_1495_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1495_end:;
        if (b1)
        {
          l3 = ext_lookup(v_expr, S_stmts);
          add_ref(l3);
          i0 = 0;
          l5 = ext_lookup(v_expr, S_expr);
          add_ref(l5);
          V0[i0] = make_tagged_obj(S_return_stmt, l5);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = Stmts_Wf_Errors(l2, v_def_vars, env);
          release(l2);
          l3 = ext_lookup(v_expr, S_expr);
          add_ref(l3);
          l6 = ext_lookup(v_expr, S_stmts);
          add_ref(l6);
          l5 = Syn_New_Vars(l6, env);
          release(l6);
          l4 = amp(v_def_vars, l5, env);
          release(l5);
          l2 = Expr_Wf_Errors(l3, l4, env);
          release(l4);
          release(l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1458_end;
        }
        fail();
        block_1458_end:;
        goto block_1456_end;
      }
    }
    b1 = is_syncondexpr(p0);
    if (b1)
    {
      v_se = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_1496_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_1496_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = is_var(l1);
        if (!b1)
        {
          goto block_1496_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1496_end:;
      if (b1)
      {
        v_vs = p1;
      }
      if (b1)
      {
        l2 = ext_lookup(v_se, S_expr);
        add_ref(l2);
        l1 = Expr_Wf_Errors(l2, v_vs, env);
        release(l2);
        l3 = ext_lookup(v_se, S_cond);
        add_ref(l3);
        l2 = Expr_Wf_Errors(l3, v_vs, env);
        release(l3);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        goto block_1456_end;
      }
    }
    fail();
    block_1456_end:;
    return l0;
  }
  
  
  Obj To_C_Expr(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj v_s;
    Obj v_e;
    Obj v_v;
    Obj V0[16];
    Obj v_es;
    Obj v_parentesised;
  
    b1 = is_boolexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      b1 = is_bool(p1);
      if (b1)
      {
        v_parentesised = p1;
      }
      if (b1)
      {
        b1 = are_eq(p0, S_true);
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          l0 = make_tagged_obj(S_string, l1);
          goto block_1498_end;
        }
        b1 = are_eq(p0, S_false);
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(102);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          l0 = make_tagged_obj(S_string, l1);
          goto block_1498_end;
        }
        b1 = is_boolvar(p0);
        if (b1)
        {
          l0 = To_C_Var_Name(v_expr, env);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1499_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_symb);
        if (!b1)
        {
          goto block_1499_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1499_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(121);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(98);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1500_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_int);
        if (!b1)
        {
          goto block_1500_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1500_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1501_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_ne_set);
        if (!b1)
        {
          goto block_1501_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1501_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1502_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_ne_seq);
        if (!b1)
        {
          goto block_1502_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1502_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1503_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_ne_map);
        if (!b1)
        {
          goto block_1503_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1503_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1504_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_tagged_obj);
        if (!b1)
        {
          goto block_1504_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1504_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(98);
          i0 = i0 + 1;
          V0[i0] = to_obj(106);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1505_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_eq_bool);
        if (!b1)
        {
          goto block_1505_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1505_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1506_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_eq_int);
        if (!b1)
        {
          goto block_1506_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1506_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1507_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_eq);
        if (!b1)
        {
          goto block_1507_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1507_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l4 = make_tagged_obj(S_string, l5);
          l6 = ext_lookup(v_expr, S_expr1);
          add_ref(l6);
          l5 = To_C_Expr(l6, env);
          release(l6);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          i0 = 0;
          V0[i0] = to_obj(44);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l4 = ext_lookup(v_expr, S_expr2);
          add_ref(l4);
          l3 = To_C_Expr(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1508_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_gt);
        if (!b1)
        {
          goto block_1508_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1508_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(62);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1509_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_ge);
        if (!b1)
        {
          goto block_1509_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1509_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(62);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1510_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_lt);
        if (!b1)
        {
          goto block_1510_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1510_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(60);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1511_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_le);
        if (!b1)
        {
          goto block_1511_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1511_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(60);
          i0 = i0 + 1;
          V0[i0] = to_obj(61);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_expr1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_expr2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1512_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_is_out_of_range);
        if (!b1)
        {
          goto block_1512_end;
        }
        l1 = get_inner_obj(p0);
        v_v = l1;
        b1 = true;
        block_1512_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(102);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Var_Name(v_v, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1513_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_neg);
        if (!b1)
        {
          goto block_1513_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1513_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(33);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l2 = To_C_Expr(v_e, S_true, env);
          v_s = amp(l1, l2, env);
          release(l2);
          release(l1);
          if (!(are_eq(v_parentesised, S_true) | are_eq(v_parentesised, S_false)))
          {
            fail();
          }
          if (are_eq(v_parentesised, S_true))
          {
            i0 = 0;
            V0[i0] = to_obj(40);
            i0 = i0 + 1;
            l4 = make_seq(V0, i0);
            l3 = make_tagged_obj(S_string, l4);
            l2 = amp(l3, v_s, env);
            release(l3);
            i0 = 0;
            V0[i0] = to_obj(41);
            i0 = i0 + 1;
            l4 = make_seq(V0, i0);
            l3 = make_tagged_obj(S_string, l4);
            l1 = amp(l2, l3, env);
            release(l3);
            release(l2);
            release(v_s);
            v_s = l1;
          }
          l0 = v_s;
          add_ref(l0);
          release(v_s);
          goto block_1514_end;
          block_1514_end:;
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1515_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_and);
        if (!b1)
        {
          goto block_1515_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1515_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(38);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l0 = To_Nary_Op(l1, v_es, v_parentesised, env);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1516_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_or);
        if (!b1)
        {
          goto block_1516_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1516_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(124);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l0 = To_Nary_Op(l1, v_es, v_parentesised, env);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1517_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_and_then);
        if (!b1)
        {
          goto block_1517_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1517_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(38);
          i0 = i0 + 1;
          V0[i0] = to_obj(38);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l0 = To_Nary_Op(l1, v_es, v_parentesised, env);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1518_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_or_else);
        if (!b1)
        {
          goto block_1518_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1518_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(124);
          i0 = i0 + 1;
          V0[i0] = to_obj(124);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l0 = To_Nary_Op(l1, v_es, v_parentesised, env);
          release(l1);
          goto block_1498_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1519_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_eval_bool_fn);
        if (!b1)
        {
          goto block_1519_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1519_end:;
        if (b1)
        {
          l4 = ext_lookup(v_expr, S_name);
          add_ref(l4);
          l3 = To_C_Fn_Name(l4, env);
          release(l4);
          i0 = 0;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = 0;
          V0[i0] = to_obj(44);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l5 = make_seq(V0, i0);
          l4 = make_tagged_obj(S_string, l5);
          l5 = ext_lookup(v_expr, S_params);
          add_ref(l5);
          l3 = To_Nary_Op(l4, l5, S_false, env);
          release(l5);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1498_end;
        }
        fail();
        block_1498_end:;
        goto block_1497_end;
      }
    }
    b1 = is_intexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      b1 = is_bool(p1);
      if (b1)
      {
        v_parentesised = p1;
      }
      if (b1)
      {
        b1 = is_int(p0);
        if (b1)
        {
          l0 = To_Str(v_expr, env);
          goto block_1520_end;
        }
        b1 = is_intvar(p0);
        if (b1)
        {
          l0 = To_C_Var_Name(v_expr, env);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1521_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_int_val);
        if (!b1)
        {
          goto block_1521_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1521_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(118);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1522_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_set_size);
        if (!b1)
        {
          goto block_1522_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1522_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(122);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1523_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_seq_len);
        if (!b1)
        {
          goto block_1523_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1523_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1524_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_map_size);
        if (!b1)
        {
          goto block_1524_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1524_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(122);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1525_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_minus);
        if (!b1)
        {
          goto block_1525_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1525_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(45);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          l2 = To_C_Expr(v_e, S_true, env);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1526_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_add);
        if (!b1)
        {
          goto block_1526_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1526_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(43);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_val1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_val2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1527_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mult);
        if (!b1)
        {
          goto block_1527_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1527_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(42);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_val1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_val2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1528_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_idiv);
        if (!b1)
        {
          goto block_1528_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1528_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          V0[i0] = to_obj(47);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_val1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_expr, S_val2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = To_Nary_Op(l1, l2, v_parentesised, env);
          release(l2);
          release(l1);
          goto block_1520_end;
        }
        b1 = are_eq(p0, S_unique_int);
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(40);
          i0 = i0 + 1;
          V0[i0] = to_obj(41);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          l0 = make_tagged_obj(S_string, l1);
          goto block_1520_end;
        }
        fail();
        block_1520_end:;
        goto block_1497_end;
      }
    }
    b1 = is_objexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      b1 = is_bool(p1);
      if (b1)
      {
        l0 = To_C_Expr(v_expr, env);
        goto block_1497_end;
      }
    }
    fail();
    block_1497_end:;
    return l0;
  }
  
  
  Obj Desugar_Expr(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj v_var;
    Obj v_ptrn;
    Obj v_src;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Stream t0;
    SetIter s0;
    SeqIter q0;
    SeqIter q1;
    Obj v_tuple;
    Obj v_n;
    Obj v_a;
    Obj v_b;
    Obj v_e;
    Obj v_res;
    Obj v_ss;
    Obj V0[5];
    Obj V1[5];
    Obj v_es;
    Obj v_p;
    Obj v_ps;
    Obj v_vs;
    Obj v_c;
    Obj v_nps;
    Obj v_sgn;
    Obj v_cs;
    Obj v_fs;
    Obj v_def_vars;
    Obj v_se;
    Obj v_np;
    Obj v_cexpr;
  
    b1 = is_synexpr(p0);
    if (b1)
    {
      v_expr = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_1530_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_1530_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = is_var(l1);
        if (!b1)
        {
          goto block_1530_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1530_end:;
      if (b1)
      {
        v_def_vars = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1532_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_object);
        if (!b1)
        {
          goto block_1532_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1532_end:;
        if (b1)
        {
          l0 = v_expr;
          add_ref(l0);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1533_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_expr);
        if (!b1)
        {
          goto block_1533_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1533_end:;
        if (b1)
        {
          i0 = 0;
          l2 = ext_lookup(v_expr, S_tail, b1);
          l2 = to_obj(b1);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_tail;
            l2 = ext_lookup(v_expr, S_tail);
            add_ref(l2);
            V1[i0] = Desugar_Expr(l2, v_def_vars, env);
            release(l2);
            i0 = i0 + 1;
          }
          V0[i0] = S_head;
          l2 = ext_lookup(v_expr, S_head);
          add_ref(l2);
          V1[i0] = make_array(get_seq_len(l2), S_nil);
          get_seq_iter(q0, l2);
          i1 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l3 = Desugar_Expr(v_e, v_def_vars, env);
            set_at(V1[i0], i1, l3);
            move_forward(q0);
            i1 = i1 + 1;
          }
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_seq_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1534_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_expr);
        if (!b1)
        {
          goto block_1534_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1534_end:;
        if (b1)
        {
          init(t0);
          get_set_iter(s0, v_es);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_e = l3;
            b1 = true;
            if (b1)
            {
              l3 = Desugar_Expr(v_e, v_def_vars, env);
              append(t0, l3);
            }
            move_forward(s0);
          }
          l1 = make_set(t0);
          l0 = make_tagged_obj(S_set_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1535_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_map_expr);
        if (!b1)
        {
          goto block_1535_end;
        }
        l1 = get_inner_obj(p0);
        v_es = l1;
        b1 = true;
        block_1535_end:;
        if (b1)
        {
          init(t0);
          get_set_iter(s0, v_es);
          for ( ; ; )
          {
            if (is_out_of_range(s0))
            {
              break;
            }
            l3 = get_curr_obj(s0);
            v_e = l3;
            b1 = true;
            if (b1)
            {
              i0 = 0;
              V0[i0] = S_value;
              l4 = ext_lookup(v_e, S_value);
              add_ref(l4);
              V1[i0] = Desugar_Expr(l4, v_def_vars, env);
              release(l4);
              i0 = i0 + 1;
              V0[i0] = S_key;
              l4 = ext_lookup(v_e, S_key);
              add_ref(l4);
              V1[i0] = Desugar_Expr(l4, v_def_vars, env);
              release(l4);
              i0 = i0 + 1;
              l4 = ext_lookup(v_e, S_cond, b1);
              l4 = to_obj(b1);
              if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
              {
                fail();
              }
              if (are_eq(l4, S_true))
              {
                V0[i0] = S_cond;
                l4 = ext_lookup(v_e, S_cond);
                add_ref(l4);
                V1[i0] = Desugar_Expr(l4, v_def_vars, env);
                release(l4);
                i0 = i0 + 1;
              }
              l3 = make_map(V0, V1, i0);
              append(t0, l3);
            }
            move_forward(s0);
          }
          l1 = make_set(t0);
          l0 = make_tagged_obj(S_map_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1536_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_tag_obj_expr);
        if (!b1)
        {
          goto block_1536_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1536_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_obj;
          l2 = ext_lookup(v_expr, S_obj);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_tag;
          l2 = ext_lookup(v_expr, S_tag);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_tag_obj_expr, l1);
          goto block_1531_end;
        }
        b1 = is_var(p0);
        if (b1)
        {
          l0 = v_expr;
          add_ref(l0);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1537_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_const_or_var);
        if (!b1)
        {
          goto block_1537_end;
        }
        l1 = get_inner_obj(p0);
        v_a = l1;
        b1 = true;
        block_1537_end:;
        if (b1)
        {
          add_ref(v_a);
          l2 = make_tagged_obj(S_var, v_a);
          l1 = In(l2, v_def_vars, env);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            add_ref(v_a);
            l0 = make_tagged_obj(S_var, v_a);
            goto block_1538_end;
          }
          add_ref(v_a);
          l2 = make_tagged_obj(S_named_par, v_a);
          l1 = In(l2, env.n_named_params, env);
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            add_ref(v_a);
            l0 = make_tagged_obj(S_named_par, v_a);
            goto block_1538_end;
          }
          i0 = 0;
          V0[i0] = S_arity;
          V1[i0] = to_obj(0);
          i0 = i0 + 1;
          V0[i0] = S_name;
          add_ref(v_a);
          V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          v_sgn = make_tagged_obj(S_untyped_sgn, l1);
          l1 = In(v_sgn, env.n_local_fns, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!are_eq(l1, S_true))
          {
            fail();
          }
          i0 = 0;
          V0[i0] = S_named_params;
          V1[i0] = empty_map;
          i0 = i0 + 1;
          V0[i0] = S_params;
          V1[i0] = empty_seq;
          i0 = i0 + 1;
          V0[i0] = S_name;
          add_ref(v_a);
          V1[i0] = make_tagged_obj(S_fn_symbol, v_a);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_fn_call, l1);
          release(v_sgn);
          goto block_1538_end;
          block_1538_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1539_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_fn_call);
        if (!b1)
        {
          goto block_1539_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1539_end:;
        if (b1)
        {
          l3 = ext_lookup(v_expr, S_params);
          add_ref(l3);
          l2 = Length(l3, env);
          release(l3);
          l1 = greater(l2, to_obj(0), env);
          release(l2);
          if (!are_eq(l1, S_true))
          {
            fail();
          }
          l1 = ext_lookup(v_expr, S_params);
          add_ref(l1);
          v_ps = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l2 = Desugar_Expr(v_e, v_def_vars, env);
            set_at(v_ps, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          i0 = 0;
          V0[i0] = S_name;
          V1[i0] = ext_lookup(v_expr, S_name);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_arity;
          l2 = ext_lookup(v_expr, S_params);
          add_ref(l2);
          V1[i0] = Length(l2, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          v_sgn = make_tagged_obj(S_untyped_sgn, l1);
          l1 = ext_lookup(v_expr, S_named_params);
          add_ref(l1);
          v_nps = Syn_Fn_Defs_To_Named_Params(l1, v_def_vars, env);
          release(l1);
          l1 = In(v_sgn, env.n_local_fns, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            V0[i0] = S_inner;
            V1[i0] = ext_lookup(v_expr, S_name);
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_outer;
            V1[i0] = env.n_curr_outer_fn;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            v_fs = make_tagged_obj(S_nested_fn_symbol, l1);
            i0 = 0;
            V0[i0] = S_params;
            V1[i0] = v_ps;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_named_params;
            V1[i0] = v_nps;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_name;
            V1[i0] = v_fs;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_fn_call, l1);
            release(v_ps);
            release(v_nps);
            release(v_sgn);
            release(v_fs);
            goto block_1540_end;
          }
          l2 = ext_lookup(v_expr, S_name);
          add_ref(l2);
          l1 = Untag(l2, env);
          release(l2);
          v_np = make_tagged_obj(S_named_par, l1);
          l1 = In(v_np, env.n_named_params, env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l2 = empty_map;
            l1 = to_obj(are_eq(v_nps, l2));
            release(l2);
            if (!are_eq(l1, S_true))
            {
              fail();
            }
            i0 = 0;
            V0[i0] = S_params;
            V1[i0] = v_ps;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_name;
            V1[i0] = v_np;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            l1 = make_map(V0, V1, i0);
            l0 = make_tagged_obj(S_cls_call, l1);
            release(v_ps);
            release(v_nps);
            release(v_sgn);
            release(v_np);
            goto block_1540_end;
          }
          i0 = 0;
          V0[i0] = S_name;
          V1[i0] = ext_lookup(v_expr, S_name);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_params;
          V1[i0] = v_ps;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_named_params;
          V1[i0] = v_nps;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_fn_call, l1);
          release(v_ps);
          release(v_nps);
          release(v_sgn);
          release(v_np);
          goto block_1540_end;
          block_1540_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1541_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_builtin_call);
        if (!b1)
        {
          goto block_1541_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1541_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_name;
          V1[i0] = ext_lookup(v_expr, S_name);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_params;
          l2 = ext_lookup(v_expr, S_params);
          add_ref(l2);
          V1[i0] = make_array(get_seq_len(l2), S_nil);
          get_seq_iter(q0, l2);
          i1 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l3 = Desugar_Expr(v_e, v_def_vars, env);
            set_at(V1[i0], i1, l3);
            move_forward(q0);
            i1 = i1 + 1;
          }
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_builtin_call, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1542_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_and);
        if (!b1)
        {
          goto block_1542_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1542_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_left;
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_right;
          l2 = ext_lookup(v_expr, S_right);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_and_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1543_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_or);
        if (!b1)
        {
          goto block_1543_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1543_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_left;
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_right;
          l2 = ext_lookup(v_expr, S_right);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_or_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1544_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_not);
        if (!b1)
        {
          goto block_1544_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1544_end:;
        if (b1)
        {
          l1 = Desugar_Expr(v_e, v_def_vars, env);
          l0 = make_tagged_obj(S_not_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1545_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_eq);
        if (!b1)
        {
          goto block_1545_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1545_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_left;
          l2 = ext_lookup(v_expr, S_left);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_right;
          l2 = ext_lookup(v_expr, S_right);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_eq, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1546_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_neq);
        if (!b1)
        {
          goto block_1546_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1546_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_left;
          l3 = ext_lookup(v_expr, S_left);
          add_ref(l3);
          V1[i0] = Desugar_Expr(l3, v_def_vars, env);
          release(l3);
          i0 = i0 + 1;
          V0[i0] = S_right;
          l3 = ext_lookup(v_expr, S_right);
          add_ref(l3);
          V1[i0] = Desugar_Expr(l3, v_def_vars, env);
          release(l3);
          i0 = i0 + 1;
          l2 = make_map(V0, V1, i0);
          l1 = make_tagged_obj(S_eq, l2);
          l0 = make_tagged_obj(S_not_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1547_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_membership);
        if (!b1)
        {
          goto block_1547_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1547_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_type;
          V1[i0] = ext_lookup(v_expr, S_type);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_obj;
          l2 = ext_lookup(v_expr, S_obj);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_membership, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1548_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_accessor);
        if (!b1)
        {
          goto block_1548_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1548_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_field;
          V1[i0] = ext_lookup(v_expr, S_field);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_expr;
          l2 = ext_lookup(v_expr, S_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_accessor, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1549_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_accessor_test);
        if (!b1)
        {
          goto block_1549_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1549_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_field;
          V1[i0] = ext_lookup(v_expr, S_field);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_expr;
          l2 = ext_lookup(v_expr, S_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_accessor_test, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1550_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_ex_qual);
        if (!b1)
        {
          goto block_1550_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1550_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Syn_New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l1);
          v_se = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l2 = Desugar_Expr(v_e, v_vs, env);
            set_at(v_se, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          i0 = 0;
          V0[i0] = S_source;
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          V1[i0] = Mk_And_Clause(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l3 = empty_seq;
          l2 = to_obj(are_eq(v_se, l3));
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_sel_expr;
            V1[i0] = Mk_And_Expr(v_se, env);
            i0 = i0 + 1;
          }
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_ex_qual, l1);
          release(v_vs);
          release(v_se);
          goto block_1551_end;
          block_1551_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1552_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_comp);
        if (!b1)
        {
          goto block_1552_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1552_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Syn_New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l1);
          v_se = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l2 = Desugar_Expr(v_e, v_vs, env);
            set_at(v_se, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          i0 = 0;
          V0[i0] = S_expr;
          l2 = ext_lookup(v_expr, S_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_source;
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          V1[i0] = Mk_And_Clause(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l3 = empty_seq;
          l2 = to_obj(are_eq(v_se, l3));
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_sel_expr;
            V1[i0] = Mk_And_Expr(v_se, env);
            i0 = i0 + 1;
          }
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_set_comp, l1);
          release(v_vs);
          release(v_se);
          goto block_1553_end;
          block_1553_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1554_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_map_comp);
        if (!b1)
        {
          goto block_1554_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1554_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          l1 = Syn_New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_sel_exprs);
          add_ref(l1);
          v_se = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l2 = Desugar_Expr(v_e, v_vs, env);
            set_at(v_se, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          i0 = 0;
          V0[i0] = S_key_expr;
          l2 = ext_lookup(v_expr, S_key_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_value_expr;
          l2 = ext_lookup(v_expr, S_value_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_source;
          l2 = ext_lookup(v_expr, S_source);
          add_ref(l2);
          V1[i0] = Mk_And_Clause(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l3 = empty_seq;
          l2 = to_obj(are_eq(v_se, l3));
          release(l3);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            l2 = S_false;
          }
          else
          {
            l2 = S_true;
          }
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_sel_expr;
            V1[i0] = Mk_And_Expr(v_se, env);
            i0 = i0 + 1;
          }
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_map_comp, l1);
          release(v_vs);
          release(v_se);
          goto block_1555_end;
          block_1555_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1556_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_comp);
        if (!b1)
        {
          goto block_1556_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1556_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = ext_lookup(v_expr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = ext_lookup(v_expr, S_idx_var, b1);
          l2 = to_obj(b1);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = ext_lookup(v_expr, S_idx_var);
            add_ref(V0[i0]);
            i0 = i0 + 1;
          }
          l1 = make_set(V0, i0);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          i0 = 0;
          V0[i0] = S_var;
          V1[i0] = ext_lookup(v_expr, S_var);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l2 = ext_lookup(v_expr, S_idx_var, b1);
          l2 = to_obj(b1);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_idx_var;
            V1[i0] = ext_lookup(v_expr, S_idx_var);
            add_ref(V1[i0]);
            i0 = i0 + 1;
          }
          V0[i0] = S_expr;
          l2 = ext_lookup(v_expr, S_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_vs, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_src_expr;
          l2 = ext_lookup(v_expr, S_src_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          l2 = ext_lookup(v_expr, S_sel_expr, b1);
          l2 = to_obj(b1);
          if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
          {
            fail();
          }
          if (are_eq(l2, S_true))
          {
            V0[i0] = S_sel_expr;
            l2 = ext_lookup(v_expr, S_sel_expr);
            add_ref(l2);
            V1[i0] = Desugar_Expr(l2, v_vs, env);
            release(l2);
            i0 = i0 + 1;
          }
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_seq_comp, l1);
          release(v_vs);
          goto block_1557_end;
          block_1557_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1558_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_if_expr);
        if (!b1)
        {
          goto block_1558_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1558_end:;
        if (b1)
        {
          l1 = ext_lookup(v_expr, S_else);
          add_ref(l1);
          v_res = Desugar_Expr(l1, v_def_vars, env);
          release(l1);
          l2 = ext_lookup(v_expr, S_branches);
          add_ref(l2);
          l1 = Reverse(l2, env);
          release(l2);
          get_seq_iter(q0, l1);
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_b = get_curr_obj(q0);
            i0 = 0;
            V0[i0] = S_else;
            V1[i0] = v_res;
            add_ref(V1[i0]);
            i0 = i0 + 1;
            V0[i0] = S_cond;
            l4 = ext_lookup(v_b, S_cond);
            add_ref(l4);
            V1[i0] = Desugar_Expr(l4, v_def_vars, env);
            release(l4);
            i0 = i0 + 1;
            V0[i0] = S_then;
            l4 = ext_lookup(v_b, S_expr);
            add_ref(l4);
            V1[i0] = Desugar_Expr(l4, v_def_vars, env);
            release(l4);
            i0 = i0 + 1;
            l3 = make_map(V0, V1, i0);
            l2 = make_tagged_obj(S_if_expr, l3);
            release(v_res);
            v_res = l2;
            move_forward(q0);
          }
          release(l1);
          l0 = v_res;
          add_ref(l0);
          release(v_res);
          goto block_1559_end;
          block_1559_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1560_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_match_expr);
        if (!b1)
        {
          goto block_1560_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1560_end:;
        if (b1)
        {
          l3 = ext_lookup(v_expr, S_cases);
          add_ref(l3);
          l2 = brackets(l3, to_obj(0), env);
          release(l3);
          l1 = ext_lookup(l2, S_patterns);
          add_ref(l1);
          release(l2);
          v_n = Length(l1, env);
          release(l1);
          l4 = ext_lookup(v_expr, S_exprs);
          add_ref(l4);
          l1 = Subseq(l4, to_obj(0), v_n, env);
          release(l4);
          v_es = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_e = get_curr_obj(q0);
            l2 = Desugar_Expr(v_e, v_def_vars, env);
            set_at(v_es, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          l1 = ext_lookup(v_expr, S_cases);
          add_ref(l1);
          v_cs = make_array(get_seq_len(l1), S_nil);
          get_seq_iter(q0, l1);
          i0 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_c = get_curr_obj(q0);
            l6 = ext_lookup(v_c, S_patterns);
            add_ref(l6);
            l5 = make_array(get_seq_len(l6), S_nil);
            get_seq_iter(q1, l6);
            i1 = 0;
            for ( ; ; )
            {
              if (is_out_of_range(q1))
              {
                break;
              }
              v_p = get_curr_obj(q1);
              l7 = New_Vars(v_p, env);
              set_at(l5, i1, l7);
              move_forward(q1);
              i1 = i1 + 1;
            }
            release(l6);
            l4 = Seq_Union(l5, env);
            release(l5);
            v_vs = amp(v_def_vars, l4, env);
            release(l4);
            i1 = 0;
            V0[i1] = S_ptrns;
            V1[i1] = ext_lookup(v_c, S_patterns);
            add_ref(V1[i1]);
            i1 = i1 + 1;
            V0[i1] = S_expr;
            l4 = ext_lookup(v_c, S_expr);
            add_ref(l4);
            V1[i1] = Desugar_Expr(l4, v_vs, env);
            release(l4);
            i1 = i1 + 1;
            l2 = make_map(V0, V1, i1);
            release(v_vs);
            goto block_1562_end;
            block_1562_end:;
            set_at(v_cs, i0, l2);
            move_forward(q0);
            i0 = i0 + 1;
          }
          release(l1);
          i0 = 0;
          V0[i0] = S_exprs;
          V1[i0] = v_es;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_cases;
          V1[i0] = v_cs;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_match_expr, l1);
          release(v_n);
          release(v_es);
          release(v_cs);
          goto block_1561_end;
          block_1561_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1563_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_do_expr);
        if (!b1)
        {
          goto block_1563_end;
        }
        l1 = get_inner_obj(p0);
        v_ss = l1;
        b1 = true;
        block_1563_end:;
        if (b1)
        {
          l1 = Desugar_Stmts(v_ss, v_def_vars, env);
          l0 = make_tagged_obj(S_do_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1564_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_select_expr);
        if (!b1)
        {
          goto block_1564_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1564_end:;
        if (b1)
        {
          v_var = First_Unused_Int_Var(v_def_vars, env);
          i0 = 0;
          V0[i0] = S_name;
          V1[i0] = v_var;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_ptrn;
          l2 = ext_lookup(v_expr, S_type);
          add_ref(l2);
          V1[i0] = make_tagged_obj(S_type_ptrn, l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          v_ptrn = make_tagged_obj(S_var_ptrn, l1);
          l1 = ext_lookup(v_expr, S_src_expr);
          add_ref(l1);
          v_src = Desugar_Expr(l1, v_def_vars, env);
          release(l1);
          i0 = 0;
          V0[i0] = S_expr;
          V1[i0] = v_var;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_src_expr;
          V1[i0] = v_src;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_ptrn;
          V1[i0] = v_ptrn;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_select_expr, l1);
          release(v_var);
          release(v_ptrn);
          release(v_src);
          goto block_1565_end;
          block_1565_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1566_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_retrieve_expr);
        if (!b1)
        {
          goto block_1566_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1566_end:;
        if (b1)
        {
          l2 = ext_lookup(v_expr, S_ptrn);
          add_ref(l2);
          l1 = New_Vars(l2, env);
          release(l2);
          v_vs = amp(v_def_vars, l1, env);
          release(l1);
          l1 = ext_lookup(v_expr, S_expr);
          add_ref(l1);
          v_res = Desugar_Expr(l1, v_vs, env);
          release(l1);
          v_ptrn = ext_lookup(v_expr, S_ptrn);
          add_ref(v_ptrn);
          l1 = ext_lookup(v_expr, S_src_expr);
          add_ref(l1);
          v_src = Desugar_Expr(l1, v_def_vars, env);
          release(l1);
          i0 = 0;
          V0[i0] = S_src_expr;
          V1[i0] = v_src;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_ptrn;
          V1[i0] = v_ptrn;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_expr;
          V1[i0] = v_res;
          add_ref(V1[i0]);
          i0 = i0 + 1;
          v_tuple = make_map(V0, V1, i0);
          l1 = ext_lookup(v_expr, S_cond, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l3 = ext_lookup(v_expr, S_cond);
            add_ref(l3);
            l2 = Desugar_Expr(l3, v_vs, env);
            release(l3);
            l1 = amp(v_tuple, l2, env);
            release(l2);
            release(v_tuple);
            v_tuple = l1;
          }
          add_ref(v_tuple);
          l0 = make_tagged_obj(S_select_expr, v_tuple);
          release(v_ptrn);
          release(v_src);
          release(v_tuple);
          release(v_res);
          release(v_vs);
          goto block_1567_end;
          block_1567_end:;
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1568_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_replace_expr);
        if (!b1)
        {
          goto block_1568_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1568_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = S_ptrn;
          V1[i0] = ext_lookup(v_expr, S_ptrn);
          add_ref(V1[i0]);
          i0 = i0 + 1;
          V0[i0] = S_src_expr;
          l2 = ext_lookup(v_expr, S_src_expr);
          add_ref(l2);
          V1[i0] = Desugar_Expr(l2, v_def_vars, env);
          release(l2);
          i0 = i0 + 1;
          V0[i0] = S_expr;
          l2 = ext_lookup(v_expr, S_expr);
          add_ref(l2);
          l5 = ext_lookup(v_expr, S_ptrn);
          add_ref(l5);
          l4 = New_Vars(l5, env);
          release(l5);
          l3 = amp(v_def_vars, l4, env);
          release(l4);
          V1[i0] = Desugar_Expr(l2, l3, env);
          release(l3);
          release(l2);
          i0 = i0 + 1;
          l1 = make_map(V0, V1, i0);
          l0 = make_tagged_obj(S_replace_expr, l1);
          goto block_1531_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1569_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_let_expr);
        if (!b1)
        {
          goto block_1569_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1569_end:;
        if (b1)
        {
          l3 = ext_lookup(v_expr, S_stmts);
          add_ref(l3);
          i0 = 0;
          l5 = ext_lookup(v_expr, S_expr);
          add_ref(l5);
          V0[i0] = make_tagged_obj(S_return_stmt, l5);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = Desugar_Stmts(l2, v_def_vars, env);
          release(l2);
          l0 = make_tagged_obj(S_do_expr, l1);
          goto block_1531_end;
        }
        fail();
        block_1531_end:;
        goto block_1529_end;
      }
    }
    b1 = is_syncondexpr(p0);
    if (b1)
    {
      v_cexpr = p0;
    }
    if (b1)
    {
      if (are_eq(p1, empty_set))
      {
        b1 = true;
        goto block_1570_end;
      }
      if (!is_ne_set(p1))
      {
        b1 = false;
        goto block_1570_end;
      }
      get_set_iter(s0, p1);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l1 = get_curr_obj(s0);
        b1 = is_var(l1);
        if (!b1)
        {
          goto block_1570_end;
        }
        move_forward(s0);
      }
      b1 = true;
      block_1570_end:;
      if (b1)
      {
        v_def_vars = p1;
      }
      if (b1)
      {
        i0 = 0;
        V0[i0] = S_cond;
        l2 = ext_lookup(v_cexpr, S_cond);
        add_ref(l2);
        V1[i0] = Desugar_Expr(l2, v_def_vars, env);
        release(l2);
        i0 = i0 + 1;
        V0[i0] = S_expr;
        l2 = ext_lookup(v_cexpr, S_expr);
        add_ref(l2);
        V1[i0] = Desugar_Expr(l2, v_def_vars, env);
        release(l2);
        i0 = i0 + 1;
        l1 = make_map(V0, V1, i0);
        l0 = make_tagged_obj(S_cond_expr, l1);
        goto block_1529_end;
      }
    }
    fail();
    block_1529_end:;
    return l0;
  }
  
  
  Obj Gen_Eval_Code(Obj p0, Obj p1, Env &env)
  {
    Obj v_expr;
    Obj v_idx_var;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Obj l8;
    SeqIter q0;
    SeqIter q1;
    Obj v_bvar;
    Obj v_code;
    Obj v_count_var;
    Obj v_res_var;
    Obj v_action;
    Obj v_e;
    Obj v_i;
    Obj v_ss;
    Obj V1[3];
    Obj V0[5];
    Obj v_es;
    Obj v_p;
    Obj v_c;
    Obj v_tmp_bvar;
    Obj v_info;
    Obj v_cond_var;
    Obj v_head_res_var;
    Obj v_new_obj_var_id;
    Obj v_keys_var;
    Obj v_values_var;
    Obj v_curr_key_slot_var;
    Obj v_curr_value_slot_var;
    Obj v_key_code;
    Obj v_value_code;
    Obj v_entry_code;
    Obj v_cond_info;
    Obj v_pars_info;
    Obj v_call_code;
    Obj v_bool_var;
    Obj v_case_code;
    Obj v_strm_var;
    Obj v_key_strm_var;
    Obj v_value_strm_var;
    Obj v_src_var;
    Obj v_item_var;
    Obj v_sel_var;
    Obj v_it_var;
    Obj v_src_info;
    Obj v_item_info;
    Obj v_sel_info;
    Obj v_needs_idx_var;
    Obj v_knows_size;
    Obj v_eval_and_assign_code;
    Obj v_core_loop_code;
    Obj v_loop_code;
  
    v_expr = p0;
    v_res_var = p1;
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1572_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_object);
    if (!b1)
    {
      goto block_1572_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1572_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = Set_Var(v_res_var, v_expr, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1571_end;
    }
    b1 = is_var(p0);
    if (b1)
    {
      i0 = 0;
      V0[i0] = Set_Var(v_res_var, v_expr, env);
      i0 = i0 + 1;
      V0[i0] = Add_Ref(v_res_var, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1573_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_do_expr);
    if (!b1)
    {
      goto block_1573_end;
    }
    l1 = get_inner_obj(p0);
    v_ss = l1;
    b1 = true;
    block_1573_end:;
    if (b1)
    {
      i0 = 0;
      l1 = Gen_Code(v_ss, v_res_var, env);
      V0[i0] = Execute_Block(l1, env);
      release(l1);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1574_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_select_expr);
    if (!b1)
    {
      goto block_1574_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1574_end:;
    if (b1)
    {
      l1 = Simplify(v_expr, env);
      l0 = Gen_Eval_Code(l1, v_res_var, env);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1575_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_replace_expr);
    if (!b1)
    {
      goto block_1575_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1575_end:;
    if (b1)
    {
      l1 = Simplify(v_expr, env);
      l0 = Gen_Eval_Code(l1, v_res_var, env);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1576_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_and_expr);
    if (!b1)
    {
      goto block_1576_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1576_end:;
    if (b1)
    {
      l2 = ext_lookup(v_expr, S_left);
      add_ref(l2);
      l1 = Gen_Eval_Code(l2, v_res_var, env);
      release(l2);
      i0 = 0;
      l3 = Is_Bool(v_res_var, env);
      V0[i0] = Check(l3, env);
      release(l3);
      i0 = i0 + 1;
      l3 = Is_True(v_res_var, env);
      l6 = ext_lookup(v_expr, S_right);
      add_ref(l6);
      l5 = Gen_Eval_Code(l6, v_res_var, env);
      release(l6);
      i1 = 0;
      V1[i1] = Check_Is_Bool(v_res_var, env);
      i1 = i1 + 1;
      l6 = make_seq(V1, i1);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      V0[i0] = Do_If(l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1577_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_or_expr);
    if (!b1)
    {
      goto block_1577_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1577_end:;
    if (b1)
    {
      l2 = ext_lookup(v_expr, S_left);
      add_ref(l2);
      l1 = Gen_Eval_Code(l2, v_res_var, env);
      release(l2);
      i0 = 0;
      l3 = Is_Bool(v_res_var, env);
      V0[i0] = Check(l3, env);
      release(l3);
      i0 = i0 + 1;
      l3 = Is_False(v_res_var, env);
      l6 = ext_lookup(v_expr, S_right);
      add_ref(l6);
      l5 = Gen_Eval_Code(l6, v_res_var, env);
      release(l6);
      i1 = 0;
      l7 = Is_Bool(v_res_var, env);
      V1[i1] = Check(l7, env);
      release(l7);
      i1 = i1 + 1;
      l6 = make_seq(V1, i1);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      V0[i0] = Do_If(l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1578_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_not_expr);
    if (!b1)
    {
      goto block_1578_end;
    }
    l1 = get_inner_obj(p0);
    v_e = l1;
    b1 = true;
    block_1578_end:;
    if (b1)
    {
      l1 = Gen_Eval_Code(v_e, v_res_var, env);
      i0 = 0;
      l3 = Is_Bool(v_res_var, env);
      V0[i0] = Check(l3, env);
      release(l3);
      i0 = i0 + 1;
      l3 = Is_True(v_res_var, env);
      i1 = 0;
      l5 = Obj_False(env);
      V1[i1] = Set_Var(v_res_var, l5, env);
      release(l5);
      i1 = i1 + 1;
      l4 = make_seq(V1, i1);
      i1 = 0;
      l6 = Obj_True(env);
      V1[i1] = Set_Var(v_res_var, l6, env);
      release(l6);
      i1 = i1 + 1;
      l5 = make_seq(V1, i1);
      V0[i0] = Branch(l3, l4, l5, env);
      release(l5);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1579_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_expr);
    if (!b1)
    {
      goto block_1579_end;
    }
    l1 = get_inner_obj(p0);
    v_es = l1;
    b1 = true;
    block_1579_end:;
    if (b1)
    {
      l2 = empty_set;
      l1 = to_obj(are_eq(v_es, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        l1 = Empty_Set(env);
        V0[i0] = Set_Var(v_res_var, l1, env);
        release(l1);
        i0 = i0 + 1;
        l0 = make_seq(V0, i0);
        goto block_1580_end;
      }
      l1 = Sort_Exprs_First(v_es, env);
      v_info = Gen_Vector_Eval_Info(l1, env);
      release(l1);
      l1 = ext_lookup(v_info, S_code);
      add_ref(l1);
      i0 = 0;
      l3 = ext_lookup(v_info, S_vect_var);
      add_ref(l3);
      l4 = ext_lookup(v_info, S_count_var);
      add_ref(l4);
      V0[i0] = Mk_Set(v_res_var, l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      goto block_1580_end;
      block_1580_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1581_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_expr);
    if (!b1)
    {
      goto block_1581_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1581_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_tail, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_head_res_var = Lvar(env.n_next_obj_var_id, env);
        v_new_obj_var_id = plus(env.n_next_obj_var_id, to_obj(1), env);
      }
      else
      {
        v_head_res_var = v_res_var;
        add_ref(v_head_res_var);
        v_new_obj_var_id = env.n_next_obj_var_id;
        add_ref(v_new_obj_var_id);
      }
      l2 = ext_lookup(v_expr, S_head);
      add_ref(l2);
      l3 = empty_seq;
      l1 = to_obj(are_eq(l2, l3));
      release(l3);
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        Obj BK1583 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = v_new_obj_var_id;
        add_ref(env.n_next_obj_var_id);
        l1 = ext_lookup(v_expr, S_head);
        add_ref(l1);
        v_info = Gen_Vector_Eval_Info(l1, env);
        release(l1);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK1583;
        l1 = ext_lookup(v_info, S_code);
        add_ref(l1);
        i0 = 0;
        l3 = ext_lookup(v_info, S_vect_var);
        add_ref(l3);
        l4 = ext_lookup(v_info, S_count_var);
        add_ref(l4);
        V0[i0] = Mk_Seq(v_head_res_var, l3, l4, env);
        release(l4);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        v_code = amp(l1, l2, env);
        release(l2);
        release(l1);
        release(v_info);
      }
      else
      {
        i0 = 0;
        l1 = Empty_Seq(env);
        V0[i0] = Set_Var(v_head_res_var, l1, env);
        release(l1);
        i0 = i0 + 1;
        v_code = make_seq(V0, i0);
      }
      l1 = ext_lookup(v_expr, S_tail, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        Obj BK1584 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = v_new_obj_var_id;
        add_ref(env.n_next_obj_var_id);
        l1 = ext_lookup(v_expr, S_tail);
        add_ref(l1);
        v_info = Gen_Eval_Info(l1, env);
        release(l1);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK1584;
        l3 = ext_lookup(v_info, S_eval_code);
        add_ref(l3);
        l2 = amp(v_code, l3, env);
        release(l3);
        i0 = 0;
        l4 = ext_lookup(v_info, S_expr);
        add_ref(l4);
        V0[i0] = Join_Seqs(v_res_var, v_head_res_var, l4, env);
        release(l4);
        i0 = i0 + 1;
        V0[i0] = Release(v_head_res_var, env);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_code);
        v_code = l1;
        release(v_info);
      }
      l0 = v_code;
      add_ref(l0);
      release(v_code);
      release(v_head_res_var);
      release(v_new_obj_var_id);
      goto block_1582_end;
      block_1582_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1585_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_expr);
    if (!b1)
    {
      goto block_1585_end;
    }
    l1 = get_inner_obj(p0);
    v_es = l1;
    b1 = true;
    block_1585_end:;
    if (b1)
    {
      l2 = empty_set;
      l1 = to_obj(are_eq(v_es, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        i0 = 0;
        l1 = Empty_Map(env);
        V0[i0] = Set_Var(v_res_var, l1, env);
        release(l1);
        i0 = i0 + 1;
        l0 = make_seq(V0, i0);
        goto block_1586_end;
      }
      v_cond_var = Lvar(env.n_next_obj_var_id, env);
      l1 = Size(v_es, env);
      v_keys_var = Vvar(env.n_next_vector_var_id, l1, env);
      release(l1);
      l1 = plus(env.n_next_vector_var_id, to_obj(1), env);
      l2 = Size(v_es, env);
      v_values_var = Vvar(l1, l2, env);
      release(l2);
      release(l1);
      v_count_var = Ivar(env.n_next_int_var_id, env);
      l1 = ext_lookup(v_keys_var, S_id);
      add_ref(l1);
      v_curr_key_slot_var = Evar(l1, v_count_var, env);
      release(l1);
      l1 = ext_lookup(v_values_var, S_id);
      add_ref(l1);
      v_curr_value_slot_var = Evar(l1, v_count_var, env);
      release(l1);
      i0 = 0;
      V0[i0] = Set_Ivar(v_count_var, to_obj(0), env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l1 = plus(env.n_next_int_var_id, to_obj(1), env);
      Obj BK1587 = env.n_next_int_var_id;
      env.n_next_int_var_id = l1;
      add_ref(env.n_next_int_var_id);
      l2 = plus(env.n_next_vector_var_id, to_obj(2), env);
      Obj BK1588 = env.n_next_vector_var_id;
      env.n_next_vector_var_id = l2;
      add_ref(env.n_next_vector_var_id);
      l3 = Rand_Sort(v_es, env);
      get_seq_iter(q0, l3);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_e = get_curr_obj(q0);
        l4 = ext_lookup(v_e, S_key);
        add_ref(l4);
        v_key_code = Gen_Eval_Code(l4, v_curr_key_slot_var, env);
        release(l4);
        l4 = ext_lookup(v_e, S_value);
        add_ref(l4);
        v_value_code = Gen_Eval_Code(l4, v_curr_value_slot_var, env);
        release(l4);
        l4 = amp(v_key_code, v_value_code, env);
        i0 = 0;
        V0[i0] = Increment(v_count_var, env);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        v_entry_code = amp(l4, l5, env);
        release(l5);
        release(l4);
        l4 = ext_lookup(v_e, S_cond, b1);
        l4 = to_obj(b1);
        if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
        {
          fail();
        }
        if (are_eq(l4, S_true))
        {
          l4 = plus(env.n_next_obj_var_id, to_obj(1), env);
          Obj BK1589 = env.n_next_obj_var_id;
          env.n_next_obj_var_id = l4;
          add_ref(env.n_next_obj_var_id);
          l5 = ext_lookup(v_e, S_cond);
          add_ref(l5);
          v_cond_info = Gen_Eval_Info(l5, v_cond_var, env);
          release(l5);
          release(env.n_next_obj_var_id);
          env.n_next_obj_var_id = BK1589;
          release(l4);
          l5 = ext_lookup(v_cond_info, S_eval_code);
          add_ref(l5);
          i0 = 0;
          l8 = ext_lookup(v_cond_info, S_expr);
          add_ref(l8);
          l7 = Is_Bool(l8, env);
          release(l8);
          V0[i0] = Check(l7, env);
          release(l7);
          i0 = i0 + 1;
          l8 = ext_lookup(v_cond_info, S_expr);
          add_ref(l8);
          l7 = Is_True(l8, env);
          release(l8);
          V0[i0] = Do_If(l7, v_entry_code, env);
          release(l7);
          i0 = i0 + 1;
          l6 = make_seq(V0, i0);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          release(v_entry_code);
          v_entry_code = l4;
          release(v_cond_info);
        }
        l4 = amp(v_code, v_entry_code, env);
        release(v_code);
        v_code = l4;
        release(v_key_code);
        release(v_value_code);
        release(v_entry_code);
        move_forward(q0);
      }
      release(l3);
      release(env.n_next_vector_var_id);
      env.n_next_vector_var_id = BK1588;
      release(l2);
      release(env.n_next_int_var_id);
      env.n_next_int_var_id = BK1587;
      release(l1);
      i0 = 0;
      V0[i0] = Mk_Map(v_res_var, v_keys_var, v_values_var, v_count_var, env);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      l0 = amp(v_code, l1, env);
      release(l1);
      release(v_code);
      release(v_count_var);
      release(v_cond_var);
      release(v_keys_var);
      release(v_values_var);
      release(v_curr_key_slot_var);
      release(v_curr_value_slot_var);
      goto block_1586_end;
      block_1586_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1590_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_tag_obj_expr);
    if (!b1)
    {
      goto block_1590_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1590_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_tag);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_obj);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      l1 = ext_lookup(v_info, S_add_ref_eval_code);
      add_ref(l1);
      i0 = 0;
      l4 = ext_lookup(v_info, S_exprs);
      add_ref(l4);
      l3 = brackets(l4, to_obj(0), env);
      release(l4);
      l5 = ext_lookup(v_info, S_exprs);
      add_ref(l5);
      l4 = brackets(l5, to_obj(1), env);
      release(l5);
      V0[i0] = Mk_Tagged_Obj(v_res_var, l3, l4, env);
      release(l4);
      release(l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      goto block_1591_end;
      block_1591_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1592_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_fn_call);
    if (!b1)
    {
      goto block_1592_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1592_end:;
    if (b1)
    {
      l2 = ext_lookup(v_expr, S_named_params);
      add_ref(l2);
      l1 = Rand_Sort_Pairs(l2, env);
      release(l2);
      i0 = 0;
      V0[i0] = S_expr;
      V1[i0] = v_expr;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_res_var;
      V1[i0] = v_res_var;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l2 = make_map(V0, V1, i0);
      l0 = Make_Scopes(l1, l2, env);
      release(l2);
      release(l1);
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1593_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_cls_call);
    if (!b1)
    {
      goto block_1593_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1593_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      v_pars_info = Gen_Eval_Info(l1, env);
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_expr, S_name);
      add_ref(l1);
      l2 = ext_lookup(v_pars_info, S_exprs);
      add_ref(l2);
      V0[i0] = Call_Cls(v_res_var, l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      v_call_code = make_seq(V0, i0);
      l2 = ext_lookup(v_pars_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_call_code, env);
      release(l2);
      l2 = ext_lookup(v_pars_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_pars_info);
      release(v_call_code);
      goto block_1594_end;
      block_1594_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1595_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_builtin_call);
    if (!b1)
    {
      goto block_1595_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1595_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_params);
      add_ref(l1);
      v_pars_info = Gen_Eval_Info(l1, env);
      release(l1);
      l1 = ext_lookup(v_expr, S_name);
      add_ref(l1);
      l2 = ext_lookup(v_pars_info, S_exprs);
      add_ref(l2);
      v_call_code = Gen_Eval_Code(l1, l2, v_res_var, env);
      release(l2);
      release(l1);
      l2 = ext_lookup(v_pars_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_call_code, env);
      release(l2);
      l2 = ext_lookup(v_pars_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_pars_info);
      release(v_call_code);
      goto block_1596_end;
      block_1596_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1597_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_eq);
    if (!b1)
    {
      goto block_1597_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1597_end:;
    if (b1)
    {
      i0 = 0;
      V0[i0] = ext_lookup(v_expr, S_left);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      V0[i0] = ext_lookup(v_expr, S_right);
      add_ref(V0[i0]);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      i0 = 0;
      l7 = ext_lookup(v_info, S_exprs);
      add_ref(l7);
      l6 = brackets(l7, to_obj(0), env);
      release(l7);
      l8 = ext_lookup(v_info, S_exprs);
      add_ref(l8);
      l7 = brackets(l8, to_obj(1), env);
      release(l8);
      l5 = Is_Eq(l6, l7, env);
      release(l7);
      release(l6);
      l4 = To_Obj(l5, env);
      release(l5);
      V0[i0] = Set_Var(v_res_var, l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_info);
      goto block_1598_end;
      block_1598_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1599_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_membership);
    if (!b1)
    {
      goto block_1599_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1599_end:;
    if (b1)
    {
      v_bool_var = Bvar(env.n_next_bool_var_id, env);
      l1 = ext_lookup(v_expr, S_obj);
      add_ref(l1);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      l1 = ext_lookup(v_info, S_next_var_id);
      add_ref(l1);
      Obj BK1601 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l1;
      add_ref(env.n_next_obj_var_id);
      l2 = plus(env.n_next_bool_var_id, to_obj(1), env);
      Obj BK1602 = env.n_next_bool_var_id;
      env.n_next_bool_var_id = l2;
      add_ref(env.n_next_bool_var_id);
      l3 = ext_lookup(v_expr, S_type);
      add_ref(l3);
      l4 = ext_lookup(v_info, S_expr);
      add_ref(l4);
      v_code = Gen_Type_Checking_Code(l3, l4, v_bool_var, env);
      release(l4);
      release(l3);
      release(env.n_next_bool_var_id);
      env.n_next_bool_var_id = BK1602;
      release(l2);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1601;
      release(l1);
      l3 = ext_lookup(v_info, S_eval_code);
      add_ref(l3);
      l2 = amp(l3, v_code, env);
      release(l3);
      i0 = 0;
      l4 = To_Obj(v_bool_var, env);
      V0[i0] = Set_Var(v_res_var, l4, env);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_code);
      release(v_info);
      release(v_bool_var);
      goto block_1600_end;
      block_1600_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1603_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_accessor);
    if (!b1)
    {
      goto block_1603_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1603_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_expr);
      add_ref(l1);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      i0 = 0;
      l1 = ext_lookup(v_info, S_expr);
      add_ref(l1);
      l2 = ext_lookup(v_expr, S_field);
      add_ref(l2);
      V0[i0] = Ext_Lookup(v_res_var, l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Add_Ref(v_res_var, env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_code, env);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_code);
      release(v_info);
      goto block_1604_end;
      block_1604_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1605_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_accessor_test);
    if (!b1)
    {
      goto block_1605_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1605_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_expr);
      add_ref(l1);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      v_bvar = Bvar(env.n_next_bool_var_id, env);
      i0 = 0;
      l1 = ext_lookup(v_info, S_expr);
      add_ref(l1);
      l2 = ext_lookup(v_expr, S_field);
      add_ref(l2);
      V0[i0] = Ext_Lookup(v_bvar, v_res_var, l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      l1 = To_Obj(v_bvar, env);
      V0[i0] = Set_Var(v_res_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_code, env);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_bvar);
      release(v_code);
      release(v_info);
      goto block_1606_end;
      block_1606_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1607_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_if_expr);
    if (!b1)
    {
      goto block_1607_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1607_end:;
    if (b1)
    {
      l1 = ext_lookup(v_expr, S_cond);
      add_ref(l1);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      i0 = 0;
      l2 = ext_lookup(v_info, S_expr);
      add_ref(l2);
      l1 = Is_Bool(l2, env);
      release(l2);
      V0[i0] = Check(l1, env);
      release(l1);
      i0 = i0 + 1;
      l2 = ext_lookup(v_info, S_expr);
      add_ref(l2);
      l1 = Is_True(l2, env);
      release(l2);
      l3 = ext_lookup(v_expr, S_then);
      add_ref(l3);
      l2 = Gen_Eval_Code(l3, v_res_var, env);
      release(l3);
      l4 = ext_lookup(v_expr, S_else);
      add_ref(l4);
      l3 = Gen_Eval_Code(l4, v_res_var, env);
      release(l4);
      V0[i0] = Branch(l1, l2, l3, env);
      release(l3);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l1 = ext_lookup(v_info, S_eval_code);
      add_ref(l1);
      l0 = amp(l1, v_code, env);
      release(l1);
      release(v_code);
      release(v_info);
      goto block_1608_end;
      block_1608_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1609_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_match_expr);
    if (!b1)
    {
      goto block_1609_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1609_end:;
    if (b1)
    {
      v_tmp_bvar = Bvar(env.n_next_bool_var_id, env);
      l1 = ext_lookup(v_expr, S_exprs);
      add_ref(l1);
      v_info = Gen_Eval_Info(l1, env);
      release(l1);
      i0 = 0;
      V0[i0] = Terminate(env);
      i0 = i0 + 1;
      v_code = make_seq(V0, i0);
      l2 = ext_lookup(v_expr, S_cases);
      add_ref(l2);
      l1 = Reverse(l2, env);
      release(l2);
      get_seq_iter(q0, l1);
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_c = get_curr_obj(q0);
        l2 = ext_lookup(v_info, S_next_var_id);
        add_ref(l2);
        Obj BK1611 = env.n_next_obj_var_id;
        env.n_next_obj_var_id = l2;
        add_ref(env.n_next_obj_var_id);
        l3 = ext_lookup(v_c, S_expr);
        add_ref(l3);
        v_case_code = Gen_Eval_Code(l3, v_res_var, env);
        release(l3);
        i0 = 0;
        V0[i0] = Exit_Block(env);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l3 = amp(v_case_code, l4, env);
        release(l4);
        release(v_case_code);
        v_case_code = l3;
        l4 = ext_lookup(v_c, S_ptrns);
        add_ref(l4);
        l3 = Reverse(l4, env);
        release(l4);
        get_seq_iter(q1, l3);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q1))
          {
            break;
          }
          v_p = get_curr_obj(q1);
          v_i = to_obj(i0);
          l7 = ext_lookup(v_info, S_exprs);
          add_ref(l7);
          l6 = Rev_At(l7, v_i, env);
          release(l7);
          l5 = Gen_Ptrn_Matching_Code(v_p, l6, v_tmp_bvar, env);
          release(l6);
          i1 = 0;
          V0[i1] = Do_If(v_tmp_bvar, v_case_code, env);
          i1 = i1 + 1;
          l6 = make_seq(V0, i1);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          release(v_case_code);
          v_case_code = l4;
          move_forward(q1);
          i0 = i0 + 1;
        }
        release(l3);
        release(env.n_next_obj_var_id);
        env.n_next_obj_var_id = BK1611;
        release(l2);
        l2 = amp(v_case_code, v_code, env);
        release(v_code);
        v_code = l2;
        release(v_case_code);
        move_forward(q0);
      }
      release(l1);
      i0 = 0;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l1 = make_seq(V0, i0);
      release(v_code);
      v_code = l1;
      l2 = ext_lookup(v_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_code, env);
      release(l2);
      l2 = ext_lookup(v_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_code);
      release(v_tmp_bvar);
      release(v_info);
      goto block_1610_end;
      block_1610_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1612_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_ex_qual);
    if (!b1)
    {
      goto block_1612_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1612_end:;
    if (b1)
    {
      v_action = Set_Found_Var_And_Leave(v_res_var, env);
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_expr, S_sel_expr);
        add_ref(l2);
        l1 = Action(l2, v_action, env);
        release(l2);
        release(v_action);
        v_action = l1;
      }
      l1 = ext_lookup(v_expr, S_source);
      add_ref(l1);
      v_code = Gen_Iter_Code(l1, v_action, env);
      release(l1);
      i0 = 0;
      l1 = Obj_False(env);
      V0[i0] = Set_Var(v_res_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      V0[i0] = Execute_Block(v_code, env);
      i0 = i0 + 1;
      l0 = make_seq(V0, i0);
      release(v_code);
      release(v_action);
      goto block_1613_end;
      block_1613_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1614_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_set_comp);
    if (!b1)
    {
      goto block_1614_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1614_end:;
    if (b1)
    {
      v_strm_var = Svar(env.n_next_stream_var_id, env);
      l1 = ext_lookup(v_expr, S_expr);
      add_ref(l1);
      v_action = Eval_Expr_And_Add_To_Set(l1, v_strm_var, env);
      release(l1);
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_expr, S_sel_expr);
        add_ref(l2);
        l1 = Action(l2, v_action, env);
        release(l2);
        release(v_action);
        v_action = l1;
      }
      l1 = plus(env.n_next_stream_var_id, to_obj(1), env);
      Obj BK1616 = env.n_next_stream_var_id;
      env.n_next_stream_var_id = l1;
      add_ref(env.n_next_stream_var_id);
      l2 = ext_lookup(v_expr, S_source);
      add_ref(l2);
      v_code = Gen_Iter_Code(l2, v_action, env);
      release(l2);
      release(env.n_next_stream_var_id);
      env.n_next_stream_var_id = BK1616;
      release(l1);
      i0 = 0;
      V0[i0] = Init_Stream(v_strm_var, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(l2, v_code, env);
      release(l2);
      i0 = 0;
      V0[i0] = Mk_Set_From_Stream(v_res_var, v_strm_var, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_code);
      release(v_action);
      release(v_strm_var);
      goto block_1615_end;
      block_1615_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1617_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_map_comp);
    if (!b1)
    {
      goto block_1617_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1617_end:;
    if (b1)
    {
      v_key_strm_var = Svar(env.n_next_stream_var_id, env);
      l1 = plus(env.n_next_stream_var_id, to_obj(1), env);
      v_value_strm_var = Svar(l1, env);
      release(l1);
      l1 = ext_lookup(v_expr, S_key_expr);
      add_ref(l1);
      l2 = ext_lookup(v_expr, S_value_expr);
      add_ref(l2);
      v_action = Eval_Exprs_And_Add_To_Map(l1, l2, v_key_strm_var, v_value_strm_var, env);
      release(l2);
      release(l1);
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_expr, S_sel_expr);
        add_ref(l2);
        l1 = Action(l2, v_action, env);
        release(l2);
        release(v_action);
        v_action = l1;
      }
      l1 = plus(env.n_next_stream_var_id, to_obj(2), env);
      Obj BK1619 = env.n_next_stream_var_id;
      env.n_next_stream_var_id = l1;
      add_ref(env.n_next_stream_var_id);
      l2 = ext_lookup(v_expr, S_source);
      add_ref(l2);
      v_code = Gen_Iter_Code(l2, v_action, env);
      release(l2);
      release(env.n_next_stream_var_id);
      env.n_next_stream_var_id = BK1619;
      release(l1);
      i0 = 0;
      V0[i0] = Init_Stream(v_key_strm_var, env);
      i0 = i0 + 1;
      V0[i0] = Init_Stream(v_value_strm_var, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = amp(l2, v_code, env);
      release(l2);
      i0 = 0;
      V0[i0] = Mk_Map_From_Streams(v_res_var, v_key_strm_var, v_value_strm_var, env);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_code);
      release(v_action);
      release(v_key_strm_var);
      release(v_value_strm_var);
      goto block_1618_end;
      block_1618_end:;
      goto block_1571_end;
    }
    if (!is_tag_obj(p0))
    {
      b1 = false;
      goto block_1620_end;
    }
    l1 = get_tag(p0);
    b1 = are_eq(l1, S_seq_comp);
    if (!b1)
    {
      goto block_1620_end;
    }
    l1 = get_inner_obj(p0);
    b1 = true;
    block_1620_end:;
    if (b1)
    {
      v_src_var = Lvar(env.n_next_obj_var_id, env);
      l1 = plus(env.n_next_obj_var_id, to_obj(1), env);
      v_item_var = Lvar(l1, env);
      release(l1);
      l1 = plus(env.n_next_obj_var_id, to_obj(2), env);
      v_sel_var = Lvar(l1, env);
      release(l1);
      v_it_var = Seq_It_Var(env.n_next_seq_it_var_id, env);
      v_strm_var = Svar(env.n_next_stream_var_id, env);
      v_idx_var = Ivar(env.n_next_int_var_id, env);
      l1 = plus(env.n_next_seq_it_var_id, to_obj(1), env);
      Obj BK1622 = env.n_next_seq_it_var_id;
      env.n_next_seq_it_var_id = l1;
      add_ref(env.n_next_seq_it_var_id);
      l2 = plus(env.n_next_obj_var_id, to_obj(3), env);
      Obj BK1623 = env.n_next_obj_var_id;
      env.n_next_obj_var_id = l2;
      add_ref(env.n_next_obj_var_id);
      l3 = plus(env.n_next_int_var_id, to_obj(1), env);
      Obj BK1624 = env.n_next_int_var_id;
      env.n_next_int_var_id = l3;
      add_ref(env.n_next_int_var_id);
      l4 = plus(env.n_next_stream_var_id, to_obj(1), env);
      Obj BK1625 = env.n_next_stream_var_id;
      env.n_next_stream_var_id = l4;
      add_ref(env.n_next_stream_var_id);
      l5 = ext_lookup(v_expr, S_src_expr);
      add_ref(l5);
      v_src_info = Gen_Eval_Info(l5, v_src_var, env);
      release(l5);
      l5 = ext_lookup(v_expr, S_expr);
      add_ref(l5);
      v_item_info = Gen_Eval_Info(l5, v_item_var, env);
      release(l5);
      l5 = ext_lookup(v_expr, S_sel_expr, b1);
      l5 = to_obj(b1);
      if (!(are_eq(l5, S_true) | are_eq(l5, S_false)))
      {
        fail();
      }
      if (are_eq(l5, S_true))
      {
        l5 = ext_lookup(v_expr, S_sel_expr);
        add_ref(l5);
        v_sel_info = Gen_Eval_Info(l5, v_sel_var, env);
        release(l5);
      }
      else
      {
        v_sel_info = S_nil;
      }
      release(env.n_next_stream_var_id);
      env.n_next_stream_var_id = BK1625;
      release(l4);
      release(env.n_next_int_var_id);
      env.n_next_int_var_id = BK1624;
      release(l3);
      release(env.n_next_obj_var_id);
      env.n_next_obj_var_id = BK1623;
      release(l2);
      release(env.n_next_seq_it_var_id);
      env.n_next_seq_it_var_id = BK1622;
      release(l1);
      v_needs_idx_var = ext_lookup(v_expr, S_sel_expr, b1);
      v_needs_idx_var = to_obj(b1);
      if (!(are_eq(v_needs_idx_var, S_true) | are_eq(v_needs_idx_var, S_false)))
      {
        fail();
      }
      if (are_eq(v_needs_idx_var, S_true))
      {
        v_needs_idx_var = S_false;
      }
      else
      {
        v_needs_idx_var = S_true;
      }
      if (!(are_eq(v_needs_idx_var, S_true) | are_eq(v_needs_idx_var, S_false)))
      {
        fail();
      }
      if (are_eq(v_needs_idx_var, S_false))
      {
        v_needs_idx_var = ext_lookup(v_expr, S_idx_var, b1);
        v_needs_idx_var = to_obj(b1);
        if (!(are_eq(v_needs_idx_var, S_true) | are_eq(v_needs_idx_var, S_false)))
        {
          fail();
        }
      }
      v_knows_size = ext_lookup(v_expr, S_sel_expr, b1);
      v_knows_size = to_obj(b1);
      if (!(are_eq(v_knows_size, S_true) | are_eq(v_knows_size, S_false)))
      {
        fail();
      }
      if (are_eq(v_knows_size, S_true))
      {
        v_knows_size = S_false;
      }
      else
      {
        v_knows_size = S_true;
      }
      l1 = ext_lookup(v_item_info, S_add_ref_eval_code);
      add_ref(l1);
      if (!(are_eq(v_knows_size, S_true) | are_eq(v_knows_size, S_false)))
      {
        fail();
      }
      if (are_eq(v_knows_size, S_true))
      {
        i0 = 0;
        l3 = ext_lookup(v_item_info, S_expr);
        add_ref(l3);
        V0[i0] = Set_At(v_res_var, v_idx_var, l3, env);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
      }
      else
      {
        i0 = 0;
        l3 = ext_lookup(v_item_info, S_expr);
        add_ref(l3);
        V0[i0] = Append(v_strm_var, l3, env);
        release(l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
      }
      v_eval_and_assign_code = amp(l1, l2, env);
      release(l2);
      release(l1);
      v_core_loop_code = v_eval_and_assign_code;
      add_ref(v_core_loop_code);
      l1 = ext_lookup(v_expr, S_sel_expr, b1);
      l1 = to_obj(b1);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l2 = ext_lookup(v_sel_info, S_eval_code);
        add_ref(l2);
        i0 = 0;
        l5 = ext_lookup(v_sel_info, S_expr);
        add_ref(l5);
        l4 = Is_Bool(l5, env);
        release(l5);
        V0[i0] = Check(l4, env);
        release(l4);
        i0 = i0 + 1;
        l5 = ext_lookup(v_sel_info, S_expr);
        add_ref(l5);
        l4 = Is_True(l5, env);
        release(l5);
        V0[i0] = Do_If(l4, v_core_loop_code, env);
        release(l4);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_core_loop_code);
        v_core_loop_code = l1;
      }
      i0 = 0;
      if (!(are_eq(v_knows_size, S_true) | are_eq(v_knows_size, S_false)))
      {
        fail();
      }
      if (are_eq(v_knows_size, S_true))
      {
        l2 = ext_lookup(v_src_info, S_expr);
        add_ref(l2);
        l1 = Get_Seq_Len(l2, env);
        release(l2);
        l2 = Obj_Nil(env);
        V0[i0] = Mk_Array(v_res_var, l1, l2, env);
        release(l2);
        release(l1);
      }
      else
      {
        V0[i0] = Init_Stream(v_strm_var, env);
      }
      i0 = i0 + 1;
      l1 = ext_lookup(v_src_info, S_expr);
      add_ref(l1);
      V0[i0] = Get_Iter(v_it_var, l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Set_Ivar(v_idx_var, to_obj(0), env);
      V0[i0] = Maybe_Op(l1, v_needs_idx_var, env);
      release(l1);
      i0 = i0 + 1;
      i1 = 0;
      l4 = Is_Out_Of_Range(v_it_var, env);
      V1[i1] = Break_If(l4, env);
      release(l4);
      i1 = i1 + 1;
      l4 = ext_lookup(v_expr, S_var);
      add_ref(l4);
      l5 = Get_Curr_Obj(v_it_var, env);
      V1[i1] = Set_Var(l4, l5, env);
      release(l5);
      release(l4);
      i1 = i1 + 1;
      l4 = ext_lookup(v_expr, S_idx_var, b1);
      l4 = to_obj(b1);
      if (!(are_eq(l4, S_true) | are_eq(l4, S_false)))
      {
        fail();
      }
      if (are_eq(l4, S_true))
      {
        l4 = ext_lookup(v_expr, S_idx_var);
        add_ref(l4);
        l5 = To_Obj(v_idx_var, env);
        V1[i1] = Set_Var(l4, l5, env);
        release(l5);
        release(l4);
      }
      else
      {
        V1[i1] = No_Op(env);
      }
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l2 = amp(l3, v_core_loop_code, env);
      release(l3);
      i1 = 0;
      V1[i1] = Move_Forward(v_it_var, env);
      i1 = i1 + 1;
      l4 = Increment(v_idx_var, env);
      V1[i1] = Maybe_Op(l4, v_needs_idx_var, env);
      release(l4);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      V0[i0] = Repeat(l1, env);
      release(l1);
      i0 = i0 + 1;
      l1 = Mk_Seq_From_Stream(v_res_var, v_strm_var, env);
      l2 = v_knows_size;
      add_ref(l2);
      if (!(are_eq(l2, S_true) | are_eq(l2, S_false)))
      {
        fail();
      }
      if (are_eq(l2, S_true))
      {
        l2 = S_false;
      }
      else
      {
        l2 = S_true;
      }
      V0[i0] = Maybe_Op(l1, l2, env);
      release(l2);
      release(l1);
      i0 = i0 + 1;
      v_loop_code = make_seq(V0, i0);
      l2 = ext_lookup(v_src_info, S_eval_code);
      add_ref(l2);
      l1 = amp(l2, v_loop_code, env);
      release(l2);
      l2 = ext_lookup(v_src_info, S_cleanup_code);
      add_ref(l2);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_idx_var);
      release(v_strm_var);
      release(v_src_var);
      release(v_item_var);
      release(v_sel_var);
      release(v_it_var);
      release(v_src_info);
      release(v_item_info);
      release(v_sel_info);
      release(v_needs_idx_var);
      release(v_knows_size);
      release(v_eval_and_assign_code);
      release(v_core_loop_code);
      release(v_loop_code);
      goto block_1621_end;
      block_1621_end:;
      goto block_1571_end;
    }
    fail();
    block_1571_end:;
    return l0;
  }
  
  
  Obj Compile_To_C(Obj p0, Env &env)
  {
    Obj v_name;
    Obj v_var;
    Obj v_body;
    Obj v_prg;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Stream t0;
    Obj l8;
    int i2;
    Stream t1;
    SetIter s0;
    Obj l9;
    int i3;
    SetIter s1;
    SeqIter q0;
    Obj l10;
    SeqIter q1;
    MapIter m0;
    Obj v_id;
    Obj v_arity;
    Obj v_header;
    Obj v_s;
    Obj v_n;
    Obj v_a;
    Obj v_i;
    Obj v_v;
    Obj V0[29];
    Obj V1[51];
    Obj v_scalar_vars;
    Obj v_p;
    Obj v_ts;
    Obj v_ls;
    Obj v_na;
    Obj v_tss;
    Obj v_btss;
    Obj v_ptss;
    Obj v_bool_proc_defs;
    Obj v_obj_proc_defs;
    Obj v_symbs;
    Obj v_symb_decls;
    Obj v_c_code;
    Obj v_symb_strs;
    Obj v_cls_defs;
    Obj v_cd;
    Obj v_new_cls_defs;
    Obj v_all_named_pars;
    Obj v_ars;
    Obj v_all_param_arity_pairs;
    Obj v_env_decl;
    Obj v_j;
    Obj v_sorted_cls_defs;
    Obj v_proc_code;
    Obj v_pd;
    Obj v_par_list;
    Obj v_signature;
    Obj v_vars_to_decl;
    Obj v_vector_vars;
    Obj v_vec_var_ids;
    Obj v_new_vec_vars;
    Obj v_var_decls;
    Obj v_comp_body;
  
    if (are_eq(p0, empty_set))
    {
      b1 = true;
      goto block_1627_end;
    }
    if (!is_ne_set(p0))
    {
      b1 = false;
      goto block_1627_end;
    }
    get_set_iter(s0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(s0))
      {
        break;
      }
      l1 = get_curr_obj(s0);
      b1 = is_procdef(l1);
      if (!b1)
      {
        goto block_1627_end;
      }
      move_forward(s0);
    }
    b1 = true;
    block_1627_end:;
    if (b1)
    {
      v_prg = p0;
    }
    if (b1)
    {
      Obj (*BF1629)(Obj, const Obj *, Env &) = env.n1_condition;
      const Obj *BD1629 = env.C1_condition;
      env.n1_condition = cls_33;
      env.C1_condition = 0;
      Obj (*BF1630)(Obj, const Obj *, Env &) = env.n1_eval;
      const Obj *BD1630 = env.C1_eval;
      env.n1_eval = cls_30;
      env.C1_eval = 0;
      v_tss = Select_Expr_Fn(v_prg, env);
      env.n1_eval = BF1630;
      env.C1_eval = BD1630;
      env.n1_condition = BF1629;
      env.C1_condition = BD1629;
      init(t0);
      get_set_iter(s0, v_tss);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        b1 = is_basictypesymbol(l2);
        if (b1)
        {
          v_ts = l2;
        }
        if (b1)
        {
          add_ref(v_ts);
          append(t0, v_ts);
        }
        move_forward(s0);
      }
      v_btss = make_set(t0);
      init(t0);
      get_set_iter(s0, v_tss);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        b1 = is_partypesymbol(l2);
        if (b1)
        {
          v_ts = l2;
        }
        if (b1)
        {
          add_ref(v_ts);
          append(t0, v_ts);
        }
        move_forward(s0);
      }
      v_ptss = make_set(t0);
      l1 = Rand_Sort(v_btss, env);
      release(v_btss);
      v_btss = l1;
      l1 = Rand_Sort(v_ptss, env);
      release(v_ptss);
      v_ptss = l1;
      init(t0);
      get_set_iter(s0, v_prg);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        b1 = is_boolprocdef(l3);
        if (b1)
        {
          v_p = l3;
        }
        if (b1)
        {
          add_ref(v_p);
          append(t0, v_p);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      v_bool_proc_defs = Rand_Sort(l1, env);
      release(l1);
      init(t0);
      get_set_iter(s0, v_prg);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l3 = get_curr_obj(s0);
        b1 = is_objprocdef(l3);
        if (b1)
        {
          v_p = l3;
        }
        if (b1)
        {
          add_ref(v_p);
          append(t0, v_p);
        }
        move_forward(s0);
      }
      l1 = make_set(t0);
      v_obj_proc_defs = Rand_Sort(l1, env);
      release(l1);
      Obj (*BF1631)(Obj, const Obj *, Env &) = env.n1_eval;
      const Obj *BD1631 = env.C1_eval;
      env.n1_eval = cls_8;
      env.C1_eval = 0;
      Obj (*BF1632)(Obj, const Obj *, Env &) = env.n1_condition;
      const Obj *BD1632 = env.C1_condition;
      env.n1_condition = cls_20;
      env.C1_condition = 0;
      l1 = Select_Expr_Fn(v_prg, env);
      env.n1_condition = BF1632;
      env.C1_condition = BD1632;
      env.n1_eval = BF1631;
      env.C1_eval = BD1631;
      i0 = 0;
      V0[i0] = make_tagged_obj(S_object, S_string);
      i0 = i0 + 1;
      V0[i0] = Obj_True(env);
      i0 = i0 + 1;
      V0[i0] = Obj_False(env);
      i0 = i0 + 1;
      l2 = make_set(V0, i0);
      v_symbs = amp(l1, l2, env);
      release(l2);
      release(l1);
      Obj (*BF1633)(Obj, Obj, const Obj *, Env &) = env.n2_is_strictly_ordered;
      const Obj *BD1633 = env.C2_is_strictly_ordered;
      env.n2_is_strictly_ordered = cls_2;
      env.C2_is_strictly_ordered = 0;
      l1 = Sort_Set(v_symbs, env);
      env.n2_is_strictly_ordered = BF1633;
      env.C2_is_strictly_ordered = BD1633;
      release(v_symbs);
      v_symbs = l1;
      l1 = make_array(get_seq_len(v_symbs), S_nil);
      get_seq_iter(q0, v_symbs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_s = get_curr_obj(q0);
        v_i = to_obj(i0);
        i1 = 0;
        V0[i1] = to_obj(99);
        i1 = i1 + 1;
        V0[i1] = to_obj(111);
        i1 = i1 + 1;
        V0[i1] = to_obj(110);
        i1 = i1 + 1;
        V0[i1] = to_obj(115);
        i1 = i1 + 1;
        V0[i1] = to_obj(116);
        i1 = i1 + 1;
        V0[i1] = to_obj(32);
        i1 = i1 + 1;
        V0[i1] = to_obj(79);
        i1 = i1 + 1;
        V0[i1] = to_obj(98);
        i1 = i1 + 1;
        V0[i1] = to_obj(106);
        i1 = i1 + 1;
        V0[i1] = to_obj(32);
        i1 = i1 + 1;
        l9 = make_seq(V0, i1);
        l8 = make_tagged_obj(S_string, l9);
        Obj (*BF1634)(Obj, const Obj *, Env &) = env.n1_typesymb2name;
        const Obj *BD1634 = env.C1_typesymb2name;
        Obj ND1634[1];
        ND1634[0] = v_ptss;
        add_ref(ND1634[0]);
        env.n1_typesymb2name = cls_14;
        env.C1_typesymb2name = ND1634;
        l9 = To_C_Expr(v_s, env);
        env.n1_typesymb2name = BF1634;
        env.C1_typesymb2name = BD1634;
        release(ND1634[0]);
        l7 = amp(l8, l9, env);
        release(l9);
        release(l8);
        i1 = 0;
        V0[i1] = to_obj(32);
        i1 = i1 + 1;
        V0[i1] = to_obj(61);
        i1 = i1 + 1;
        V0[i1] = to_obj(32);
        i1 = i1 + 1;
        l9 = make_seq(V0, i1);
        l8 = make_tagged_obj(S_string, l9);
        l6 = amp(l7, l8, env);
        release(l8);
        release(l7);
        l10 = plus(v_i, to_obj(1), env);
        l9 = star(to_obj(16), l10, env);
        release(l10);
        l8 = plus(l9, to_obj(1), env);
        release(l9);
        l7 = To_Str(l8, env);
        release(l8);
        l5 = amp(l6, l7, env);
        release(l7);
        release(l6);
        i1 = 0;
        V0[i1] = to_obj(59);
        i1 = i1 + 1;
        l7 = make_seq(V0, i1);
        l6 = make_tagged_obj(S_string, l7);
        l3 = amp(l5, l6, env);
        release(l6);
        release(l5);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l4 = empty_seq;
      l3 = make_tagged_obj(S_string, l4);
      l2 = Rep_Seq(to_obj(4), l3, env);
      release(l3);
      v_symb_decls = amp(l1, l2, env);
      release(l2);
      release(l1);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(99);
      i1 = i1 + 1;
      V1[i1] = to_obj(111);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(115);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(105);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(69);
      i1 = i1 + 1;
      V1[i1] = to_obj(77);
      i1 = i1 + 1;
      V1[i1] = to_obj(66);
      i1 = i1 + 1;
      V1[i1] = to_obj(95);
      i1 = i1 + 1;
      V1[i1] = to_obj(83);
      i1 = i1 + 1;
      V1[i1] = to_obj(89);
      i1 = i1 + 1;
      V1[i1] = to_obj(77);
      i1 = i1 + 1;
      V1[i1] = to_obj(66);
      i1 = i1 + 1;
      V1[i1] = to_obj(95);
      i1 = i1 + 1;
      V1[i1] = to_obj(67);
      i1 = i1 + 1;
      V1[i1] = to_obj(79);
      i1 = i1 + 1;
      V1[i1] = to_obj(85);
      i1 = i1 + 1;
      V1[i1] = to_obj(78);
      i1 = i1 + 1;
      V1[i1] = to_obj(84);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(61);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      l6 = make_seq(V1, i1);
      l5 = make_tagged_obj(S_string, l6);
      l7 = Length(v_symbs, env);
      l6 = To_Text(l7, env);
      release(l7);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      i1 = 0;
      V1[i1] = to_obj(59);
      i1 = i1 + 1;
      l6 = make_seq(V1, i1);
      l5 = make_tagged_obj(S_string, l6);
      V0[i0] = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = amp(v_symb_decls, l3, env);
      release(l3);
      l5 = empty_seq;
      l4 = make_tagged_obj(S_string, l5);
      l3 = Rep_Seq(to_obj(4), l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      release(v_symb_decls);
      v_symb_decls = l1;
      v_c_code = v_symb_decls;
      add_ref(v_c_code);
      l2 = empty_seq;
      l1 = to_obj(are_eq(v_symbs, l2));
      release(l2);
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        l1 = S_false;
      }
      else
      {
        l1 = S_true;
      }
      if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
      {
        fail();
      }
      if (are_eq(l1, S_true))
      {
        v_symb_strs = make_array(get_seq_len(v_symbs), S_nil);
        get_seq_iter(q0, v_symbs);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_s = get_curr_obj(q0);
          i1 = 0;
          V0[i1] = to_obj(32);
          i1 = i1 + 1;
          V0[i1] = to_obj(32);
          i1 = i1 + 1;
          V0[i1] = to_obj(34);
          i1 = i1 + 1;
          l6 = make_seq(V0, i1);
          l5 = make_tagged_obj(S_string, l6);
          l7 = Untag(v_s, env);
          l6 = to_str(l7);
          release(l7);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          i1 = 0;
          V0[i1] = to_obj(34);
          i1 = i1 + 1;
          V0[i1] = to_obj(44);
          i1 = i1 + 1;
          l6 = make_seq(V0, i1);
          l5 = make_tagged_obj(S_string, l6);
          l2 = amp(l4, l5, env);
          release(l5);
          release(l4);
          set_at(v_symb_strs, i0, l2);
          move_forward(q0);
          i0 = i0 + 1;
        }
        i0 = 0;
        i1 = 0;
        V1[i1] = to_obj(99);
        i1 = i1 + 1;
        V1[i1] = to_obj(111);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(99);
        i1 = i1 + 1;
        V1[i1] = to_obj(104);
        i1 = i1 + 1;
        V1[i1] = to_obj(97);
        i1 = i1 + 1;
        V1[i1] = to_obj(114);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(42);
        i1 = i1 + 1;
        V1[i1] = to_obj(109);
        i1 = i1 + 1;
        V1[i1] = to_obj(97);
        i1 = i1 + 1;
        V1[i1] = to_obj(112);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(121);
        i1 = i1 + 1;
        V1[i1] = to_obj(109);
        i1 = i1 + 1;
        V1[i1] = to_obj(98);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(111);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(114);
        i1 = i1 + 1;
        V1[i1] = to_obj(91);
        i1 = i1 + 1;
        V1[i1] = to_obj(69);
        i1 = i1 + 1;
        V1[i1] = to_obj(77);
        i1 = i1 + 1;
        V1[i1] = to_obj(66);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(83);
        i1 = i1 + 1;
        V1[i1] = to_obj(89);
        i1 = i1 + 1;
        V1[i1] = to_obj(77);
        i1 = i1 + 1;
        V1[i1] = to_obj(66);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(67);
        i1 = i1 + 1;
        V1[i1] = to_obj(79);
        i1 = i1 + 1;
        V1[i1] = to_obj(85);
        i1 = i1 + 1;
        V1[i1] = to_obj(78);
        i1 = i1 + 1;
        V1[i1] = to_obj(84);
        i1 = i1 + 1;
        V1[i1] = to_obj(93);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(61);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(123);
        i1 = i1 + 1;
        l6 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l6);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        l4 = amp(v_c_code, l5, env);
        release(l5);
        l3 = amp(l4, v_symb_strs, env);
        release(l4);
        i0 = 0;
        i1 = 0;
        V1[i1] = to_obj(125);
        i1 = i1 + 1;
        V1[i1] = to_obj(59);
        i1 = i1 + 1;
        l5 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l5);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l2 = amp(l3, l4, env);
        release(l4);
        release(l3);
        l5 = empty_seq;
        l4 = make_tagged_obj(S_string, l5);
        l3 = Rep_Seq(to_obj(4), l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_c_code);
        v_c_code = l1;
        i0 = 0;
        i1 = 0;
        V1[i1] = to_obj(101);
        i1 = i1 + 1;
        V1[i1] = to_obj(120);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(101);
        i1 = i1 + 1;
        V1[i1] = to_obj(114);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(99);
        i1 = i1 + 1;
        V1[i1] = to_obj(111);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(99);
        i1 = i1 + 1;
        V1[i1] = to_obj(104);
        i1 = i1 + 1;
        V1[i1] = to_obj(97);
        i1 = i1 + 1;
        V1[i1] = to_obj(114);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(42);
        i1 = i1 + 1;
        V1[i1] = to_obj(109);
        i1 = i1 + 1;
        V1[i1] = to_obj(97);
        i1 = i1 + 1;
        V1[i1] = to_obj(112);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(121);
        i1 = i1 + 1;
        V1[i1] = to_obj(109);
        i1 = i1 + 1;
        V1[i1] = to_obj(98);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(111);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(114);
        i1 = i1 + 1;
        V1[i1] = to_obj(91);
        i1 = i1 + 1;
        V1[i1] = to_obj(69);
        i1 = i1 + 1;
        V1[i1] = to_obj(77);
        i1 = i1 + 1;
        V1[i1] = to_obj(66);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(83);
        i1 = i1 + 1;
        V1[i1] = to_obj(89);
        i1 = i1 + 1;
        V1[i1] = to_obj(77);
        i1 = i1 + 1;
        V1[i1] = to_obj(66);
        i1 = i1 + 1;
        V1[i1] = to_obj(95);
        i1 = i1 + 1;
        V1[i1] = to_obj(67);
        i1 = i1 + 1;
        V1[i1] = to_obj(79);
        i1 = i1 + 1;
        V1[i1] = to_obj(85);
        i1 = i1 + 1;
        V1[i1] = to_obj(78);
        i1 = i1 + 1;
        V1[i1] = to_obj(84);
        i1 = i1 + 1;
        V1[i1] = to_obj(93);
        i1 = i1 + 1;
        V1[i1] = to_obj(59);
        i1 = i1 + 1;
        l4 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l4);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = amp(v_symb_decls, l3, env);
        release(l3);
        l5 = empty_seq;
        l4 = make_tagged_obj(S_string, l5);
        l3 = Rep_Seq(to_obj(4), l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        release(v_symb_decls);
        v_symb_decls = l1;
        release(v_symb_strs);
      }
      i0 = 0;
      V0[i0] = to_obj(83);
      i0 = i0 + 1;
      V0[i0] = to_obj(121);
      i0 = i0 + 1;
      V0[i0] = to_obj(109);
      i0 = i0 + 1;
      V0[i0] = to_obj(98);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(108);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      V0[i0] = to_obj(100);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(99);
      i0 = i0 + 1;
      V0[i0] = to_obj(108);
      i0 = i0 + 1;
      V0[i0] = to_obj(97);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(97);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(105);
      i0 = i0 + 1;
      V0[i0] = to_obj(111);
      i0 = i0 + 1;
      V0[i0] = to_obj(110);
      i0 = i0 + 1;
      V0[i0] = to_obj(115);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      V0[i0] = to_obj(103);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(110);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(114);
      i0 = i0 + 1;
      V0[i0] = to_obj(97);
      i0 = i0 + 1;
      V0[i0] = to_obj(116);
      i0 = i0 + 1;
      V0[i0] = to_obj(101);
      i0 = i0 + 1;
      V0[i0] = to_obj(100);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l1 = make_tagged_obj(S_string, l2);
      print(l1);
      release(l1);
      Obj (*BF1635)(Obj, const Obj *, Env &) = env.n1_eval;
      const Obj *BD1635 = env.C1_eval;
      env.n1_eval = cls_11;
      env.C1_eval = 0;
      Obj (*BF1636)(Obj, const Obj *, Env &) = env.n1_condition;
      const Obj *BD1636 = env.C1_condition;
      env.n1_condition = cls_23;
      env.C1_condition = 0;
      v_cls_defs = Select_Expr_Fn(v_prg, env);
      env.n1_condition = BF1636;
      env.C1_condition = BD1636;
      env.n1_eval = BF1635;
      env.C1_eval = BD1635;
      for ( ; ; )
      {
        Obj (*BF1637)(Obj, const Obj *, Env &) = env.n1_eval;
        const Obj *BD1637 = env.C1_eval;
        env.n1_eval = cls_11;
        env.C1_eval = 0;
        Obj (*BF1638)(Obj, const Obj *, Env &) = env.n1_condition;
        const Obj *BD1638 = env.C1_condition;
        env.n1_condition = cls_23;
        env.C1_condition = 0;
        init(t0);
        get_set_iter(s0, v_cls_defs);
        for ( ; ; )
        {
          if (is_out_of_range(s0))
          {
            break;
          }
          l3 = get_curr_obj(s0);
          v_cd = l3;
          b1 = true;
          if (b1)
          {
            l3 = ext_lookup(v_cd, S_body);
            add_ref(l3);
            append(t0, l3);
          }
          move_forward(s0);
        }
        l1 = make_set(t0);
        v_new_cls_defs = Select_Expr_Fn(l1, env);
        release(l1);
        env.n1_condition = BF1638;
        env.C1_condition = BD1638;
        env.n1_eval = BF1637;
        env.C1_eval = BD1637;
        l1 = Subset(v_new_cls_defs, v_cls_defs, env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          release(v_new_cls_defs);
          break;
        }
        l1 = amp(v_cls_defs, v_new_cls_defs, env);
        release(v_cls_defs);
        v_cls_defs = l1;
        release(v_new_cls_defs);
      }
      l2 = make_array(get_seq_len(v_obj_proc_defs), S_nil);
      get_seq_iter(q0, v_obj_proc_defs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_p = get_curr_obj(q0);
        l4 = ext_lookup(v_p, S_named_params);
        add_ref(l4);
        set_at(l2, i0, l4);
        move_forward(q0);
        i0 = i0 + 1;
      }
      l1 = Set(l2, env);
      release(l2);
      v_all_named_pars = Merge_Values(l1, env);
      release(l1);
      init(t0);
      get_map_iter(m0, v_all_named_pars);
      for ( ; ; )
      {
        if (is_out_of_range(m0))
        {
          break;
        }
        l3 = get_curr_key(m0);
        v_v = l3;
        b1 = true;
        if (b1)
        {
          l3 = get_curr_value(m0);
          v_ars = l3;
          b1 = true;
          if (b1)
          {
            get_set_iter(s1, v_ars);
            for ( ; ; )
            {
              if (is_out_of_range(s1))
              {
                break;
              }
              l4 = get_curr_obj(s1);
              v_a = l4;
              b1 = true;
              if (b1)
              {
                i0 = 0;
                V0[i0] = S_var;
                V1[i0] = v_v;
                add_ref(V1[i0]);
                i0 = i0 + 1;
                V0[i0] = S_arity;
                V1[i0] = v_a;
                add_ref(V1[i0]);
                i0 = i0 + 1;
                l4 = make_map(V0, V1, i0);
                append(t0, l4);
              }
              move_forward(s1);
            }
          }
        }
        move_forward(m0);
      }
      l1 = make_set(t0);
      v_all_param_arity_pairs = Rand_Sort(l1, env);
      release(l1);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(115);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(114);
      i1 = i1 + 1;
      V1[i1] = to_obj(117);
      i1 = i1 + 1;
      V1[i1] = to_obj(99);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(69);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(118);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(123);
      i1 = i1 + 1;
      l1 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l1);
      i0 = i0 + 1;
      v_env_decl = make_seq(V0, i0);
      get_seq_iter(q0, v_all_param_arity_pairs);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_na = get_curr_obj(q0);
        v_i = to_obj(i0);
        v_var = ext_lookup(v_na, S_var);
        add_ref(v_var);
        v_arity = ext_lookup(v_na, S_arity);
        add_ref(v_arity);
        l1 = Untag(v_var, env);
        v_name = to_str(l1);
        release(l1);
        l1 = greater(v_arity, to_obj(0), env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i1 = 0;
          i2 = 0;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(79);
          i2 = i2 + 1;
          V1[i2] = to_obj(98);
          i2 = i2 + 1;
          V1[i2] = to_obj(106);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(40);
          i2 = i2 + 1;
          V1[i2] = to_obj(42);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          l7 = make_seq(V1, i2);
          l6 = make_tagged_obj(S_string, l7);
          l7 = To_Str(v_arity, env);
          l5 = amp(l6, l7, env);
          release(l7);
          release(l6);
          i2 = 0;
          V1[i2] = to_obj(95);
          i2 = i2 + 1;
          l7 = make_seq(V1, i2);
          l6 = make_tagged_obj(S_string, l7);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          l3 = amp(l4, v_name, env);
          release(l4);
          i2 = 0;
          V1[i2] = to_obj(41);
          i2 = i2 + 1;
          V1[i2] = to_obj(40);
          i2 = i2 + 1;
          l5 = make_seq(V1, i2);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l8 = ext_lookup(v_na, S_arity);
          add_ref(l8);
          l5 = Inc_Seq(l8, env);
          release(l8);
          l4 = make_array(get_seq_len(l5), S_nil);
          get_seq_iter(q1, l5);
          i2 = 0;
          for ( ; ; )
          {
            if (is_out_of_range(q1))
            {
              break;
            }
            v_j = get_curr_obj(q1);
            i3 = 0;
            V1[i3] = to_obj(79);
            i3 = i3 + 1;
            V1[i3] = to_obj(98);
            i3 = i3 + 1;
            V1[i3] = to_obj(106);
            i3 = i3 + 1;
            V1[i3] = to_obj(32);
            i3 = i3 + 1;
            V1[i3] = to_obj(112);
            i3 = i3 + 1;
            l10 = make_seq(V1, i3);
            l9 = make_tagged_obj(S_string, l10);
            l10 = To_Str(v_j, env);
            l8 = amp(l9, l10, env);
            release(l10);
            release(l9);
            i3 = 0;
            V1[i3] = to_obj(44);
            i3 = i3 + 1;
            V1[i3] = to_obj(32);
            i3 = i3 + 1;
            l10 = make_seq(V1, i3);
            l9 = make_tagged_obj(S_string, l10);
            l6 = amp(l8, l9, env);
            release(l9);
            release(l8);
            set_at(l4, i2, l6);
            move_forward(q1);
            i2 = i2 + 1;
          }
          release(l5);
          l3 = Append(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i2 = 0;
          V1[i2] = to_obj(99);
          i2 = i2 + 1;
          V1[i2] = to_obj(111);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          V1[i2] = to_obj(115);
          i2 = i2 + 1;
          V1[i2] = to_obj(116);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(79);
          i2 = i2 + 1;
          V1[i2] = to_obj(98);
          i2 = i2 + 1;
          V1[i2] = to_obj(106);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(42);
          i2 = i2 + 1;
          V1[i2] = to_obj(67);
          i2 = i2 + 1;
          V1[i2] = to_obj(44);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(69);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          V1[i2] = to_obj(118);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(38);
          i2 = i2 + 1;
          V1[i2] = to_obj(101);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          V1[i2] = to_obj(118);
          i2 = i2 + 1;
          V1[i2] = to_obj(41);
          i2 = i2 + 1;
          V1[i2] = to_obj(59);
          i2 = i2 + 1;
          l3 = make_seq(V1, i2);
          l2 = make_tagged_obj(S_string, l3);
          V0[i1] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i1 = i1 + 1;
          i2 = 0;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(99);
          i2 = i2 + 1;
          V1[i2] = to_obj(111);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          V1[i2] = to_obj(115);
          i2 = i2 + 1;
          V1[i2] = to_obj(116);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(79);
          i2 = i2 + 1;
          V1[i2] = to_obj(98);
          i2 = i2 + 1;
          V1[i2] = to_obj(106);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(42);
          i2 = i2 + 1;
          V1[i2] = to_obj(67);
          i2 = i2 + 1;
          l5 = make_seq(V1, i2);
          l4 = make_tagged_obj(S_string, l5);
          l5 = To_Str(v_arity, env);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          i2 = 0;
          V1[i2] = to_obj(95);
          i2 = i2 + 1;
          l5 = make_seq(V1, i2);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = amp(l2, v_name, env);
          release(l2);
          i2 = 0;
          V1[i2] = to_obj(59);
          i2 = i2 + 1;
          l3 = make_seq(V1, i2);
          l2 = make_tagged_obj(S_string, l3);
          V0[i1] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i1 = i1 + 1;
          v_ls = make_seq(V0, i1);
        }
        else
        {
          i1 = 0;
          i2 = 0;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(79);
          i2 = i2 + 1;
          V1[i2] = to_obj(98);
          i2 = i2 + 1;
          V1[i2] = to_obj(106);
          i2 = i2 + 1;
          V1[i2] = to_obj(32);
          i2 = i2 + 1;
          V1[i2] = to_obj(110);
          i2 = i2 + 1;
          V1[i2] = to_obj(95);
          i2 = i2 + 1;
          l3 = make_seq(V1, i2);
          l2 = make_tagged_obj(S_string, l3);
          l1 = amp(l2, v_name, env);
          release(l2);
          i2 = 0;
          V1[i2] = to_obj(59);
          i2 = i2 + 1;
          l3 = make_seq(V1, i2);
          l2 = make_tagged_obj(S_string, l3);
          V0[i1] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i1 = i1 + 1;
          v_ls = make_seq(V0, i1);
        }
        l1 = greater(v_i, to_obj(0), env);
        if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
        {
          fail();
        }
        if (are_eq(l1, S_true))
        {
          i1 = 0;
          l3 = empty_seq;
          V0[i1] = make_tagged_obj(S_string, l3);
          i1 = i1 + 1;
          l2 = make_seq(V0, i1);
          l1 = amp(l2, v_ls, env);
          release(l2);
          release(v_ls);
          v_ls = l1;
        }
        l1 = amp(v_env_decl, v_ls, env);
        release(v_env_decl);
        v_env_decl = l1;
        release(v_name);
        release(v_var);
        release(v_arity);
        release(v_ls);
        move_forward(q0);
        i0 = i0 + 1;
      }
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(125);
      i1 = i1 + 1;
      V1[i1] = to_obj(59);
      i1 = i1 + 1;
      l4 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l4);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = amp(v_env_decl, l3, env);
      release(l3);
      l5 = empty_seq;
      l4 = make_tagged_obj(S_string, l5);
      l3 = Rep_Seq(to_obj(4), l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      release(v_env_decl);
      v_env_decl = l1;
      l1 = amp(v_c_code, v_env_decl, env);
      release(v_c_code);
      v_c_code = l1;
      v_sorted_cls_defs = Rand_Sort(v_cls_defs, env);
      Obj (*BF1639)(Obj, const Obj *, Env &) = env.n1_cls2id;
      const Obj *BD1639 = env.C1_cls2id;
      Obj ND1639[1];
      ND1639[0] = v_sorted_cls_defs;
      add_ref(ND1639[0]);
      env.n1_cls2id = cls_3;
      env.C1_cls2id = ND1639;
      Obj (*BF1640)(Obj, const Obj *, Env &) = env.n1_typesymb2name;
      const Obj *BD1640 = env.C1_typesymb2name;
      Obj ND1640[1];
      ND1640[0] = v_ptss;
      add_ref(ND1640[0]);
      env.n1_typesymb2name = cls_13;
      env.C1_typesymb2name = ND1640;
      v_proc_code = Compile_To_C(v_obj_proc_defs, v_bool_proc_defs, v_sorted_cls_defs, env);
      env.n1_typesymb2name = BF1640;
      env.C1_typesymb2name = BD1640;
      release(ND1640[0]);
      env.n1_cls2id = BF1639;
      env.C1_cls2id = BD1639;
      release(ND1639[0]);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(35);
      i1 = i1 + 1;
      V1[i1] = to_obj(105);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(99);
      i1 = i1 + 1;
      V1[i1] = to_obj(108);
      i1 = i1 + 1;
      V1[i1] = to_obj(117);
      i1 = i1 + 1;
      V1[i1] = to_obj(100);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(34);
      i1 = i1 + 1;
      V1[i1] = to_obj(108);
      i1 = i1 + 1;
      V1[i1] = to_obj(105);
      i1 = i1 + 1;
      V1[i1] = to_obj(98);
      i1 = i1 + 1;
      V1[i1] = to_obj(46);
      i1 = i1 + 1;
      V1[i1] = to_obj(104);
      i1 = i1 + 1;
      V1[i1] = to_obj(34);
      i1 = i1 + 1;
      V1[i1] = to_obj(10);
      i1 = i1 + 1;
      V1[i1] = to_obj(10);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l3 = empty_seq;
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      i1 = 0;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(109);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(115);
      i1 = i1 + 1;
      V1[i1] = to_obj(112);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(99);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(103);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(114);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(100);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      i1 = 0;
      V1[i1] = to_obj(123);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l5 = ext_lookup(v_proc_code, S_body);
      add_ref(l5);
      l4 = amp(v_c_code, l5, env);
      release(l5);
      l3 = Indent(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(125);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      v_body = amp(l1, l2, env);
      release(l2);
      release(l1);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(109);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(115);
      i1 = i1 + 1;
      V1[i1] = to_obj(112);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(99);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(32);
      i1 = i1 + 1;
      V1[i1] = to_obj(103);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(110);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(114);
      i1 = i1 + 1;
      V1[i1] = to_obj(97);
      i1 = i1 + 1;
      V1[i1] = to_obj(116);
      i1 = i1 + 1;
      V1[i1] = to_obj(101);
      i1 = i1 + 1;
      V1[i1] = to_obj(100);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      i1 = 0;
      V1[i1] = to_obj(123);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l5 = amp(v_symb_decls, v_env_decl, env);
      l6 = ext_lookup(v_proc_code, S_header);
      add_ref(l6);
      l4 = amp(l5, l6, env);
      release(l6);
      release(l5);
      l3 = Indent(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(125);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      v_header = amp(l1, l2, env);
      release(l2);
      release(l1);
      i0 = 0;
      V0[i0] = S_body;
      V1[i0] = v_body;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      V0[i0] = S_header;
      V1[i0] = v_header;
      add_ref(V1[i0]);
      i0 = i0 + 1;
      l0 = make_map(V0, V1, i0);
      release(v_body);
      release(v_header);
      release(v_tss);
      release(v_btss);
      release(v_ptss);
      release(v_bool_proc_defs);
      release(v_obj_proc_defs);
      release(v_symbs);
      release(v_symb_decls);
      release(v_c_code);
      release(v_cls_defs);
      release(v_all_named_pars);
      release(v_all_param_arity_pairs);
      release(v_env_decl);
      release(v_sorted_cls_defs);
      release(v_proc_code);
      goto block_1628_end;
      block_1628_end:;
      goto block_1626_end;
    }
    b1 = is_procdef(p0);
    if (b1)
    {
      v_pd = p0;
    }
    if (b1)
    {
      l5 = Compile_To_C__Arity(v_pd, env);
      l2 = Inc_Seq(l5, env);
      release(l5);
      l1 = make_array(get_seq_len(l2), S_nil);
      get_seq_iter(q0, l2);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_n = get_curr_obj(q0);
        i1 = 0;
        V0[i1] = to_obj(79);
        i1 = i1 + 1;
        V0[i1] = to_obj(98);
        i1 = i1 + 1;
        V0[i1] = to_obj(106);
        i1 = i1 + 1;
        V0[i1] = to_obj(32);
        i1 = i1 + 1;
        V0[i1] = to_obj(112);
        i1 = i1 + 1;
        l6 = make_seq(V0, i1);
        l5 = make_tagged_obj(S_string, l6);
        l6 = To_Str(v_n, env);
        l3 = amp(l5, l6, env);
        release(l6);
        release(l5);
        set_at(l1, i0, l3);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l2);
      l2 = Compile_To_C__Extra_Params(v_pd, env);
      v_par_list = amp(l1, l2, env);
      release(l2);
      release(l1);
      l4 = Compile_To_C__Ret_Type_Str(v_pd, env);
      l6 = ext_lookup(v_pd, S_name);
      add_ref(l6);
      l5 = To_C_Fn_Name(l6, env);
      release(l6);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = 0;
      V0[i0] = to_obj(40);
      i0 = i0 + 1;
      l5 = make_seq(V0, i0);
      l4 = make_tagged_obj(S_string, l5);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      i0 = 0;
      V0[i0] = to_obj(44);
      i0 = i0 + 1;
      V0[i0] = to_obj(32);
      i0 = i0 + 1;
      l6 = make_seq(V0, i0);
      l5 = make_tagged_obj(S_string, l6);
      l4 = Intermix(v_par_list, l5, env);
      release(l5);
      l3 = Append(l4, env);
      release(l4);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      V0[i0] = to_obj(41);
      i0 = i0 + 1;
      l3 = make_seq(V0, i0);
      l2 = make_tagged_obj(S_string, l3);
      v_signature = amp(l1, l2, env);
      release(l2);
      release(l1);
      v_body = ext_lookup(v_pd, S_body);
      add_ref(v_body);
      v_vars_to_decl = Vars_To_Declare(v_body, env);
      init(t0);
      get_set_iter(s0, v_vars_to_decl);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        b1 = is_vecvar(l2);
        if (b1)
        {
          v_v = l2;
        }
        if (b1)
        {
          add_ref(v_v);
          append(t0, v_v);
        }
        move_forward(s0);
      }
      v_vector_vars = make_set(t0);
      v_scalar_vars = minus(v_vars_to_decl, v_vector_vars, env);
      init(t0);
      get_set_iter(s0, v_vector_vars);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_v = l2;
        b1 = true;
        if (b1)
        {
          l2 = ext_lookup(v_v, S_id);
          add_ref(l2);
          append(t0, l2);
        }
        move_forward(s0);
      }
      v_vec_var_ids = make_set(t0);
      init(t0);
      get_set_iter(s0, v_vec_var_ids);
      for ( ; ; )
      {
        if (is_out_of_range(s0))
        {
          break;
        }
        l2 = get_curr_obj(s0);
        v_id = l2;
        b1 = true;
        if (b1)
        {
          init(t1);
          get_set_iter(s1, v_vector_vars);
          for ( ; ; )
          {
            if (is_out_of_range(s1))
            {
              break;
            }
            l6 = get_curr_obj(s1);
            v_v = l6;
            b1 = true;
            if (b1)
            {
              l7 = ext_lookup(v_v, S_id);
              add_ref(l7);
              l6 = to_obj(are_eq(l7, v_id));
              release(l7);
              if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
              {
                fail();
              }
              if (are_eq(l6, S_true))
              {
                l6 = ext_lookup(v_v, S_size);
                add_ref(l6);
                append(t1, l6);
              }
            }
            move_forward(s1);
          }
          l4 = make_set(t1);
          l3 = Max(l4, env);
          release(l4);
          l2 = Vvar(v_id, l3, env);
          release(l3);
          append(t0, l2);
        }
        move_forward(s0);
      }
      v_new_vec_vars = make_set(t0);
      release(v_vars_to_decl);
      v_vars_to_decl = amp(v_scalar_vars, v_new_vec_vars, env);
      l1 = Rand_Sort(v_vars_to_decl, env);
      v_var_decls = make_array(get_seq_len(l1), S_nil);
      get_seq_iter(q0, l1);
      i0 = 0;
      for ( ; ; )
      {
        if (is_out_of_range(q0))
        {
          break;
        }
        v_v = get_curr_obj(q0);
        l2 = Var_Decl(v_v, env);
        set_at(v_var_decls, i0, l2);
        move_forward(q0);
        i0 = i0 + 1;
      }
      release(l1);
      v_comp_body = Compile_To_C(v_body, S_nil, env);
      i0 = 0;
      V0[i0] = v_signature;
      add_ref(V0[i0]);
      i0 = i0 + 1;
      i1 = 0;
      V1[i1] = to_obj(123);
      i1 = i1 + 1;
      l5 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l5 = Indent(v_var_decls, env);
      l3 = amp(l4, l5, env);
      release(l5);
      release(l4);
      i0 = 0;
      l5 = empty_seq;
      V0[i0] = make_tagged_obj(S_string, l5);
      i0 = i0 + 1;
      l4 = make_seq(V0, i0);
      l2 = amp(l3, l4, env);
      release(l4);
      release(l3);
      l3 = Indent(v_comp_body, env);
      l1 = amp(l2, l3, env);
      release(l3);
      release(l2);
      i0 = 0;
      i1 = 0;
      V1[i1] = to_obj(125);
      i1 = i1 + 1;
      l3 = make_seq(V1, i1);
      V0[i0] = make_tagged_obj(S_string, l3);
      i0 = i0 + 1;
      l2 = make_seq(V0, i0);
      l0 = amp(l1, l2, env);
      release(l2);
      release(l1);
      release(v_body);
      release(v_scalar_vars);
      release(v_par_list);
      release(v_signature);
      release(v_vars_to_decl);
      release(v_vector_vars);
      release(v_vec_var_ids);
      release(v_new_vec_vars);
      release(v_var_decls);
      release(v_comp_body);
      goto block_1641_end;
      block_1641_end:;
      goto block_1626_end;
    }
    fail();
    block_1626_end:;
    return l0;
  }
  
  
  Obj Compile_To_C(Obj p0, Obj p1, Env &env)
  {
    Obj v_label;
    Obj v_cond;
    Obj v_var;
    Obj v_body;
    Obj l0;
    Obj l1;
    Obj l2;
    Obj l3;
    Obj l4;
    Obj l5;
    Obj l6;
    bool b1;
    int i0;
    Obj l7;
    int i1;
    Obj l8;
    Obj l9;
    SeqIter q0;
    SeqIter q1;
    Obj v_id;
    Obj v_when_true;
    Obj v_when_false;
    Obj v_val;
    Obj v_instrs;
    Obj v_env;
    Obj v_arity;
    Obj v_code;
    Obj v_s;
    Obj v_n;
    Obj v_e;
    Obj v_i;
    Obj v_v;
    Obj V1[13];
    Obj V0[15];
    Obj v_instr;
    Obj v_c;
    Obj v_case_code;
    Obj v_body_code;
    Obj v_cd;
    Obj v_par_list;
    Obj v_signature;
    Obj v_vars_to_decl;
    Obj v_var_decls;
    Obj v_comp_body;
    Obj v_block_id;
    Obj v_new_block_id;
    Obj v_scope_id;
    Obj v_val_str;
    Obj v_env_var;
    Obj v_bk_var;
    Obj v_env_size;
    Obj v_var_str;
    Obj v_arity_str;
    Obj v_env_size_str;
    Obj v_fn_var;
    Obj v_data_var;
    Obj v_fn_bk_var;
    Obj v_data_bk_var;
    Obj v_new_data_var;
    Obj v_tmp;
  
    b1 = is_instr(p0);
    if (b1)
    {
      v_instr = p0;
    }
    if (b1)
    {
      b1 = are_eq(S_nil, p1);
      if (b1)
      {
        goto block_1643_end;
      }
      b1 = is_nat(p1);
      if (b1)
      {
        goto block_1643_end;
      }
      block_1643_end:;
      if (b1)
      {
        v_block_id = p1;
      }
      if (b1)
      {
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1645_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_init_stream);
        if (!b1)
        {
          goto block_1645_end;
        }
        l1 = get_inner_obj(p0);
        v_v = l1;
        b1 = true;
        block_1645_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = v_v;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1646_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_append);
        if (!b1)
        {
          goto block_1646_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1646_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(100);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_stream);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_obj);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1647_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_set_from_stream);
        if (!b1)
        {
          goto block_1647_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1647_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_stream);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1648_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_set);
        if (!b1)
        {
          goto block_1648_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1648_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_elems);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_size);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1649_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_seq_from_stream);
        if (!b1)
        {
          goto block_1649_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1649_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_stream);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1650_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_seq);
        if (!b1)
        {
          goto block_1650_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1650_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_elems);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_size);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1651_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_map_from_streams);
        if (!b1)
        {
          goto block_1651_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1651_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_key_stream);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_value_stream);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1652_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_map);
        if (!b1)
        {
          goto block_1652_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1652_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_keys);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_values);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_size);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1653_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_tagged_obj);
        if (!b1)
        {
          goto block_1653_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1653_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(100);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(98);
          i0 = i0 + 1;
          V0[i0] = to_obj(106);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_tag);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_obj);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1654_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_mk_array);
        if (!b1)
        {
          goto block_1654_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1654_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(121);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_size);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_value);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1655_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_seq_slice);
        if (!b1)
        {
          goto block_1655_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1655_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(99);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_seq);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_idx_first);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_len);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1656_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_join_seqs);
        if (!b1)
        {
          goto block_1656_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1656_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(106);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_left);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_right);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1657_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_rev_seq);
        if (!b1)
        {
          goto block_1657_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1657_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(118);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_seq);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1658_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_at);
        if (!b1)
        {
          goto block_1658_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1658_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_seq);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_idx);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1659_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_at);
        if (!b1)
        {
          goto block_1659_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1659_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_idx);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_value);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1660_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_lookup);
        if (!b1)
        {
          goto block_1660_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1660_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_map);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_key);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l6 = ext_lookup(v_instr, S_success_var, b1);
          l6 = to_obj(b1);
          if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
          {
            fail();
          }
          if (are_eq(l6, S_true))
          {
            i0 = 0;
            V0[i0] = ext_lookup(v_instr, S_success_var);
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l5 = make_seq(V0, i0);
          }
          else
          {
            l5 = empty_seq;
          }
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1661_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_ext_lookup);
        if (!b1)
        {
          goto block_1661_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1661_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(120);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(107);
          i0 = i0 + 1;
          V0[i0] = to_obj(117);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_map);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_key);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l6 = ext_lookup(v_instr, S_success_var, b1);
          l6 = to_obj(b1);
          if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
          {
            fail();
          }
          if (are_eq(l6, S_true))
          {
            i0 = 0;
            V0[i0] = ext_lookup(v_instr, S_success_var);
            add_ref(V0[i0]);
            i0 = i0 + 1;
            l5 = make_seq(V0, i0);
          }
          else
          {
            l5 = empty_seq;
          }
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1662_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_merge_maps);
        if (!b1)
        {
          goto block_1662_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1662_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_map1);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_map2);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1663_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_to_set);
        if (!b1)
        {
          goto block_1663_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1663_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_seq);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1664_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_seq_to_mset);
        if (!b1)
        {
          goto block_1664_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1664_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_seq);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1665_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_list_to_seq);
        if (!b1)
        {
          goto block_1665_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1665_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_list);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1666_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_internal_sort);
        if (!b1)
        {
          goto block_1666_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1666_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          i0 = 0;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_set);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1667_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_set_iter);
        if (!b1)
        {
          goto block_1667_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1667_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_src);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1668_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_seq_iter);
        if (!b1)
        {
          goto block_1668_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1668_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(113);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_src);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1669_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_get_map_iter);
        if (!b1)
        {
          goto block_1669_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1669_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(103);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_var);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          V0[i0] = ext_lookup(v_instr, S_src);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1670_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_move_forward);
        if (!b1)
        {
          goto block_1670_end;
        }
        l1 = get_inner_obj(p0);
        v_v = l1;
        b1 = true;
        block_1670_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(109);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(118);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(102);
          i0 = i0 + 1;
          V0[i0] = to_obj(111);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(119);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(100);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = v_v;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1671_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_var);
        if (!b1)
        {
          goto block_1671_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1671_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          l2 = ext_lookup(v_instr, S_value);
          add_ref(l2);
          l0 = Mk_Assignment(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1672_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_bvar);
        if (!b1)
        {
          goto block_1672_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1672_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          l2 = ext_lookup(v_instr, S_value);
          add_ref(l2);
          l0 = Mk_Assignment(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1673_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_set_ivar);
        if (!b1)
        {
          goto block_1673_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1673_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          l2 = ext_lookup(v_instr, S_value);
          add_ref(l2);
          l0 = Mk_Assignment(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        b1 = are_eq(p0, S_terminate);
        if (b1)
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(102);
          i1 = i1 + 1;
          V1[i1] = to_obj(97);
          i1 = i1 + 1;
          V1[i1] = to_obj(105);
          i1 = i1 + 1;
          V1[i1] = to_obj(108);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l1 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l1);
          i0 = i0 + 1;
          l0 = make_seq(V0, i0);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1674_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_add_ref);
        if (!b1)
        {
          goto block_1674_end;
        }
        l1 = get_inner_obj(p0);
        v_v = l1;
        b1 = true;
        block_1674_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(100);
          i0 = i0 + 1;
          V0[i0] = to_obj(100);
          i0 = i0 + 1;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(102);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = v_v;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1675_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_release);
        if (!b1)
        {
          goto block_1675_end;
        }
        l1 = get_inner_obj(p0);
        v_v = l1;
        b1 = true;
        block_1675_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(108);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(97);
          i0 = i0 + 1;
          V0[i0] = to_obj(115);
          i0 = i0 + 1;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = v_v;
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1676_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_print_obj);
        if (!b1)
        {
          goto block_1676_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1676_end:;
        if (b1)
        {
          i0 = 0;
          V0[i0] = to_obj(112);
          i0 = i0 + 1;
          V0[i0] = to_obj(114);
          i0 = i0 + 1;
          V0[i0] = to_obj(105);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(116);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          i0 = 0;
          V0[i0] = ext_lookup(v_instr, S_obj);
          add_ref(V0[i0]);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = Mk_Call(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1677_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_ret_val);
        if (!b1)
        {
          goto block_1677_end;
        }
        l1 = get_inner_obj(p0);
        v_e = l1;
        b1 = true;
        block_1677_end:;
        if (b1)
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(116);
          i1 = i1 + 1;
          V1[i1] = to_obj(117);
          i1 = i1 + 1;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_C_Expr(v_e, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          l0 = make_seq(V0, i0);
          goto block_1644_end;
        }
        b1 = are_eq(p0, S_no_op);
        if (b1)
        {
          l0 = empty_seq;
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1678_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_repeat);
        if (!b1)
        {
          goto block_1678_end;
        }
        l1 = get_inner_obj(p0);
        v_body = l1;
        b1 = true;
        block_1678_end:;
        if (b1)
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(102);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(123);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l4 = Compile_To_C(v_body, v_block_id, env);
          l3 = Indent(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(125);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l0 = amp(l1, l2, env);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        b1 = are_eq(p0, S_break_loop);
        if (b1)
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(97);
          i1 = i1 + 1;
          V1[i1] = to_obj(107);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l1 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l1);
          i0 = i0 + 1;
          l0 = make_seq(V0, i0);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1679_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_execute_block);
        if (!b1)
        {
          goto block_1679_end;
        }
        l1 = get_inner_obj(p0);
        v_body = l1;
        b1 = true;
        block_1679_end:;
        if (b1)
        {
          v_new_block_id = to_obj(unique_int());
          v_body_code = Compile_To_C(v_body, v_new_block_id, env);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(108);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(107);
          i1 = i1 + 1;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_Str(v_new_block_id, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(100);
          i1 = i1 + 1;
          V1[i1] = to_obj(58);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          v_label = make_seq(V0, i0);
          l0 = amp(v_body_code, v_label, env);
          release(v_label);
          release(v_body_code);
          release(v_new_block_id);
          goto block_1680_end;
          block_1680_end:;
          goto block_1644_end;
        }
        b1 = are_eq(p0, S_exit_block);
        if (b1)
        {
          l1 = to_obj(are_eq(v_block_id, S_nil));
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!are_eq(l1, S_true))
          {
            fail();
          }
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(103);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(116);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(108);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(107);
          i1 = i1 + 1;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          l3 = To_Str(v_block_id, env);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(100);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          l0 = make_seq(V0, i0);
          goto block_1681_end;
          block_1681_end:;
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1682_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_call_proc);
        if (!b1)
        {
          goto block_1682_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1682_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          l3 = ext_lookup(v_instr, S_name);
          add_ref(l3);
          l2 = To_C_Fn_Name(l3, env);
          release(l3);
          l3 = ext_lookup(v_instr, S_params);
          add_ref(l3);
          l0 = Mk_Fn_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1683_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_call_cls);
        if (!b1)
        {
          goto block_1683_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1683_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_var);
          add_ref(l1);
          l2 = ext_lookup(v_instr, S_cls_var);
          add_ref(l2);
          l3 = ext_lookup(v_instr, S_params);
          add_ref(l3);
          l0 = Mk_Cls_Call(l1, l2, l3, env);
          release(l3);
          release(l2);
          release(l1);
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1684_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_branch);
        if (!b1)
        {
          goto block_1684_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1684_end:;
        if (b1)
        {
          l1 = ext_lookup(v_instr, S_when_true, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_false))
          {
            l1 = ext_lookup(v_instr, S_when_false, b1);
            l1 = to_obj(b1);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
          }
          if (!are_eq(l1, S_true))
          {
            fail();
          }
          v_cond = ext_lookup(v_instr, S_cond);
          add_ref(v_cond);
          v_when_true = empty_seq;
          v_when_false = empty_seq;
          l1 = ext_lookup(v_instr, S_when_true, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            release(v_when_true);
            v_when_true = ext_lookup(v_instr, S_when_true);
            add_ref(v_when_true);
            l1 = ext_lookup(v_instr, S_when_false, b1);
            l1 = to_obj(b1);
            if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
            {
              fail();
            }
            if (are_eq(l1, S_true))
            {
              release(v_when_false);
              v_when_false = ext_lookup(v_instr, S_when_false);
              add_ref(v_when_false);
            }
          }
          else
          {
            l1 = Neg(v_cond, env);
            release(v_cond);
            v_cond = l1;
            release(v_when_true);
            v_when_true = ext_lookup(v_instr, S_when_false);
            add_ref(v_when_true);
          }
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(105);
          i1 = i1 + 1;
          V1[i1] = to_obj(102);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l5 = To_C_Expr(v_cond, env);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(123);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l4 = Compile_To_C(v_when_true, v_block_id, env);
          l3 = Indent(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(125);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          v_code = amp(l1, l2, env);
          release(l2);
          release(l1);
          l2 = empty_seq;
          l1 = to_obj(are_eq(v_when_false, l2));
          release(l2);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            l1 = S_false;
          }
          else
          {
            l1 = S_true;
          }
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(108);
            i1 = i1 + 1;
            V1[i1] = to_obj(115);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            l5 = make_seq(V1, i1);
            V0[i0] = make_tagged_obj(S_string, l5);
            i0 = i0 + 1;
            i1 = 0;
            V1[i1] = to_obj(123);
            i1 = i1 + 1;
            l5 = make_seq(V1, i1);
            V0[i0] = make_tagged_obj(S_string, l5);
            i0 = i0 + 1;
            l4 = make_seq(V0, i0);
            l3 = amp(v_code, l4, env);
            release(l4);
            l5 = Compile_To_C(v_when_false, v_block_id, env);
            l4 = Indent(l5, env);
            release(l5);
            l2 = amp(l3, l4, env);
            release(l4);
            release(l3);
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(125);
            i1 = i1 + 1;
            l4 = make_seq(V1, i1);
            V0[i0] = make_tagged_obj(S_string, l4);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l1 = amp(l2, l3, env);
            release(l3);
            release(l2);
            release(v_code);
            v_code = l1;
          }
          l0 = v_code;
          add_ref(l0);
          release(v_cond);
          release(v_when_true);
          release(v_when_false);
          release(v_code);
          goto block_1685_end;
          block_1685_end:;
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1686_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_symbol_switch);
        if (!b1)
        {
          goto block_1686_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1686_end:;
        if (b1)
        {
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(115);
          i1 = i1 + 1;
          V1[i1] = to_obj(119);
          i1 = i1 + 1;
          V1[i1] = to_obj(105);
          i1 = i1 + 1;
          V1[i1] = to_obj(116);
          i1 = i1 + 1;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(104);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          l4 = ext_lookup(v_instr, S_val);
          add_ref(l4);
          l3 = To_C_Expr(l4, env);
          release(l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(123);
          i1 = i1 + 1;
          l1 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l1);
          i0 = i0 + 1;
          v_code = make_seq(V0, i0);
          l2 = ext_lookup(v_instr, S_cases);
          add_ref(l2);
          l1 = Rand_Sort(l2, env);
          release(l2);
          get_seq_iter(q0, l1);
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_c = get_curr_obj(q0);
            l6 = ext_lookup(v_c, S_vals);
            add_ref(l6);
            l3 = Rand_Sort(l6, env);
            release(l6);
            l2 = make_array(get_seq_len(l3), S_nil);
            get_seq_iter(q1, l3);
            i0 = 0;
            for ( ; ; )
            {
              if (is_out_of_range(q1))
              {
                break;
              }
              v_s = get_curr_obj(q1);
              i1 = 0;
              V0[i1] = to_obj(99);
              i1 = i1 + 1;
              V0[i1] = to_obj(97);
              i1 = i1 + 1;
              V0[i1] = to_obj(115);
              i1 = i1 + 1;
              V0[i1] = to_obj(101);
              i1 = i1 + 1;
              V0[i1] = to_obj(32);
              i1 = i1 + 1;
              V0[i1] = to_obj(83);
              i1 = i1 + 1;
              V0[i1] = to_obj(95);
              i1 = i1 + 1;
              l8 = make_seq(V0, i1);
              l7 = make_tagged_obj(S_string, l8);
              l9 = Untag(v_s, env);
              l8 = to_str(l9);
              release(l9);
              l6 = amp(l7, l8, env);
              release(l8);
              release(l7);
              i1 = 0;
              V0[i1] = to_obj(58);
              i1 = i1 + 1;
              l8 = make_seq(V0, i1);
              l7 = make_tagged_obj(S_string, l8);
              l4 = amp(l6, l7, env);
              release(l7);
              release(l6);
              set_at(l2, i0, l4);
              move_forward(q1);
              i0 = i0 + 1;
            }
            release(l3);
            l6 = ext_lookup(v_c, S_instrs);
            add_ref(l6);
            l5 = Compile_To_C(l6, v_block_id, env);
            release(l6);
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(98);
            i1 = i1 + 1;
            V1[i1] = to_obj(114);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(97);
            i1 = i1 + 1;
            V1[i1] = to_obj(107);
            i1 = i1 + 1;
            V1[i1] = to_obj(59);
            i1 = i1 + 1;
            l7 = make_seq(V1, i1);
            V0[i0] = make_tagged_obj(S_string, l7);
            i0 = i0 + 1;
            l6 = make_seq(V0, i0);
            l4 = amp(l5, l6, env);
            release(l6);
            release(l5);
            l3 = Indent(l4, env);
            release(l4);
            v_case_code = amp(l2, l3, env);
            release(l3);
            release(l2);
            l3 = Indent(v_case_code, env);
            l2 = amp(v_code, l3, env);
            release(l3);
            release(v_code);
            v_code = l2;
            release(v_case_code);
            move_forward(q0);
          }
          release(l1);
          l1 = ext_lookup(v_instr, S_else, b1);
          l1 = to_obj(b1);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(100);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(102);
            i1 = i1 + 1;
            V1[i1] = to_obj(97);
            i1 = i1 + 1;
            V1[i1] = to_obj(117);
            i1 = i1 + 1;
            V1[i1] = to_obj(108);
            i1 = i1 + 1;
            V1[i1] = to_obj(116);
            i1 = i1 + 1;
            V1[i1] = to_obj(58);
            i1 = i1 + 1;
            l4 = make_seq(V1, i1);
            V0[i0] = make_tagged_obj(S_string, l4);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = amp(v_code, l3, env);
            release(l3);
            l5 = ext_lookup(v_instr, S_else);
            add_ref(l5);
            l4 = Compile_To_C(l5, v_block_id, env);
            release(l5);
            l3 = Indent(l4, env);
            release(l4);
            l1 = amp(l2, l3, env);
            release(l3);
            release(l2);
            release(v_code);
            v_code = l1;
          }
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(125);
          i1 = i1 + 1;
          l2 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l2);
          i0 = i0 + 1;
          l1 = make_seq(V0, i0);
          l0 = amp(v_code, l1, env);
          release(l1);
          release(v_code);
          goto block_1687_end;
          block_1687_end:;
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1688_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_var_scope);
        if (!b1)
        {
          goto block_1688_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1688_end:;
        if (b1)
        {
          l1 = to_obj(unique_int());
          v_scope_id = To_Str(l1, env);
          release(l1);
          v_var = ext_lookup(v_instr, S_var);
          add_ref(v_var);
          v_val = ext_lookup(v_instr, S_new_value);
          add_ref(v_val);
          v_val_str = To_C_Expr(v_val, env);
          v_env_var = To_C_Var_Name(v_var, env);
          i0 = 0;
          V0[i0] = to_obj(66);
          i0 = i0 + 1;
          V0[i0] = to_obj(75);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          v_bk_var = amp(l1, v_scope_id, env);
          release(l1);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(79);
          i1 = i1 + 1;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(106);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l3 = amp(l4, v_bk_var, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = amp(l2, v_env_var, env);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l4 = make_seq(V1, i1);
          l3 = make_tagged_obj(S_string, l4);
          l2 = amp(v_env_var, l3, env);
          release(l3);
          l1 = amp(l2, v_val_str, env);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(97);
          i1 = i1 + 1;
          V1[i1] = to_obj(100);
          i1 = i1 + 1;
          V1[i1] = to_obj(100);
          i1 = i1 + 1;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(102);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          l1 = amp(l2, v_env_var, env);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          v_code = make_seq(V0, i0);
          l3 = ext_lookup(v_instr, S_body);
          add_ref(l3);
          l2 = Compile_To_C(l3, v_block_id, env);
          release(l3);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(114);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(108);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(97);
          i1 = i1 + 1;
          V1[i1] = to_obj(115);
          i1 = i1 + 1;
          V1[i1] = to_obj(101);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l3 = amp(l4, v_env_var, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l6 = make_seq(V1, i1);
          l5 = make_tagged_obj(S_string, l6);
          l4 = amp(v_env_var, l5, env);
          release(l5);
          l3 = amp(l4, v_bk_var, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
          l0 = v_code;
          add_ref(l0);
          release(v_var);
          release(v_val);
          release(v_code);
          release(v_scope_id);
          release(v_val_str);
          release(v_env_var);
          release(v_bk_var);
          goto block_1689_end;
          block_1689_end:;
          goto block_1644_end;
        }
        if (!is_tag_obj(p0))
        {
          b1 = false;
          goto block_1690_end;
        }
        l1 = get_tag(p0);
        b1 = are_eq(l1, S_cls_scope);
        if (!b1)
        {
          goto block_1690_end;
        }
        l1 = get_inner_obj(p0);
        b1 = true;
        block_1690_end:;
        if (b1)
        {
          l1 = to_obj(unique_int());
          v_scope_id = To_Str(l1, env);
          release(l1);
          v_var = ext_lookup(v_instr, S_var);
          add_ref(v_var);
          l1 = ext_lookup(v_instr, S_cls);
          add_ref(l1);
          v_arity = ext_lookup(l1, S_arity);
          add_ref(v_arity);
          release(l1);
          v_env = ext_lookup(v_instr, S_env);
          add_ref(v_env);
          v_env_size = Length(v_env, env);
          l1 = Untag(v_var, env);
          v_var_str = to_str(l1);
          release(l1);
          v_arity_str = To_Str(v_arity, env);
          v_env_size_str = To_Str(v_env_size, env);
          i0 = 0;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(118);
          i0 = i0 + 1;
          V0[i0] = to_obj(46);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l3 = make_tagged_obj(S_string, l4);
          l2 = amp(l3, v_arity_str, env);
          release(l3);
          i0 = 0;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l3 = make_tagged_obj(S_string, l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          v_fn_var = amp(l1, v_var_str, env);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(101);
          i0 = i0 + 1;
          V0[i0] = to_obj(110);
          i0 = i0 + 1;
          V0[i0] = to_obj(118);
          i0 = i0 + 1;
          V0[i0] = to_obj(46);
          i0 = i0 + 1;
          V0[i0] = to_obj(67);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l3 = make_tagged_obj(S_string, l4);
          l2 = amp(l3, v_arity_str, env);
          release(l3);
          i0 = 0;
          V0[i0] = to_obj(95);
          i0 = i0 + 1;
          l4 = make_seq(V0, i0);
          l3 = make_tagged_obj(S_string, l4);
          l1 = amp(l2, l3, env);
          release(l3);
          release(l2);
          v_data_var = amp(l1, v_var_str, env);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(66);
          i0 = i0 + 1;
          V0[i0] = to_obj(70);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          v_fn_bk_var = amp(l1, v_scope_id, env);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(66);
          i0 = i0 + 1;
          V0[i0] = to_obj(68);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          v_data_bk_var = amp(l1, v_scope_id, env);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(78);
          i0 = i0 + 1;
          V0[i0] = to_obj(68);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = make_tagged_obj(S_string, l2);
          v_new_data_var = amp(l1, v_scope_id, env);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(79);
          i0 = i0 + 1;
          V0[i0] = to_obj(98);
          i0 = i0 + 1;
          V0[i0] = to_obj(106);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l1 = Rep_Seq(v_arity, l2, env);
          release(l2);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(115);
          i1 = i1 + 1;
          V1[i1] = to_obj(116);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(79);
          i1 = i1 + 1;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(106);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(42);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(69);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(118);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(38);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          V0[i0] = make_tagged_obj(S_string, l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          v_tmp = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = 0;
          V0[i0] = to_obj(44);
          i0 = i0 + 1;
          V0[i0] = to_obj(32);
          i0 = i0 + 1;
          l3 = make_seq(V0, i0);
          l2 = make_tagged_obj(S_string, l3);
          l1 = Intermix(v_tmp, l2, env);
          release(l2);
          release(v_tmp);
          v_tmp = l1;
          l1 = Append(v_tmp, env);
          release(v_tmp);
          v_tmp = l1;
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(79);
          i1 = i1 + 1;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(106);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          V1[i1] = to_obj(42);
          i1 = i1 + 1;
          l7 = make_seq(V1, i1);
          l6 = make_tagged_obj(S_string, l7);
          l5 = amp(l6, v_fn_bk_var, env);
          release(l6);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          V1[i1] = to_obj(40);
          i1 = i1 + 1;
          l7 = make_seq(V1, i1);
          l6 = make_tagged_obj(S_string, l7);
          l4 = amp(l5, l6, env);
          release(l6);
          release(l5);
          l3 = amp(l4, v_tmp, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(41);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = amp(l2, v_fn_var, env);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(111);
          i1 = i1 + 1;
          V1[i1] = to_obj(110);
          i1 = i1 + 1;
          V1[i1] = to_obj(115);
          i1 = i1 + 1;
          V1[i1] = to_obj(116);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(79);
          i1 = i1 + 1;
          V1[i1] = to_obj(98);
          i1 = i1 + 1;
          V1[i1] = to_obj(106);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(42);
          i1 = i1 + 1;
          V1[i1] = to_obj(66);
          i1 = i1 + 1;
          V1[i1] = to_obj(68);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l3 = amp(l4, v_scope_id, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          l2 = amp(l3, l4, env);
          release(l4);
          release(l3);
          l1 = amp(l2, v_data_var, env);
          release(l2);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l3 = make_seq(V1, i1);
          l2 = make_tagged_obj(S_string, l3);
          V0[i0] = amp(l1, l2, env);
          release(l2);
          release(l1);
          i0 = i0 + 1;
          v_code = make_seq(V0, i0);
          l1 = greater(v_env_size, to_obj(0), env);
          if (!(are_eq(l1, S_true) | are_eq(l1, S_false)))
          {
            fail();
          }
          if (are_eq(l1, S_true))
          {
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(79);
            i1 = i1 + 1;
            V1[i1] = to_obj(98);
            i1 = i1 + 1;
            V1[i1] = to_obj(106);
            i1 = i1 + 1;
            V1[i1] = to_obj(32);
            i1 = i1 + 1;
            l7 = make_seq(V1, i1);
            l6 = make_tagged_obj(S_string, l7);
            l5 = amp(l6, v_new_data_var, env);
            release(l6);
            i1 = 0;
            V1[i1] = to_obj(91);
            i1 = i1 + 1;
            l7 = make_seq(V1, i1);
            l6 = make_tagged_obj(S_string, l7);
            l4 = amp(l5, l6, env);
            release(l6);
            release(l5);
            l3 = amp(l4, v_env_size_str, env);
            release(l4);
            i1 = 0;
            V1[i1] = to_obj(93);
            i1 = i1 + 1;
            V1[i1] = to_obj(59);
            i1 = i1 + 1;
            l5 = make_seq(V1, i1);
            l4 = make_tagged_obj(S_string, l5);
            V0[i0] = amp(l3, l4, env);
            release(l4);
            release(l3);
            i0 = i0 + 1;
            l2 = make_seq(V0, i0);
            l1 = amp(v_code, l2, env);
            release(l2);
            release(v_code);
            v_code = l1;
          }
          l1 = Inc_Seq(v_env_size, env);
          get_seq_iter(q0, l1);
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_i = get_curr_obj(q0);
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(91);
            i1 = i1 + 1;
            l9 = make_seq(V1, i1);
            l8 = make_tagged_obj(S_string, l9);
            l7 = amp(v_new_data_var, l8, env);
            release(l8);
            l8 = To_Str(v_i, env);
            l6 = amp(l7, l8, env);
            release(l8);
            release(l7);
            i1 = 0;
            V1[i1] = to_obj(93);
            i1 = i1 + 1;
            V1[i1] = to_obj(32);
            i1 = i1 + 1;
            V1[i1] = to_obj(61);
            i1 = i1 + 1;
            V1[i1] = to_obj(32);
            i1 = i1 + 1;
            l8 = make_seq(V1, i1);
            l7 = make_tagged_obj(S_string, l8);
            l5 = amp(l6, l7, env);
            release(l7);
            release(l6);
            l7 = brackets(v_env, v_i, env);
            l6 = To_C_Var_Name(l7, env);
            release(l7);
            l4 = amp(l5, l6, env);
            release(l6);
            release(l5);
            i1 = 0;
            V1[i1] = to_obj(59);
            i1 = i1 + 1;
            l6 = make_seq(V1, i1);
            l5 = make_tagged_obj(S_string, l6);
            V0[i0] = amp(l4, l5, env);
            release(l5);
            release(l4);
            i0 = i0 + 1;
            i1 = 0;
            V1[i1] = to_obj(97);
            i1 = i1 + 1;
            V1[i1] = to_obj(100);
            i1 = i1 + 1;
            V1[i1] = to_obj(100);
            i1 = i1 + 1;
            V1[i1] = to_obj(95);
            i1 = i1 + 1;
            V1[i1] = to_obj(114);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(102);
            i1 = i1 + 1;
            V1[i1] = to_obj(40);
            i1 = i1 + 1;
            l8 = make_seq(V1, i1);
            l7 = make_tagged_obj(S_string, l8);
            l6 = amp(l7, v_new_data_var, env);
            release(l7);
            i1 = 0;
            V1[i1] = to_obj(91);
            i1 = i1 + 1;
            l8 = make_seq(V1, i1);
            l7 = make_tagged_obj(S_string, l8);
            l5 = amp(l6, l7, env);
            release(l7);
            release(l6);
            l6 = To_Str(v_i, env);
            l4 = amp(l5, l6, env);
            release(l6);
            release(l5);
            i1 = 0;
            V1[i1] = to_obj(93);
            i1 = i1 + 1;
            V1[i1] = to_obj(41);
            i1 = i1 + 1;
            V1[i1] = to_obj(59);
            i1 = i1 + 1;
            l6 = make_seq(V1, i1);
            l5 = make_tagged_obj(S_string, l6);
            V0[i0] = amp(l4, l5, env);
            release(l5);
            release(l4);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = amp(v_code, l3, env);
            release(l3);
            release(v_code);
            v_code = l2;
            move_forward(q0);
          }
          release(l1);
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(99);
          i1 = i1 + 1;
          V1[i1] = to_obj(108);
          i1 = i1 + 1;
          V1[i1] = to_obj(115);
          i1 = i1 + 1;
          V1[i1] = to_obj(95);
          i1 = i1 + 1;
          l6 = make_seq(V1, i1);
          l5 = make_tagged_obj(S_string, l6);
          l4 = amp(v_fn_var, l5, env);
          release(l5);
          l7 = ext_lookup(v_instr, S_cls);
          add_ref(l7);
          l6 = env.n1_cls2id(l7, env.C1_cls2id, env);
          release(l7);
          l5 = To_Str(l6, env);
          release(l6);
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l6 = make_seq(V1, i1);
          l5 = make_tagged_obj(S_string, l6);
          l4 = amp(v_data_var, l5, env);
          release(l5);
          l6 = greater(v_env_size, to_obj(0), env);
          if (!(are_eq(l6, S_true) | are_eq(l6, S_false)))
          {
            fail();
          }
          if (are_eq(l6, S_true))
          {
            l5 = v_new_data_var;
            add_ref(l5);
          }
          else
          {
            i1 = 0;
            V1[i1] = to_obj(48);
            i1 = i1 + 1;
            l6 = make_seq(V1, i1);
            l5 = make_tagged_obj(S_string, l6);
          }
          l3 = amp(l4, l5, env);
          release(l5);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
          l3 = ext_lookup(v_instr, S_body);
          add_ref(l3);
          l2 = Compile_To_C(l3, v_block_id, env);
          release(l3);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
          i0 = 0;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l6 = make_seq(V1, i1);
          l5 = make_tagged_obj(S_string, l6);
          l4 = amp(v_fn_var, l5, env);
          release(l5);
          l3 = amp(l4, v_fn_bk_var, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          i1 = 0;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          V1[i1] = to_obj(61);
          i1 = i1 + 1;
          V1[i1] = to_obj(32);
          i1 = i1 + 1;
          l6 = make_seq(V1, i1);
          l5 = make_tagged_obj(S_string, l6);
          l4 = amp(v_data_var, l5, env);
          release(l5);
          l3 = amp(l4, v_data_bk_var, env);
          release(l4);
          i1 = 0;
          V1[i1] = to_obj(59);
          i1 = i1 + 1;
          l5 = make_seq(V1, i1);
          l4 = make_tagged_obj(S_string, l5);
          V0[i0] = amp(l3, l4, env);
          release(l4);
          release(l3);
          i0 = i0 + 1;
          l2 = make_seq(V0, i0);
          l1 = amp(v_code, l2, env);
          release(l2);
          release(v_code);
          v_code = l1;
          l1 = Inc_Seq(v_env_size, env);
          get_seq_iter(q0, l1);
          for ( ; ; )
          {
            if (is_out_of_range(q0))
            {
              break;
            }
            v_i = get_curr_obj(q0);
            i0 = 0;
            i1 = 0;
            V1[i1] = to_obj(114);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(108);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(97);
            i1 = i1 + 1;
            V1[i1] = to_obj(115);
            i1 = i1 + 1;
            V1[i1] = to_obj(101);
            i1 = i1 + 1;
            V1[i1] = to_obj(40);
            i1 = i1 + 1;
            l8 = make_seq(V1, i1);
            l7 = make_tagged_obj(S_string, l8);
            l6 = amp(l7, v_new_data_var, env);
            release(l7);
            i1 = 0;
            V1[i1] = to_obj(91);
            i1 = i1 + 1;
            l8 = make_seq(V1, i1);
            l7 = make_tagged_obj(S_string, l8);
            l5 = amp(l6, l7, env);
            release(l7);
            release(l6);
            l6 = To_Str(v_i, env);
            l4 = amp(l5, l6, env);
            release(l6);
            release(l5);
            i1 = 0;
            V1[i1] = to_obj(93);
            i1 = i1 + 1;
            V1[i1] = to_obj(41);
            i1 = i1 + 1;
            V1[i1] = to_obj(59);
            i1 = i1 + 1;
            l6 = make_seq(V1, i1);
            l5 = make_tagged_obj(S_string, l6);
            V0[i0] = amp(l4, l5, env);
            release(l5);
            release(l4);
            i0 = i0 + 1;
            l3 = make_seq(V0, i0);
            l2 = amp(v_code, l3, env);
            release(l3);
            release(v_code);
            v_code = l2;
            move_forward(q0);
          }
          release(l1);
          l0 = v_code;
          add_ref(l0);
          release(v_var);
          release(v_env);
          release(v_arity);
          release(v_code);
          release(v_scope_id);
          release(v_env_size);
          release(v_var_str);
          release(v_arity_str);
          release(v_env_size_str);
          release(v_fn_var);
          release(v_data_var);
          release(v_fn_bk_var);
          release(v_data_bk_var);
          release(v_new_data_var);
          release(v_tmp);
          goto block_1691_end;
          block_1691_end:;
          goto block_1644_end;
        }
        fail();
        block_1644_end:;
        goto block_1642_end;
      }
    }
    b1 = is_clsdef(p0);
    if (b1)
    {
      v_cd = p0;
    }
    if (b1)
    {
      b1 = is_nat(p1);
      if (b1)
      {
        v_id = p1;
      }
      if (b1)
      {
        l5 = ext_lookup(v_cd, S_arity);
        add_ref(l5);
        l2 = Inc_Seq(l5, env);
        release(l5);
        l1 = make_array(get_seq_len(l2), S_nil);
        get_seq_iter(q0, l2);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_n = get_curr_obj(q0);
          i1 = 0;
          V0[i1] = to_obj(79);
          i1 = i1 + 1;
          V0[i1] = to_obj(98);
          i1 = i1 + 1;
          V0[i1] = to_obj(106);
          i1 = i1 + 1;
          V0[i1] = to_obj(32);
          i1 = i1 + 1;
          V0[i1] = to_obj(112);
          i1 = i1 + 1;
          l6 = make_seq(V0, i1);
          l5 = make_tagged_obj(S_string, l6);
          l6 = To_Str(v_n, env);
          l3 = amp(l5, l6, env);
          release(l6);
          release(l5);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l2);
        i0 = 0;
        i1 = 0;
        V1[i1] = to_obj(99);
        i1 = i1 + 1;
        V1[i1] = to_obj(111);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(115);
        i1 = i1 + 1;
        V1[i1] = to_obj(116);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(79);
        i1 = i1 + 1;
        V1[i1] = to_obj(98);
        i1 = i1 + 1;
        V1[i1] = to_obj(106);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(67);
        i1 = i1 + 1;
        V1[i1] = to_obj(91);
        i1 = i1 + 1;
        V1[i1] = to_obj(93);
        i1 = i1 + 1;
        l3 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l3);
        i0 = i0 + 1;
        i1 = 0;
        V1[i1] = to_obj(69);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(118);
        i1 = i1 + 1;
        V1[i1] = to_obj(32);
        i1 = i1 + 1;
        V1[i1] = to_obj(38);
        i1 = i1 + 1;
        V1[i1] = to_obj(101);
        i1 = i1 + 1;
        V1[i1] = to_obj(110);
        i1 = i1 + 1;
        V1[i1] = to_obj(118);
        i1 = i1 + 1;
        l3 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        v_par_list = amp(l1, l2, env);
        release(l2);
        release(l1);
        i0 = 0;
        V0[i0] = to_obj(79);
        i0 = i0 + 1;
        V0[i0] = to_obj(98);
        i0 = i0 + 1;
        V0[i0] = to_obj(106);
        i0 = i0 + 1;
        V0[i0] = to_obj(32);
        i0 = i0 + 1;
        V0[i0] = to_obj(99);
        i0 = i0 + 1;
        V0[i0] = to_obj(108);
        i0 = i0 + 1;
        V0[i0] = to_obj(115);
        i0 = i0 + 1;
        V0[i0] = to_obj(95);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        l4 = make_tagged_obj(S_string, l5);
        l5 = To_Str(v_id, env);
        l3 = amp(l4, l5, env);
        release(l5);
        release(l4);
        i0 = 0;
        V0[i0] = to_obj(40);
        i0 = i0 + 1;
        l5 = make_seq(V0, i0);
        l4 = make_tagged_obj(S_string, l5);
        l2 = amp(l3, l4, env);
        release(l4);
        release(l3);
        i0 = 0;
        V0[i0] = to_obj(44);
        i0 = i0 + 1;
        V0[i0] = to_obj(32);
        i0 = i0 + 1;
        l6 = make_seq(V0, i0);
        l5 = make_tagged_obj(S_string, l6);
        l4 = Intermix(v_par_list, l5, env);
        release(l5);
        l3 = Append(l4, env);
        release(l4);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        V0[i0] = to_obj(41);
        i0 = i0 + 1;
        l3 = make_seq(V0, i0);
        l2 = make_tagged_obj(S_string, l3);
        v_signature = amp(l1, l2, env);
        release(l2);
        release(l1);
        v_body = ext_lookup(v_cd, S_body);
        add_ref(v_body);
        v_vars_to_decl = Vars_To_Declare(v_body, env);
        l1 = Rand_Sort(v_vars_to_decl, env);
        v_var_decls = make_array(get_seq_len(l1), S_nil);
        get_seq_iter(q0, l1);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_v = get_curr_obj(q0);
          l2 = Var_Decl(v_v, env);
          set_at(v_var_decls, i0, l2);
          move_forward(q0);
          i0 = i0 + 1;
        }
        release(l1);
        v_comp_body = Compile_To_C(v_body, S_nil, env);
        i0 = 0;
        V0[i0] = v_signature;
        add_ref(V0[i0]);
        i0 = i0 + 1;
        i1 = 0;
        V1[i1] = to_obj(123);
        i1 = i1 + 1;
        l5 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l5);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l5 = Indent(v_var_decls, env);
        l3 = amp(l4, l5, env);
        release(l5);
        release(l4);
        i0 = 0;
        l5 = empty_seq;
        V0[i0] = make_tagged_obj(S_string, l5);
        i0 = i0 + 1;
        l4 = make_seq(V0, i0);
        l2 = amp(l3, l4, env);
        release(l4);
        release(l3);
        l3 = Indent(v_comp_body, env);
        l1 = amp(l2, l3, env);
        release(l3);
        release(l2);
        i0 = 0;
        i1 = 0;
        V1[i1] = to_obj(125);
        i1 = i1 + 1;
        l3 = make_seq(V1, i1);
        V0[i0] = make_tagged_obj(S_string, l3);
        i0 = i0 + 1;
        l2 = make_seq(V0, i0);
        l0 = amp(l1, l2, env);
        release(l2);
        release(l1);
        release(v_body);
        release(v_par_list);
        release(v_signature);
        release(v_vars_to_decl);
        release(v_var_decls);
        release(v_comp_body);
        goto block_1692_end;
        block_1692_end:;
        goto block_1642_end;
      }
    }
    if (are_eq(p0, empty_seq))
    {
      b1 = true;
      goto block_1693_end;
    }
    if (!is_ne_seq(p0))
    {
      b1 = false;
      goto block_1693_end;
    }
    get_seq_iter(q0, p0);
    for ( ; ; )
    {
      if (is_out_of_range(q0))
      {
        break;
      }
      l1 = get_curr_obj(q0);
      b1 = is_instr(l1);
      if (!b1)
      {
        goto block_1693_end;
      }
      move_forward(q0);
    }
    b1 = true;
    block_1693_end:;
    if (b1)
    {
      v_instrs = p0;
    }
    if (b1)
    {
      b1 = are_eq(S_nil, p1);
      if (b1)
      {
        goto block_1694_end;
      }
      b1 = is_nat(p1);
      if (b1)
      {
        goto block_1694_end;
      }
      block_1694_end:;
      if (b1)
      {
        v_block_id = p1;
      }
      if (b1)
      {
        l1 = make_array(get_seq_len(v_instrs), S_nil);
        get_seq_iter(q0, v_instrs);
        i0 = 0;
        for ( ; ; )
        {
          if (is_out_of_range(q0))
          {
            break;
          }
          v_instr = get_curr_obj(q0);
          l3 = Compile_To_C(v_instr, v_block_id, env);
          set_at(l1, i0, l3);
          move_forward(q0);
          i0 = i0 + 1;
        }
        l0 = Join(l1, env);
        release(l1);
        goto block_1642_end;
      }
    }
    fail();
    block_1642_end:;
    return l0;
  }
  
  
}
